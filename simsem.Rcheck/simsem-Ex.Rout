
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simsem"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('simsem')
Loading required package: lavaan
This is lavaan 0.4-14
lavaan is BETA software! Please report any bugs.
Loading required package: MASS
 
###############################################################################################
This is simsem 0.3-2
simsem is BETA software! Please report any bugs.
simsem was developed at the University of Kansas Center for Research Methods and Data Analysis.
###############################################################################################
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SimDataDist-class")
> ### * SimDataDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataDist-class
> ### Title: Class '"SimDataDist"'
> ### Aliases: SimDataDist-class summary,SimDataDist-method
> ###   plotDist,SimDataDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # Need to be fixed
> 
> showClass("SimDataDist")
Class "SimDataDist" [package "simsem"]

Slots:
                                                                       
Name:             p      margins paramMargins    keepScale      reverse
Class:      numeric    character         list      logical       vector
> 
> d1 <- list(df=2)
> d2 <- list(df=3)
> d3 <- list(df=4)
> d4 <- list(df=5)
> d5 <- list(df=3)
> d6 <- list(df=4)
> d7 <- list(df=5)
> d8 <- list(df=6)
> 
> 
> dist <- bindDist(c(rep("t", 4), rep("chisq", 8)), d1, d2, d3, d4, d5, d6, d7, d8, d5, d6, d7, d8)
> 
> 
> 
> 
> cleanEx()
> nameEx("SimFunction-class")
> ### * SimFunction-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimFunction-class
> ### Title: Class '"SimFunction"'
> ### Aliases: SimFunction-class summary,SimFunction-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # The example still does not work
> 
> #showClass("SimFunction")
> 
> #n65 <- simNorm(0.6, 0.05)
> #u35 <- simUnif(0.3, 0.5)
> #u68 <- simUnif(0.6, 0.8)
> #u2 <- simUnif(-0.2, 0.2)
> #n1 <- simNorm(0, 0.1)
> 
> #loading <- matrix(0, 9, 3)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loading[7:9, 3] <- NA
> #loading.start <- matrix("", 9, 3)
> #loading.start[1:3, 1] <- 0.7
> #loading.start[4:6, 2] <- 0.7
> #loading.start[7:9, 3] <- "u68"
> #LY <- simMatrix(loading, loading.start)
> 
> #RTE <- symMatrix(diag(9))
> 
> #factor.cor <- diag(3)
> #factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> #RPS <- symMatrix(factor.cor, 0.5)
> 
> #path <- matrix(0, 3, 3)
> #path[3, 1:2] <- NA
> #path.start <- matrix(0, 3, 3)
> #path.start[3, 1] <- "n65"
> #path.start[3, 2] <- "u35"
> #BE <- simMatrix(path, path.start)
> 
> #datGen <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> #loading.trivial <- matrix(NA, 9, 3)
> #loading.trivial[is.na(loading)] <- 0
> #LY.trivial <- simMatrix(loading.trivial, "u2")
> 
> #error.cor.trivial <- matrix(NA, 9, 9)
> #diag(error.cor.trivial) <- 0
> #RTE.trivial <- symMatrix(error.cor.trivial, "n1")
> 
> #misGen <- simMisspecSEM(LY = LY.trivial, RTE = RTE.trivial)
> 
> #Data.Mis <- simData(datGen, 300, misspec=misGen)
> 
> #loading <- matrix(0, 12, 4)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loading[7:9, 4] <- NA
> #loading[10:12, 3] <- NA
> 
> #path <- matrix(0, 4, 4)
> #path[4, 1:3] <- NA
> 
> #analysis <- simParamSEM(BE=path, LY=loading)
> 
> #Model <- simModel(analysis)
> 
> # Find the products of indicators
> #newFUN <- function(data, var1, var2, namesProd) {
> #	prod <- data[,var1] * data[,var2]
> #	colnames(prod) <- namesProd
> #	return(data.frame(data, prod))
> #}
> 
> #fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> #Output <- simResult(10, Data.Mis, Model, objFunction=fun)
> #summary(Output)
> 
> # Example of using the simfunction
> #mc <- simFunction(newFUN, var1=1:3, var2=4:6, namesProd=paste("y", 10:12, sep=""))
> #run(mc, attitude[,-1])
> #summary(mc)
> 
> 
> 
> cleanEx()
> nameEx("SimMatrix-class")
> ### * SimMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMatrix-class
> ### Title: Matrix object: Random parameters matrix
> ### Aliases: SimMatrix-class summaryShort,SimMatrix-method
> ###   summary,SimMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMatrix")
Class "SimMatrix" [package "simsem"]

Slots:
                                              
Name:       free  popParam   misspec symmetric
Class:    matrix    matrix    matrix   logical
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- bind(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" "0"  
[2,] "0.7" "0"  
[3,] "0.7" "0"  
[4,] "0"   "0.7"
[5,] "0"   "0.7"
[6,] "0"   "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> # run(LX)
> 
> LY <- bind(loading, "rnorm(1, 0.6, 0.05)")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> # run(LY)
> 
> 
> 
> cleanEx()
> nameEx("SimMissing-class")
> ### * SimMissing-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMissing-class
> ### Title: Class '"SimMissing"'
> ### Aliases: SimMissing-class summary,SimMissing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("SimResult-class")
> ### * SimResult-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResult-class
> ### Title: Class '"SimResult"'
> ### Aliases: SimResult-class summary,SimResult-method
> ###   summaryPopulation,SimResult-method getPopulation,SimResult-method
> ###   setPopulation,SimResult,data.frame-method
> ###   setPopulation,SimResult,SimSet-method
> ###   setPopulation,SimResult,VirtualRSet-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                                       
Name:      pmMCAR      pmMAR     timing
Class:     vector     vector       list
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- bind(loading, 0.7)
> RPH <- binds(diag(1))
> RTD <- binds(diag(6))
> CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean     SD
      Chi     17.123   17.314   17.468   17.502   11.619  5.626
      AIC   7506.931 7510.452 7513.269 7513.903 7448.091 69.165
      BIC   7582.794 7586.315 7589.132 7589.766 7523.954 69.165
      RMSEA    0.042    0.043    0.043    0.043    0.022  0.021
      CFI      0.992    0.992    0.991    0.991    0.996  0.004
      TLI      0.987    0.986    0.985    0.985    0.996  0.009
      SRMR     0.019    0.019    0.019    0.019    0.015  0.004
========= Parameter Estimates and Standard Errors ============
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
1.y1=~x1            0.691       0.028      0.041                   1   0.697
1.y1=~x2            0.685       0.023      0.042                   1   0.685
1.y1=~x3            0.696       0.016      0.041                   1   0.703
1.y1=~x4            0.666       0.056      0.041                   1   0.681
1.y1=~x5            0.695       0.031      0.042                   1   0.699
1.y1=~x6            0.727       0.050      0.042                   1   0.721
1.x1~~x1            0.504       0.014      0.038                   1   0.514
1.x2~~x2            0.531       0.034      0.040                   1   0.531
1.x3~~x3            0.496       0.044      0.038                   1   0.505
1.x4~~x4            0.509       0.038      0.038                   1   0.535
1.x5~~x5            0.506       0.056      0.039                   1   0.510
1.x6~~x6            0.485       0.021      0.038                   1   0.479
1.x1~1              0.018       0.029      0.044                   0   0.018
1.x2~1              0.005       0.043      0.045                   0   0.005
1.x3~1              0.021       0.019      0.044                   0   0.021
1.x4~1              0.014       0.039      0.044                   0   0.015
1.x5~1              0.007       0.033      0.044                   0   0.007
1.x6~1              0.013       0.021      0.045                   0   0.013
         Std.Est.SD Average.Param Average.Bias Coverage
1.y1=~x1      0.014          0.70       -0.009      1.0
1.y1=~x2      0.016          0.70       -0.015      1.0
1.y1=~x3      0.018          0.70       -0.004      1.0
1.y1=~x4      0.039          0.70       -0.034      0.8
1.y1=~x5      0.022          0.70       -0.005      1.0
1.y1=~x6      0.028          0.70        0.027      0.8
1.x1~~x1      0.020          0.51       -0.006      1.0
1.x2~~x2      0.022          0.51        0.021      1.0
1.x3~~x3      0.025          0.51       -0.014      1.0
1.x4~~x4      0.051          0.51       -0.001      1.0
1.x5~~x5      0.031          0.51       -0.004      1.0
1.x6~~x6      0.040          0.51       -0.025      1.0
1.x1~1        0.029          0.00        0.018      1.0
1.x2~1        0.042          0.00        0.005      1.0
1.x3~1        0.020          0.00        0.021      1.0
1.x4~1        0.041          0.00        0.014      1.0
1.x5~1        0.033          0.00        0.007      1.0
1.x6~1        0.021          0.00        0.013      1.0
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.669 -0.669  0.996 -0.977 -0.998  1.000
AIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
BIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
RMSEA  0.996 -0.616 -0.616  1.000 -0.966 -0.990  0.997
CFI   -0.977  0.791  0.791 -0.966  1.000  0.985 -0.978
TLI   -0.998  0.710  0.710 -0.990  0.985  1.000 -0.997
SRMR   1.000 -0.667 -0.667  0.997 -0.978 -0.997  1.000
================== Replications =====================
Number of Replications
[1] 5
Number of Converged Replications
[1] 5
> getCutoff(Output, 0.05)
         Chi      AIC      BIC     RMSEA       CFI      TLI       SRMR
95% 17.31436 7510.452 7586.315 0.0429723 0.9915622 0.985937 0.01886139
> summaryParam(Output)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.y1=~x1      0.690756156  0.02810822 0.04149426                   1
1.y1=~x2      0.684804691  0.02263627 0.04211500                   1
1.y1=~x3      0.696132921  0.01555991 0.04135121                   1
1.y1=~x4      0.665635591  0.05563827 0.04117407                   1
1.y1=~x5      0.695344582  0.03075850 0.04160583                   1
1.y1=~x6      0.726805534  0.04988723 0.04168946                   1
1.x1~~x1      0.504025133  0.01390457 0.03830915                   1
1.x2~~x2      0.530959200  0.03432317 0.03978899                   1
1.x3~~x3      0.495700421  0.04352861 0.03793284                   1
1.x4~~x4      0.509197688  0.03774779 0.03808872                   1
1.x5~~x5      0.505610318  0.05558941 0.03852026                   1
1.x6~~x6      0.484795772  0.02083428 0.03801104                   1
1.x1~1        0.018166046  0.02869040 0.04430370                   0
1.x2~1        0.004590887  0.04278074 0.04471879                   0
1.x3~1        0.020747715  0.01949681 0.04427270                   0
1.x4~1        0.013662157  0.03941881 0.04367342                   0
1.x5~1        0.006917330  0.03267557 0.04446808                   0
1.x6~1        0.013019004  0.02085169 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.y1=~x1 0.697070143 0.01422193          0.70 -0.0092438439      1.0
1.y1=~x2 0.684851022 0.01632425          0.70 -0.0151953087      1.0
1.y1=~x3 0.703397021 0.01804013          0.70 -0.0038670795      1.0
1.y1=~x4 0.680861392 0.03863723          0.70 -0.0343644092      0.8
1.y1=~x5 0.699459950 0.02232976          0.70 -0.0046554178      1.0
1.y1=~x6 0.721071722 0.02764561          0.70  0.0268055340      0.8
1.x1~~x1 0.513931405 0.01991776          0.51 -0.0059748670      1.0
1.x2~~x2 0.530765893 0.02240770          0.51  0.0209592001      1.0
1.x3~~x3 0.504972274 0.02529073          0.51 -0.0142995790      1.0
1.x4~~x4 0.535233496 0.05128518          0.51 -0.0008023119      1.0
1.x5~~x5 0.510356884 0.03111063          0.51 -0.0043896822      1.0
1.x6~~x6 0.479444147 0.03996509          0.51 -0.0252042285      1.0
1.x1~1   0.018417709 0.02909937          0.00  0.0181660459      1.0
1.x2~1   0.004545703 0.04208763          0.00  0.0045908869      1.0
1.x3~1   0.021140079 0.02002116          0.00  0.0207477151      1.0
1.x4~1   0.014854838 0.04097594          0.00  0.0136621570      1.0
1.x5~1   0.007233804 0.03314310          0.00  0.0069173300      1.0
1.x6~1   0.013257560 0.02080362          0.00  0.0130190044      1.0
> summaryPopulation(Output)
                 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
Population Value 0.7  0.7  0.7  0.7  0.7  0.7  0.51 0.51 0.51 0.51  0.51  0.51 
                 [,13] [,14] [,15] [,16] [,17] [,18]
Population Value 0     0     0     0     0     0    
> param <- getPopulation(Output)
> Output <- setPopulation(Output, param)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimSem-class")
> ### * SimSem-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimSem-class
> ### Title: Class '"SimSem"'
> ### Aliases: SimSem-class summary,SimSem-method
> 
> ### ** Examples
> 
> showClass("SimSem")
Class "SimSem" [package "simsem"]

Slots:
                                    
Name:         pt      dgen modelType
Class:      list      list character
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- bind(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" "0"  
[2,] "0.7" "0"  
[3,] "0.7" "0"  
[4,] "0"   "0.7"
[5,] "0"   "0.7"
[6,] "0"   "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- binds(latent.cor, 0.5)
> 
> # Error Correlation Object
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- binds(error.cor)
> 
> CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> summary(CFA.Model)
Model Type
[1] "CFA"
Lavaan Analysis ModelData Generation Template
LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
 [1] "1" "0" "0" "0" "0" "0" "0" "1" "0" "0" "0" "0" "0" "0" "1" "0" "0" "0" "0"
[20] "0" "0" "1" "0" "0" "0" "0" "0" "0" "1" "0" "0" "0" "0" "0" "0" "1"

VY: Variance of Indicator.Y 
[1] "NA:1:" "NA:1:" "NA:1:" "NA:1:" "NA:1:" "NA:1:"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0:" "NA:0:" "NA:0:" "NA:0:" "NA:0:" "NA:0:"

VPS: Variance of Regression.Residual.PSI 
[1] "1:" "1:"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1:" "1:"

AL: Regression Intercept of Factor.ETA 
[1] "0:" "0:"

ME: mean of Factor.ETA 
[1] "0:" "0:"
-------------------------- 
> #run(CFA.Model)
> 
> #CFA.Model2 <- extract(CFA.Model, y=1:3, e=1)
> #summary(CFA.Model2)
> 
> 
> 
> cleanEx()
> nameEx("SimVector-class")
> ### * SimVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimVector-class
> ### Title: Vector object: Random parameters vector
> ### Aliases: SimVector-class summaryShort,SimVector-method
> ###   summary,SimVector-method extract,SimVector-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimVector")
Class "SimVector" [package "simsem"]

Slots:
                                 
Name:      free popParam  misspec
Class:   vector   vector   vector
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- bind(factor.mean, factor.mean.starting)
> #run(AL)
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Population Parameters/Starting Values:"
[1] "5" "2"
[1] "Model misspecification"
logical(0)
> summaryShort(AL)
[1] "NA:5:" "NA:2:"
> 
> 
> 
> 
> cleanEx()
> nameEx("analyze")
> ### * analyze
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: analyze
> ### Title: TBA
> ### Aliases: analyze
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> dat <- generate(CFA.Model,200)
> out <- analyze(CFA.Model,dat)
> 
> 
> 
> cleanEx()
> nameEx("anova")
> ### * anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova
> ### Title: Provide a comparison of nested models and nonnested models
> ###   across replications
> ### Aliases: anova,SimResult-method
> 
> ### ** Examples
> 
> loading1 <- matrix(0, 6, 1)
> loading1[1:6, 1] <- NA
> loading2 <- loading1
> loading2[6,1] <- 0
> LX1 <- bind(loading1, 0.7)
> LX2 <- bind(loading2, 0.7)
> RPH <- binds(diag(1))
> RTD <- binds(diag(6))
> CFA.Model1 <- model(LY = LX1, RPS = RPH, RTE = RTD, modelType="CFA")
> CFA.Model2 <- model(LY = LX2, RPS = RPH, RTE = RTD, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> # Need to make sure that both simResult calls have the same seed!
> Output1 <- sim(5, n=500, model=CFA.Model1, generate=CFA.Model1, seed=123567)
Loading required package: parallel
> Output2 <- sim(5, n=500, model=CFA.Model2, generate=CFA.Model1, seed=123567)
> anova(Output1, Output2)
$summary
  df      chisq       CFI       TLI       RMSEA      AIC      BIC
1  9   6.845657 0.9996655 1.0036849 0.004462633 7430.953 7506.816
2 10 270.509542 0.7583201 0.6374801 0.227991831 7692.617 7764.265

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
263.6638858   1.0000000   1.0000000  -0.2413454  -0.3662047   0.2235292 
   AIC diff    BIC diff 
261.6638858 257.4492777 

$varyParam
NULL

> 
> Output1b <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model1, generate=CFA.Model1, seed=123567)
> Output2b <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model2, generate=CFA.Model1, seed=123567)
> anova(Output1b, Output2b)
$summary
  df      chisq       CFI       TLI      RMSEA      AIC      BIC
1  9   9.161416 0.9894247 0.9867162 0.02533748 4151.350 4212.954
2 10 146.767548 0.7738087 0.6607130 0.22183507 4286.956 4345.138

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
137.6061325   1.0000000   1.0000000  -0.2156160  -0.3260032   0.1964976 
   AIC diff    BIC diff 
135.6061325 132.1836683 

$varyParam
     N power.1
1   50       1
2   74       1
3   97       1
4  121       1
5  145       1
6  168       1
7  192       1
8  216       1
9  239       1
10 263       1
11 287       1
12 311       1
13 334       1
14 358       1
15 382       1
16 405       1
17 429       1
18 453       1
19 476       1
20 500       1

> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("bind")
> ### * bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind
> ### Title: Specify matrices for Monte Carlo simulation of structural
> ###   equation models
> ### Aliases: bind binds
> 
> ### ** Examples
> 
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LY <- bind(loading, loadingValues)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" "0"  
[2,] "0.7" "0"  
[3,] "0.7" "0"  
[4,] "0"   "0.7"
[5,] "0"   "0.7"
[6,] "0"   "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> 
> # Set both factor correlations to .05
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> # Misspecify all error covarainces
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- NA
> RTE <- binds(error.cor,1,"runif(1,-.05,.05)")
> 
> 
> 
> 
> cleanEx()
> nameEx("bindDist")
> ### * bindDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bindDist
> ### Title: Create a data distribution object.
> ### Aliases: bindDist
> 
> ### ** Examples
> 
> d1 <- list(df=2)
> d2 <- list(df=3)
> d3 <- list(df=4)
> d4 <- list(df=5)
> d5 <- list(df=3)
> d6 <- list(df=4)
> d7 <- list(df=5)
> d8 <- list(df=6)
> 
> 
> dist <- bindDist(c(rep("t", 4), rep("chisq", 8)), d1, d2, d3, d4, d5, d6, d7, d8, d5, d6, d7, d8)
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Extract only converged replications in the result objects
> ### Aliases: clean
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("cleanSimResult")
> ### * cleanSimResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cleanSimResult
> ### Title: Extract only converged replications in the result object
> ### Aliases: cleanSimResult
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("continuousPower")
> ### * continuousPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: continuousPower
> ### Title: Find power of model parameters when simulations have randomly
> ###   varying parameters
> ### Aliases: continuousPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- bind(loading, 0.7)
> ##D RPH <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D dat <- generate(CFA.Model, 50)
> ##D out <- analyze(CFA.Model, dat)
> ##D 
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D 
> ##D Output <- sim(NULL, CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D Cpow <- continuousPower(Output, contN = TRUE, contMCAR = TRUE)
> ##D Cpow
> ##D 
> ##D Cpow2 <- continuousPower(Output, contN = TRUE, contMCAR = TRUE, pred=list(N = 200, pmMCAR = 0.3))
> ##D Cpow2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createData")
> ### * createData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createData
> ### Title: Create data from a set of drawn parameters.
> ### Aliases: createData
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> param <- draw(CFA.Model)
> 
> # Generate data from the first group in the paramList.
> dat <- createData(param[[1]], n = 200) 
> 
> 
> 
> cleanEx()
> nameEx("draw")
> ### * draw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw
> ### Title: Draw parameters from a 'SimSem' object.
> ### Aliases: draw
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> param <- draw(CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("extractLavaanFit")
> ### * extractLavaanFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractLavaanFit
> ### Title: Extract fit indices from the lavaan object
> ### Aliases: extractLavaanFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("find2Dhist")
> ### * find2Dhist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find2Dhist
> ### Title: Fit the 2D Kernel Density Estimate
> ### Aliases: find2Dhist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findFactorIntercept")
> ### * findFactorIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorIntercept
> ### Title: Find factor intercept from regression coefficient matrix and
> ###   factor total means
> ### Aliases: findFactorIntercept
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> factorMean <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorIntercept(path, factorMean)
[1]  5.0  2.0  3.0 -3.0 -3.2 -2.6  0.0  0.0  0.0
> 
> 
> 
> cleanEx()
> nameEx("findFactorMean")
> ### * findFactorMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorMean
> ### Title: Find factor total means from regression coefficient matrix and
> ###   factor intercept
> ### Aliases: findFactorMean
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> intcept <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorMean(path, intcept)
[1] 5.00 2.00 3.00 3.00 3.20 2.60 1.80 3.12 2.84
> 
> 
> 
> cleanEx()
> nameEx("findFactorResidualVar")
> ### * findFactorResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorResidualVar
> ### Title: Find factor residual variances from regression coefficient
> ###   matrix, factor (residual) correlations, and total factor variances
> ### Aliases: findFactorResidualVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> totalVar <- rep(1, 9)
> findFactorResidualVar(path, facCor, totalVar)
[1] 1.00000 1.00000 1.00000 0.64000 0.28800 0.28800 0.64000 0.29568 0.21888
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalCov")
> ### * findFactorTotalCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalCov
> ### Title: Find factor total covariance from regression coefficient matrix,
> ###   factor residual covariance
> ### Aliases: findFactorTotalCov
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalCov(path, corPsi=facCor, errorVarPsi=residualVar)
       [,1]  [,2]  [,3]   [,4]   [,5]   [,6]    [,7]    [,8]    [,9]
 [1,] 1.000 0.400 0.400 0.6000 0.6400 0.4000 0.36000 0.62400 0.49600
 [2,] 0.400 1.000 0.400 0.2400 0.7600 0.6400 0.14400 0.55200 0.68800
 [3,] 0.400 0.400 1.000 0.2400 0.4000 0.7600 0.14400 0.33600 0.61600
 [4,] 0.600 0.240 0.240 1.0000 0.3840 0.2400 0.60000 0.63040 0.29760
 [5,] 0.640 0.760 0.400 0.3840 1.0000 0.5440 0.23040 0.75360 0.72640
 [6,] 0.400 0.640 0.760 0.2400 0.5440 1.0000 0.14400 0.42240 0.81760
 [7,] 0.360 0.144 0.144 0.6000 0.2304 0.1440 1.00000 0.37824 0.17856
 [8,] 0.624 0.552 0.336 0.6304 0.7536 0.4224 0.37824 1.00000 0.55488
 [9,] 0.496 0.688 0.616 0.2976 0.7264 0.8176 0.17856 0.55488 1.00000
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalVar")
> ### * findFactorTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalVar
> ### Title: Find factor total variances from regression coefficient matrix,
> ###   factor (residual) correlations, and factor residual variances
> ### Aliases: findFactorTotalVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalVar(path, facCor, residualVar)
[1] 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findIndIntercept")
> ### * findIndIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndIntercept
> ### Title: Find indicator intercepts from factor loading matrix, total
> ###   factor mean, and indicator mean.
> ### Aliases: findIndIntercept
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> indMean <- rep(1, 6)
> findIndIntercept(loading, facMean, indMean)
[1] 0.70 0.65 0.60 0.88 0.86 0.84
> 
> 
> 
> cleanEx()
> nameEx("findIndMean")
> ### * findIndMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndMean
> ### Title: Find indicator total means from factor loading matrix, total
> ###   factor mean, and indicator intercept.
> ### Aliases: findIndMean
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> intcept <- rep(0, 6)
> findIndMean(loading, facMean, intcept)
[1] 0.30 0.35 0.40 0.12 0.14 0.16
> 
> 
> 
> cleanEx()
> nameEx("findIndResidualVar")
> ### * findIndResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndResidualVar
> ### Title: Find indicator residual variances from factor loading matrix,
> ###   total factor covariance, and total indicator variances.
> ### Aliases: findIndResidualVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> totalVar <- rep(1, 6)
> findIndResidualVar(loading, facCov, totalVar)
[1] 0.64 0.51 0.36 0.64 0.51 0.36
> 
> 
> 
> cleanEx()
> nameEx("findIndTotalVar")
> ### * findIndTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndTotalVar
> ### Title: Find indicator total variances from factor loading matrix, total
> ###   factor covariance, and indicator residual variances.
> ### Aliases: findIndTotalVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> resVar <- c(0.64, 0.51, 0.36, 0.64, 0.51, 0.36)
> findIndTotalVar(loading, facCov, resVar)
[1] 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findPossibleFactorCor")
> ### * findPossibleFactorCor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPossibleFactorCor
> ### Title: Find the appropriate position for freely estimated correlation
> ###   (or covariance) given a regression coefficient matrix
> ### Aliases: findPossibleFactorCor
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findPossibleFactorCor(path)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1   NA   NA    0    0    0    0    0    0
 [2,]   NA    1   NA    0    0    0    0    0    0
 [3,]   NA   NA    1    0    0    0    0    0    0
 [4,]    0    0    0    1   NA   NA    0    0    0
 [5,]    0    0    0   NA    1   NA    0    0    0
 [6,]    0    0    0   NA   NA    1    0    0    0
 [7,]    0    0    0    0    0    0    1   NA   NA
 [8,]    0    0    0    0    0    0   NA    1   NA
 [9,]    0    0    0    0    0    0   NA   NA    1
> 
> 
> 
> cleanEx()
> nameEx("findPower")
> ### * findPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPower
> ### Title: Find a value of independent variables that provides a given
> ###   value of power.
> ### Aliases: findPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- bind(loading, 0.4)
> ##D RPH <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- sim(NULL, model=CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D pow <- getPower(Output)
> ##D findPower(pow, "N", 0.80)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("findRecursiveSet")
> ### * findRecursiveSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRecursiveSet
> ### Title: Group variables regarding the position in mediation chain
> ### Aliases: findRecursiveSet
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findRecursiveSet(path)
[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

> 
> 
> 
> cleanEx()
> nameEx("findRowZero")
> ### * findRowZero
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRowZero
> ### Title: Find rows in a matrix that all elements are zero in non-fixed
> ###   subset rows and columns.
> ### Aliases: findRowZero
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findTargetPower")
> ### * findTargetPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findTargetPower
> ### Title: Find a value of varying parameters that provides a given value
> ###   of power.
> ### Aliases: findTargetPower
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findphist")
> ### * findphist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findphist
> ### Title: Find the density (likelihood) of a pair value in 2D Kernel
> ###   Density Estimate
> ### Aliases: findphist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("fitMeasuresChi")
> ### * fitMeasuresChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitMeasuresChi
> ### Title: Find fit indices from the discrepancy values of the target model
> ###   and null models.
> ### Aliases: fitMeasuresChi
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("generate")
> ### * generate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate
> ### Title: Generate data using SimSem template
> ### Aliases: generate
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> dat <- generate(CFA.Model,200)
> 
> 
> 
> cleanEx()
> nameEx("getCondQtile")
> ### * getCondQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCondQtile
> ### Title: Get a quantile of a variable given values of predictors
> ### Aliases: getCondQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("getCutoff")
> ### * getCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoff
> ### Title: Find fit indices cutoff given a priori alpha level
> ### Aliases: getCutoff getCutoff-methods getCutoff,data.frame-method
> ###   getCutoff,matrix-method getCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- bind(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- binds(error.cor)
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(5, n = 200, model=CFA.Model)
> ##D getCutoff(Output, 0.05)
> ##D 
> ##D # Finding the cutoff when the sample size is varied.
> ##D Output2 <- sim(NULL, model=CFA.Model, n=seq(50, 100, 10))
> ##D getCutoff(Output2, 0.05, nVal = 75)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNested")
> ### * getCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNested
> ### Title: Find fit indices cutoff for nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D 
> ##D error.cor.mis <- matrix("rnorm(1, 0, 0.1)", 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD <- binds(diag(6), misspec=error.cor.mis)
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL)
> ##D 
> ##D getCutoffNested(Output.NULL.NULL, Output.NULL.ALT)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNonNested")
> ### * getCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNonNested
> ### Title: Find fit indices cutoff for non-nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTD <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LX.A, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LX.B, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D getCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D getCutoffNonNested(Output.A.A, Output.A.B)
> ##D getCutoffNonNested(Output.B.B, Output.B.A)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getKeywords")
> ### * getKeywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getKeywords
> ### Title: List of all keywords used in the 'simsem' package
> ### Aliases: getKeywords
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # getKeywords()
> 
> 
> 
> cleanEx()
> nameEx("getPopulation")
> ### * getPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPopulation
> ### Title: Extract the data generation population model underlying an
> ###   object
> ### Aliases: getPopulation getPopulation-methods getPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("getPower")
> ### * getPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPower
> ### Title: Find power of model parameters
> ### Aliases: getPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- bind(loading, 0.7)
> ##D RPH <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- sim(NULL, model=CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D getPower(Output)
> ##D 
> ##D getPower(Output, nVal=c(100, 200), pmMCARval=c(0, 0.1, 0.2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFit")
> ### * getPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFit
> ### Title: Find power in rejecting alternative models based on fit indices
> ###   criteria
> ### Aliases: getPowerFit getPowerFit-methods
> ###   getPowerFit,data.frame,vector-method getPowerFit,matrix,vector-method
> ###   getPowerFit,SimResult,vector-method
> ###   getPowerFit,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- sim(5, n=500, model=CFA.Model.NULL)
> ##D Cut.NULL <- getCutoff(Output.NULL, 0.95)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D 
> ##D Output.ALT <- sim(5, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D getPowerFit(Output.ALT, cutoff=Cut.NULL)
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D getPowerFit(Output.ALT, cutoff=Rule.of.thumb, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D getPowerFit(Output.ALT2, nullObject=Output.NULL2, nVal=250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNested")
> ### * getPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNested
> ### Title: Find power in rejecting nested models based on the differences
> ###   in fit indices
> ### Aliases: getPowerFitNested getPowerFitNested-methods
> ###   getPowerFitNested,SimResult,SimResult,vector-method
> ###   getPowerFitNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D 
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10))
> ##D 
> ##D Output.NULL.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, nVal = 250)
> ##D getPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(Chi=3.84, CFI=-0.10), nVal = 250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNonNested")
> ### * getPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNonNested
> ### Title: Find power in rejecting non-nested models based on the
> ###   differences in fit indices
> ### Aliases: getPowerFitNonNested getPowerFitNonNested-methods
> ###   getPowerFitNonNested,SimResult,SimResult,vector-method
> ###   getPowerFitNonNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTD <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LX.A, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LX.B, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A) 
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A) 
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B) 
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B) 
> ##D 
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("imposeMissing")
> ### * imposeMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imposeMissing
> ### Title: Impose MAR, MCAR, planned missingness, or attrition on a data
> ###   set
> ### Aliases: imposeMissing
> 
> ### ** Examples
> 
>   data <- matrix(rep(rnorm(10,1,1),19),ncol=19)
>   datac <- cbind(data,rnorm(10,0,1),rnorm(10,5,5))
>  
>   # Imposing Missing with the following arguments produces no missing values
>   imposeMissing(data)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,cov=c(1,2))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMCAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,nforms=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
> 
>   #Some more usage examples
>   imposeMissing(data,cov=c(1,2),pmMCAR=.1)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316        NA 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247        NA 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291        NA 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814        NA 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   
>  
>   imposeMissing(data,nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA
 [8,]        NA        NA        NA        NA        NA
 [9,]        NA        NA        NA        NA        NA
[10,]        NA        NA        NA        NA        NA
>   imposeMissing(data,nforms=3,itemGroups=list(c(1,2,3,4,5),c(6,7,8,9,10),c(11,12,13,14,15),c(16,17,18,19)))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078 1.3295078        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,]        NA 2.5952808 2.5952808 2.5952808 2.5952808
 [5,]        NA 1.3295078 1.3295078 1.3295078 1.3295078
 [6,]        NA 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291        NA        NA        NA        NA
 [8,] 1.7383247        NA        NA        NA        NA
 [9,] 1.5757814        NA        NA        NA        NA
[10,] 0.6946116        NA        NA        NA        NA
>   imposeMissing(datac,cov=c(20,21),nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462  1.51178117  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078  1.12493092  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA -0.01619026  4.221022
 [8,]        NA        NA        NA        NA        NA  0.94383621 -2.353762
 [9,]        NA        NA        NA        NA        NA  0.82122120  2.609250
[10,]        NA        NA        NA        NA        NA  0.59390132  7.089708
>   imposeMissing(data,twoMethod=c(19,.8))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808        NA
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247        NA
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(datac,cov=21,prAttr=.1,timePoints=5)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA        NA        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462        NA        NA        NA        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA        NA        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,]        NA        NA        NA        NA        NA          NA  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,]        NA        NA        NA        NA        NA          NA  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA          NA  4.221022
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247  0.94383621 -2.353762
 [9,] 1.5757814 1.5757814        NA        NA        NA          NA  2.609250
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116  0.59390132  7.089708
> 
> 
> 
> 
> cleanEx()
> nameEx("interpolate")
> ### * interpolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolate
> ### Title: Find the value of one vector relative to a value of another
> ###   vector by interpolation
> ### Aliases: interpolate
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("likRatioFit")
> ### * likRatioFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: likRatioFit
> ### Title: Find the likelihood ratio (or Bayes factor) based on the
> ###   bivariate distribution of fit indices
> ### Aliases: likRatioFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # It does not work now.
> ##D 
> ##D #library(lavaan)
> ##D #loading <- matrix(0, 11, 3)
> ##D #loading[1:3, 1] <- NA
> ##D #loading[4:7, 2] <- NA
> ##D #loading[8:11, 3] <- NA
> ##D #path.A <- matrix(0, 3, 3)
> ##D #path.A[2:3, 1] <- NA
> ##D #path.A[3, 2] <- NA
> ##D #param.A <- model(LY=bind(loading), BE=bind(path.A), modelType="SEM")
> ##D 
> ##D #model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D #out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D #path.B <- matrix(0, 3, 3)
> ##D #path.B[1:2, 3] <- NA
> ##D #path.B[1, 2] <- NA
> ##D #param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D #model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D #out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D #u2 <- simUnif(-0.2, 0.2)
> ##D #loading.mis <- matrix(NA, 11, 3)
> ##D #loading.mis[is.na(loading)] <- 0
> ##D #LY.mis <- simMatrix(loading.mis, "u2")
> ##D #misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D #output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D #output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D #output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D #output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D #likRatioFit(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadingFromAlpha")
> ### * loadingFromAlpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadingFromAlpha
> ### Title: Find standardized factor loading from coefficient alpha
> ### Aliases: loadingFromAlpha
> 
> ### ** Examples
> 
>     loadingFromAlpha(0.8, 4)
[1] 0.7071068
> 
> 
> 
> cleanEx()
> nameEx("miss")
> ### * miss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miss
> ### Title: TBA
> ### Aliases: miss
> 
> ### ** Examples
> 
> #Example of imposing 10% MCAR missing in all variables with no imputations (FIML method)
> Missing <- miss(pmMCAR=0.1)
> summary(Missing)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates (will not impose any missing values): none 
Proportion of MCAR: 0.1 
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- bind(loading, 0.7)
> RPH <- binds(diag(1))
> RTD <- binds(diag(6))
> CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> 
> #Create data
> dat <- generate(CFA.Model, n = 20)
> 
> #Impose missing
> #dat <- run(Missing, dat)
> 
> #Analyze data
> #out <- run(SimModel, dat)
> #summary(out)
> 
> #Example to create simMissing object for 3 forms design at 3 timepoints with 10 imputations
> Missing <- miss(nforms=3, timePoints=3, numImps=10)
> 
> 
> 
> 
> cleanEx()
> nameEx("model")
> ### * model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model
> ### Title: Data generation template and analysis template for simulation.
> ### Aliases: model
> 
> ### ** Examples
> 
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> 
> 
> cleanEx()
> nameEx("multipleAllEqual")
> ### * multipleAllEqual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multipleAllEqual
> ### Title: Test whether all objects are equal
> ### Aliases: multipleAllEqual
> 
> ### ** Examples
> 
> multipleAllEqual(1:5, 1:5, seq(2, 10, 2)/2)
[1] TRUE
> multipleAllEqual(1:5, 1:6, seq(2, 10, 2)/2)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("overlapHist")
> ### * overlapHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlapHist
> ### Title: Plot overlapping histograms
> ### Aliases: overlapHist
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # a <- rnorm(10000, 0, 1)
> # b <- rnorm(10000, 1, 1.5)
> # overlapHist(a, b, main="Example")
> 
> 
> 
> cleanEx()
> nameEx("pValue")
> ### * pValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValue
> ### Title: Find p-values (1 - percentile)
> ### Aliases: pValue pValue-methods pValue,ANY-method
> ###   pValue,numeric,vector-method pValue,numeric,data.frame-method
> ###   pValue,lavaan,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ########## Make the pValue comparing between lavaan and SimResult work
> ##D 
> ##D 
> ##D 
> ##D 
> ##D # Compare number with a vector
> ##D pValue(0.5, rnorm(1000, 0, 1))
> ##D 
> ##D # Compare numbers with a data frame
> ##D pValue(c(0.5, 0.2), data.frame(rnorm(1000, 0, 1), runif(1000, 0, 1)))
> ##D 
> ##D # Compare an analysis result with a result of simulation study
> ##D #library(lavaan)
> ##D #loading <- matrix(0, 9, 3)
> ##D #loading[1:3, 1] <- NA
> ##D #loading[4:6, 2] <- NA
> ##D #loading[7:9, 3] <- NA
> ##D #model <- simParamCFA(LY=loading)
> ##D #SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> ##D #u2 <- simUnif(-0.2, 0.2)
> ##D #loading.trivial <- matrix(NA, 9, 3)
> ##D #loading.trivial[is.na(loading)] <- 0
> ##D #LY.trivial <- simMatrix(loading.trivial, "u2")
> ##D #mis <- simMisspecCFA(LY = LY.trivial)
> ##D #out <- run(SimModel, HolzingerSwineford1939)
> ##D #Output2 <- runFit(out, HolzingerSwineford1939, 20, mis)
> ##D #pValue(out, Output2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueCondCutoff")
> ### * pValueCondCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueCondCutoff
> ### Title: Find a p value when the target is conditional (valid) on a
> ###   specific value of a predictor
> ### Aliases: pValueCondCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("pValueNested")
> ### * pValueNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNested
> ### Title: Find p-values (1 - percentile) for a nested model comparison
> ### Aliases: pValueNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #library(lavaan)
> ##D 
> ##D #LY <- matrix(1, 4, 2)
> ##D #LY[,2] <- 0:3
> ##D #PS <- matrix(NA, 2, 2)
> ##D #TY <- rep(0, 4)
> ##D #AL <- rep(NA, 2)
> ##D #TE <- diag(NA, 4)
> ##D #linearModel <- simParamCFA(LY=LY, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D #LY2 <- matrix(1, 4, 2)
> ##D #LY2[,2] <- c(0, NA, NA, 3)
> ##D #unconstrainModel <- simParamCFA(LY=LY2, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D #nested <- simModel(linearModel, indLab=paste("t", 1:4, sep=""))
> ##D #parent <- simModel(unconstrainModel, indLab=paste("t", 1:4, sep=""))
> ##D 
> ##D #outNested <- run(nested, Demo.growth)
> ##D #outParent <- run(parent, Demo.growth)
> ##D 
> ##D #loadingMis <- matrix(0, 4, 2)
> ##D #loadingMis[2:3, 2] <- NA
> ##D #LYmis <- simMatrix(loadingMis, "runif(1, -0.1, 0.1)")
> ##D #linearMis <- simMisspecCFA(LY=LYmis)
> ##D 
> ##D #simNestedNested <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis)
> ##D #simNestedParent <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis, analyzeModel=parent)
> ##D 
> ##D #pValueNested(outNested, outParent, simNestedNested, simNestedParent)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueNonNested")
> ### * pValueNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNonNested
> ### Title: Find p-values (1 - percentile) for a non-nested model comparison
> ### Aliases: pValueNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #library(lavaan)
> ##D #loading <- matrix(0, 11, 3)
> ##D #loading[1:3, 1] <- NA
> ##D #loading[4:7, 2] <- NA
> ##D #loading[8:11, 3] <- NA
> ##D #path.A <- matrix(0, 3, 3)
> ##D #path.A[2:3, 1] <- NA
> ##D #path.A[3, 2] <- NA
> ##D #param.A <- simParamSEM(LY=loading, BE=path.A)
> ##D 
> ##D #model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D #out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D #path.B <- matrix(0, 3, 3)
> ##D #path.B[1:2, 3] <- NA
> ##D #path.B[1, 2] <- NA
> ##D #param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D #model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D #out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D #u2 <- simUnif(-0.2, 0.2)
> ##D #loading.mis <- matrix(NA, 11, 3)
> ##D #loading.mis[is.na(loading)] <- 0
> ##D #LY.mis <- simMatrix(loading.mis, "u2")
> ##D #misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D #output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D #output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D #output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D #output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D #pValueNonNested(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueVariedCutoff")
> ### * pValueVariedCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueVariedCutoff
> ### Title: Find a p value when the cutoff is specified as a vector given
> ###   the values of predictors
> ### Aliases: pValueVariedCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plot3DQtile")
> ### * plot3DQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot3DQtile
> ### Title: Build a persepctive plot or contour plot of a quantile of
> ###   predicted values
> ### Aliases: plot3DQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotCutoff")
> ### * plotCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoff
> ### Title: Plot sampling distributions of fit indices with fit indices
> ###   cutoffs
> ### Aliases: plotCutoff plotCutoff-methods plotCutoff,data.frame-method
> ###   plotCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- bind(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- binds(error.cor)
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(5, n=200, model=CFA.Model) 
> ##D plotCutoff(Output, 0.05, usedFit=c("RMSEA", "SRMR", "CFI", "TLI"))
> ##D 
> ##D # Varying N
> ##D Output2 <- sim(NULL, n=seq(450, 500, 10), model=CFA.Model)
> ##D plotCutoff(Output2, 0.05)
> ##D 
> ##D # Varying N and pmMCAR
> ##D Output3 <- sim(NULL, n=seq(450, 500, 10), pmMCAR=c(0, 0.05, 0.1, 0.15), model=CFA.Model)
> ##D plotCutoff(Output3, 0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNested")
> ### * plotCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between nested models with fit indices cutoffs
> ### Aliases: plotCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL)
> ##D 
> ##D plotCutoffNested(Output.NULL.NULL, Output.NULL.ALT, alpha=0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNonNested")
> ### * plotCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNonNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between non-nested models with fit indices cutoffs
> ### Aliases: plotCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTD <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LX.A, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LX.B, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, onetailed=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotDist")
> ### * plotDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotDist
> ### Title: Plot a distribution of a distribution object or data
> ###   distribution object
> ### Aliases: plotDist plotDist-methods
> 
> ### ** Examples
> 
> # Need Example
> 
> 
> 
> cleanEx()
> nameEx("plotIndividualScatter")
> ### * plotIndividualScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotIndividualScatter
> ### Title: Plot an overlaying scatter plot visualizing the power of
> ###   rejecting misspecified models
> ### Aliases: plotIndividualScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotLogisticFit")
> ### * plotLogisticFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotLogisticFit
> ### Title: Plot multiple logistic curves for predicting whether rejecting a
> ###   misspecified model
> ### Aliases: plotLogisticFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotMisfit")
> ### * plotMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMisfit
> ### Title: Plot the population misfit in parameter result object
> ### Aliases: plotMisfit
> 
> ### ** Examples
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "runif(1, 0.3, 0.5)"
> starting.BE[4, 3] <- "runif(1, 0.5, 0.7)"
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- "runif(1, -0.1, 0.1)"
> BE <- bind(path.BE, starting.BE, misspec=mis.path.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- binds(residual.error, "rnorm(1, 0.3, 0.1)")
> 
> ME <- bind(rep(NA, 4), 0)
> 
> Path.Model <- model(RPS = RPS, BE = BE, ME = ME, modelType="Path")
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- sim(20, n=500, Path.Model, misfitType="rmsea", paramOnly=TRUE)
Loading required package: parallel
> #plotMisfit(ParamObject)
> 
> #plotMisfit(ParamObject, misParam=1:2)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("plotOverHist")
> ### * plotOverHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotOverHist
> ### Title: Plot multiple overlapping histograms
> ### Aliases: plotOverHist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPower")
> ### * plotPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPower
> ### Title: Make a power plot of a parameter given varying parameters
> ### Aliases: plotPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- bind(loading, 0.4)
> ##D RPH <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- sim(NULL, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2), model=CFA.Model)
> ##D plotPower(Output, "1.LY1_1", contMCAR=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFit")
> ### * plotPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFit
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- sim(50, n=50, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, 0.5)
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D Output.ALT <- sim(50, n=50, model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D datNull <- generate(CFA.Model.NULL, n=50, params=TRUE)
> ##D datAlt <- generate(CFA.Model.ALT, n=50, params=TRUE)
> ##D outNull <- analyze(CFA.Model.NULL, datNull)
> ##D outAlt <- analyze(CFA.Model.NULL, datAlt)
> ##D summaryFit(Output.NULL)
> ##D summaryFit(Output.ALT)
> ##D  
> ##D plotPowerFit(Output.ALT, nullObject=Output.NULL, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D plotPowerFit(Output.ALT, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- sim(NULL, n=seq(50, 250, 25), model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.ALT2 <- sim(NULL, n=seq(50, 250, 25), model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D plotPowerFit(Output.ALT2, nullObject=Output.NULL2, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D plotPowerFit(Output.ALT2, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitDf")
> ### * plotPowerFitDf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitDf
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFitDf
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNested")
> ### * plotPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNested
> ### Title: Plot power of rejecting a nested model in a nested model
> ###   comparison by each fit index
> ### Aliases: plotPowerFitNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- bind(loading.null, 0.7)
> ##D RPH.NULL <- binds(diag(1))
> ##D RTD <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- binds(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- model(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD, modelType="CFA")
> ##D 
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, usedFit="CFI")
> ##D 
> ##D Output.NULL.NULL2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, logistic=FALSE)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(CFI=-0.1), logistic=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNonNested")
> ### * plotPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNonNested
> ### Title: Plot power of rejecting a non-nested model based on a difference
> ###   in fit index
> ### Aliases: plotPowerFitNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTD <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LX.A, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LX.B, RPS = RPH, RTE = RTD, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerSig")
> ### * plotPowerSig
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerSig
> ### Title: Plot multiple logistic curves given a significance result matrix
> ### Aliases: plotPowerSig
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotQtile")
> ### * plotQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotQtile
> ### Title: Build a scatterplot with overlaying line of quantiles of
> ###   predicted values
> ### Aliases: plotQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotScatter")
> ### * plotScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotScatter
> ### Title: Plot overlaying scatter plots visualizing the power of rejecting
> ###   misspecified models
> ### Aliases: plotScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("popDiscrepancy")
> ### * popDiscrepancy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popDiscrepancy
> ### Title: Find the discrepancy value between two means and covariance
> ###   matrices
> ### Aliases: popDiscrepancy
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popDiscrepancy(m1, S1, m2, S2)
         [,1]
[1,] 0.116864
> 
> 
> 
> cleanEx()
> nameEx("popMisfitMACS")
> ### * popMisfitMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfitMACS
> ### Title: Find population misfit by sufficient statistics
> ### Aliases: popMisfitMACS
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popMisfitMACS(m1, S1, m2, S2)
       f0      srmr 
0.1168640 0.0781736 
> 
> 
> 
> cleanEx()
> nameEx("predProb")
> ### * predProb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predProb
> ### Title: Function to get predicted probabilities from logistic regression
> ### Aliases: predProb
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("printIfNotNull")
> ### * printIfNotNull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printIfNotNull
> ### Title: Provide basic summary of each object if that object is not NULL.
> ### Aliases: printIfNotNull
> 
> ### ** Examples
> 
> # This function is not public
> 
> # AL <- simVector(rep(NA, 5), "0")
> # printIfNotNull(AL, "Factor mean")
> 
> 
> 
> cleanEx()
> nameEx("revText")
> ### * revText
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: revText
> ### Title: Reverse the proportion value by subtracting it from 1
> ### Aliases: revText
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # revText(.96)
> # revText("> .60")
> 
> 
> 
> cleanEx()
> nameEx("setPopulation")
> ### * setPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPopulation
> ### Title: Set the data generation population model underlying an object
> ### Aliases: setPopulation setPopulation-methods setPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("sim")
> ### * sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim
> ### Title: Run a monte carlo simulation with a structural equation model.
> ### Aliases: sim
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> Output <- sim(20, CFA.Model,n=200)
Loading required package: parallel
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean     SD
      Chi     15.047   16.798   19.514   20.125    9.454  4.268
      AIC   3185.654 3200.848 3209.517 3211.467 3125.114 44.893
      BIC   3248.322 3263.516 3272.185 3274.135 3187.782 44.893
      RMSEA    0.066    0.074    0.085    0.087    0.025  0.029
      CFI      0.973    0.972    0.962    0.960    0.992  0.012
      TLI      0.949    0.947    0.929    0.925    0.991  0.027
      SRMR     0.036    0.039    0.043    0.043    0.029  0.007
========= Parameter Estimates and Standard Errors ============
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
1.y1=~x1            0.682       0.094      0.074                1.00   0.691
1.y1=~x2            0.680       0.092      0.074                1.00   0.680
1.y1=~x3            0.704       0.069      0.075                1.00   0.705
1.y2=~x4            0.715       0.077      0.074                1.00   0.710
1.y2=~x5            0.711       0.090      0.072                1.00   0.721
1.y2=~x6            0.684       0.076      0.073                1.00   0.686
1.x1~~x1            0.501       0.069      0.076                1.00   0.520
1.x2~~x2            0.528       0.090      0.077                1.00   0.532
1.x3~~x3            0.496       0.061      0.078                1.00   0.500
1.x4~~x4            0.499       0.102      0.077                1.00   0.492
1.x5~~x5            0.458       0.058      0.074                1.00   0.478
1.x6~~x6            0.520       0.077      0.075                1.00   0.526
1.y2~~y1            0.487       0.095      0.079                1.00   0.487
1.x1~1              0.010       0.068      0.070                0.00   0.009
1.x2~1              0.027       0.070      0.071                0.00   0.026
1.x3~1              0.019       0.102      0.071                0.15   0.019
1.x4~1              0.035       0.076      0.071                0.10   0.033
1.x5~1              0.025       0.064      0.070                0.05   0.025
1.x6~1              0.041       0.069      0.070                0.05   0.041
         Std.Est.SD Average.Param Average.Bias Coverage
1.y1=~x1      0.056          0.70       -0.018     0.90
1.y1=~x2      0.072          0.70       -0.020     0.90
1.y1=~x3      0.053          0.70        0.004     0.95
1.y2=~x4      0.063          0.70        0.015     0.90
1.y2=~x5      0.051          0.70        0.011     0.90
1.y2=~x6      0.060          0.70       -0.016     0.95
1.x1~~x1      0.078          0.51       -0.009     0.95
1.x2~~x2      0.097          0.51        0.018     0.95
1.x3~~x3      0.073          0.51       -0.014     1.00
1.x4~~x4      0.091          0.51       -0.011     0.90
1.x5~~x5      0.075          0.51       -0.052     0.95
1.x6~~x6      0.081          0.51        0.010     1.00
1.y2~~y1      0.095          0.50       -0.013     0.95
1.x1~1        0.067          0.00        0.010     1.00
1.x2~1        0.071          0.00        0.027     1.00
1.x3~1        0.101          0.00        0.019     0.85
1.x4~1        0.074          0.00        0.035     0.90
1.x5~1        0.066          0.00        0.025     0.95
1.x6~1        0.070          0.00        0.041     0.95
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000  0.206  0.206  0.959 -0.951 -0.993  0.841
AIC    0.206  1.000  1.000  0.215 -0.184 -0.211  0.192
BIC    0.206  1.000  1.000  0.215 -0.184 -0.211  0.192
RMSEA  0.959  0.215  0.215  1.000 -0.946 -0.958  0.776
CFI   -0.951 -0.184 -0.184 -0.946  1.000  0.962 -0.742
TLI   -0.993 -0.211 -0.211 -0.958  0.962  1.000 -0.846
SRMR   0.841  0.192  0.192  0.776 -0.742 -0.846  1.000
================== Replications =====================
Number of Replications
[1] 20
Number of Converged Replications
[1] 20
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("simFunction")
> ### * simFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simFunction
> ### Title: Create function object
> ### Aliases: simFunction
> 
> ### ** Examples
> 
> # The example still does not work
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading.start <- matrix("", 9, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:9, 3] <- "runif(1, 0.6, 0.8)"
> 
> loading.trivial <- matrix("runif(1, -0.2, 0.2)", 9, 3)
> loading.trivial[is.na(loading)] <- 0
> 
> LY <- bind(loading, loading.start, misspec=loading.trivial)
> 
> error.cor.trivial <- matrix("rnorm(1, 0, 0.1)", 9, 9)
> diag(error.cor.trivial) <- 0
> 
> RTE <- binds(diag(9), misspec=error.cor.trivial)
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- binds(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "rnorm(1, 0.6, 0.05)"
> path.start[3, 2] <- "runif(1, 0.3, 0.5)"
> BE <- bind(path, path.start)
> 
> datGen <- model(BE=BE, LY=LY, RPS=RPS, RTE=RTE, modelType="SEM")
> 
> #loading <- matrix(0, 12, 4)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loading[7:9, 4] <- NA
> #loading[10:12, 3] <- NA
> 
> #path <- matrix(0, 4, 4)
> #path[4, 1:3] <- NA
> 
> #analysis <- simParamSEM(BE=path, LY=loading)
> 
> #Model <- simModel(analysis)
> 
> # Find the products of indicators
> #newFUN <- function(data, var1, var2, namesProd) {
> #	prod <- data[,var1] * data[,var2]
> #	colnames(prod) <- namesProd
> #	return(data.frame(data, prod))
> #}
> 
> #fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> #Output <- simResult(10, Data.Mis, Model, objFunction=fun)
> #summary(Output)
> 
> 
> 
> cleanEx()
> nameEx("sortList")
> ### * sortList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sortList
> ### Title: Sort two objects in a list
> ### Aliases: sortList
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("summaryFit")
> ### * summaryFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryFit
> ### Title: Provide summary of model fit across replications
> ### Aliases: summaryFit summaryFit-methods summaryFit,ANY-method
> ###   summaryFit,SimResult-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- bind(loading, 0.7)
> RPH <- binds(diag(1))
> RTD <- binds(diag(6))
> CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> summaryFit(Output)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.712285e+01 1.731436e+01 1.746756e+01 1.750203e+01 1.161908e+01
      AIC   7.506931e+03 7.510452e+03 7.513269e+03 7.513903e+03 7.448091e+03
      BIC   7.582794e+03 7.586315e+03 7.589132e+03 7.589766e+03 7.523954e+03
      RMSEA 4.246827e-02 4.297230e-02 4.337552e-02 4.346625e-02 2.233445e-02
      CFI   9.919334e-01 9.915622e-01 9.912652e-01 9.911984e-01 9.962455e-01
      TLI   9.865557e-01 9.859370e-01 9.854420e-01 9.853307e-01 9.957462e-01
      SRMR  1.872347e-02 1.886139e-02 1.897171e-02 1.899654e-02 1.474084e-02
           Alpha
Fit Indices           SD
      Chi    5.626151104
      AIC   69.164702758
      BIC   69.164702758
      RMSEA  0.021304138
      CFI    0.004016351
      TLI    0.009177143
      SRMR   0.004065562
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryMisspec")
> ### * summaryMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryMisspec
> ### Title: Provide summary of model misspecification imposed across
> ###   replications
> ### Aliases: summaryMisspec summaryMisspec-methods
> ###   summaryMisspec,ANY-method
> 
> ### ** Examples
> 
> # Incomplete
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "runif(1, 0.3, 0.5)"
> starting.BE[4, 3] <- "runif(1, 0.5, 0.7)"
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- "runif(1, -0.1, 0.1)"
> BE <- bind(path.BE, starting.BE, misspec=mis.path.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- binds(residual.error, "rnorm(1, 0.3, 0.1)")
> 
> ME <- bind(rep(NA, 4), 0)
> 
> Path.Model <- model(RPS = RPS, BE = BE, ME = ME, modelType="Path")
> 
> 
> # The number of replications in actual analysis should be much more than 5
> # ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> 
> # summaryMisspec(ParamObject)
> 
> 
> 
> cleanEx()
> nameEx("summaryParam")
> ### * summaryParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryParam
> ### Title: Provide summary of parameter estimates and standard error across
> ###   replications
> ### Aliases: summaryParam summaryParam-methods summaryParam,ANY-method
> ###   summaryParam,SimResult-method
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                                       
Name:      pmMCAR      pmMAR     timing
Class:     vector     vector       list
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- bind(loading, 0.7)
> RPH <- binds(diag(1))
> RTD <- binds(diag(6))
> CFA.Model <- model(LY = LX, RPS = RPH, RTE = RTD, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> summaryParam(Output)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.y1=~x1      0.690756156  0.02810822 0.04149426                   1
1.y1=~x2      0.684804691  0.02263627 0.04211500                   1
1.y1=~x3      0.696132921  0.01555991 0.04135121                   1
1.y1=~x4      0.665635591  0.05563827 0.04117407                   1
1.y1=~x5      0.695344582  0.03075850 0.04160583                   1
1.y1=~x6      0.726805534  0.04988723 0.04168946                   1
1.x1~~x1      0.504025133  0.01390457 0.03830915                   1
1.x2~~x2      0.530959200  0.03432317 0.03978899                   1
1.x3~~x3      0.495700421  0.04352861 0.03793284                   1
1.x4~~x4      0.509197688  0.03774779 0.03808872                   1
1.x5~~x5      0.505610318  0.05558941 0.03852026                   1
1.x6~~x6      0.484795772  0.02083428 0.03801104                   1
1.x1~1        0.018166046  0.02869040 0.04430370                   0
1.x2~1        0.004590887  0.04278074 0.04471879                   0
1.x3~1        0.020747715  0.01949681 0.04427270                   0
1.x4~1        0.013662157  0.03941881 0.04367342                   0
1.x5~1        0.006917330  0.03267557 0.04446808                   0
1.x6~1        0.013019004  0.02085169 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.y1=~x1 0.697070143 0.01422193          0.70 -0.0092438439      1.0
1.y1=~x2 0.684851022 0.01632425          0.70 -0.0151953087      1.0
1.y1=~x3 0.703397021 0.01804013          0.70 -0.0038670795      1.0
1.y1=~x4 0.680861392 0.03863723          0.70 -0.0343644092      0.8
1.y1=~x5 0.699459950 0.02232976          0.70 -0.0046554178      1.0
1.y1=~x6 0.721071722 0.02764561          0.70  0.0268055340      0.8
1.x1~~x1 0.513931405 0.01991776          0.51 -0.0059748670      1.0
1.x2~~x2 0.530765893 0.02240770          0.51  0.0209592001      1.0
1.x3~~x3 0.504972274 0.02529073          0.51 -0.0142995790      1.0
1.x4~~x4 0.535233496 0.05128518          0.51 -0.0008023119      1.0
1.x5~~x5 0.510356884 0.03111063          0.51 -0.0043896822      1.0
1.x6~~x6 0.479444147 0.03996509          0.51 -0.0252042285      1.0
1.x1~1   0.018417709 0.02909937          0.00  0.0181660459      1.0
1.x2~1   0.004545703 0.04208763          0.00  0.0045908869      1.0
1.x3~1   0.021140079 0.02002116          0.00  0.0207477151      1.0
1.x4~1   0.014854838 0.04097594          0.00  0.0136621570      1.0
1.x5~1   0.007233804 0.03314310          0.00  0.0069173300      1.0
1.x6~1   0.013257560 0.02080362          0.00  0.0130190044      1.0
> summaryParam(Output, detail=TRUE)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.y1=~x1      0.690756156  0.02810822 0.04149426                   1
1.y1=~x2      0.684804691  0.02263627 0.04211500                   1
1.y1=~x3      0.696132921  0.01555991 0.04135121                   1
1.y1=~x4      0.665635591  0.05563827 0.04117407                   1
1.y1=~x5      0.695344582  0.03075850 0.04160583                   1
1.y1=~x6      0.726805534  0.04988723 0.04168946                   1
1.x1~~x1      0.504025133  0.01390457 0.03830915                   1
1.x2~~x2      0.530959200  0.03432317 0.03978899                   1
1.x3~~x3      0.495700421  0.04352861 0.03793284                   1
1.x4~~x4      0.509197688  0.03774779 0.03808872                   1
1.x5~~x5      0.505610318  0.05558941 0.03852026                   1
1.x6~~x6      0.484795772  0.02083428 0.03801104                   1
1.x1~1        0.018166046  0.02869040 0.04430370                   0
1.x2~1        0.004590887  0.04278074 0.04471879                   0
1.x3~1        0.020747715  0.01949681 0.04427270                   0
1.x4~1        0.013662157  0.03941881 0.04367342                   0
1.x5~1        0.006917330  0.03267557 0.04446808                   0
1.x6~1        0.013019004  0.02085169 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.y1=~x1 0.697070143 0.01422193          0.70 -0.0092438439      1.0
1.y1=~x2 0.684851022 0.01632425          0.70 -0.0151953087      1.0
1.y1=~x3 0.703397021 0.01804013          0.70 -0.0038670795      1.0
1.y1=~x4 0.680861392 0.03863723          0.70 -0.0343644092      0.8
1.y1=~x5 0.699459950 0.02232976          0.70 -0.0046554178      1.0
1.y1=~x6 0.721071722 0.02764561          0.70  0.0268055340      0.8
1.x1~~x1 0.513931405 0.01991776          0.51 -0.0059748670      1.0
1.x2~~x2 0.530765893 0.02240770          0.51  0.0209592001      1.0
1.x3~~x3 0.504972274 0.02529073          0.51 -0.0142995790      1.0
1.x4~~x4 0.535233496 0.05128518          0.51 -0.0008023119      1.0
1.x5~~x5 0.510356884 0.03111063          0.51 -0.0043896822      1.0
1.x6~~x6 0.479444147 0.03996509          0.51 -0.0252042285      1.0
1.x1~1   0.018417709 0.02909937          0.00  0.0181660459      1.0
1.x2~1   0.004545703 0.04208763          0.00  0.0045908869      1.0
1.x3~1   0.021140079 0.02002116          0.00  0.0207477151      1.0
1.x4~1   0.014854838 0.04097594          0.00  0.0136621570      1.0
1.x5~1   0.007233804 0.03314310          0.00  0.0069173300      1.0
1.x6~1   0.013257560 0.02080362          0.00  0.0130190044      1.0
             Rel.Bias    Std.Bias  Rel.SE.Bias
1.y1=~x1 -0.013205491 -0.32886624  0.476232426
1.y1=~x2 -0.021707584 -0.67128160  0.860509969
1.y1=~x3 -0.005524399 -0.24852841  1.657548540
1.y1=~x4 -0.049092013 -0.61763981 -0.259968483
1.y1=~x5 -0.006650597 -0.15135388  0.352661183
1.y1=~x6  0.038293620  0.53732251 -0.164326099
1.x1~~x1 -0.011715425 -0.42970516  1.755147759
1.x2~~x2  0.041096471  0.61064289  0.159245888
1.x3~~x3 -0.028038390 -0.32850991 -0.128553689
1.x4~~x4 -0.001573161 -0.02125454  0.009032014
1.x5~~x5 -0.008607220 -0.07896616 -0.307057631
1.x6~~x6 -0.049420056 -1.20974817  0.824447343
1.x1~1             NA  0.63317496  0.544199150
1.x2~1             NA  0.10731201  0.045302013
1.x3~1            Inf  1.06415922  1.270765561
1.x4~1             NA  0.34658981  0.107933667
1.x5~1             NA  0.21169729  0.360896634
1.x6~1             NA  0.62436194  1.159867416
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryPopulation")
> ### * summaryPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryPopulation
> ### Title: Summarize the data generation population model underlying an
> ###   object
> ### Aliases: summaryPopulation summaryPopulation-methods
> ###   summaryPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("summaryShort")
> ### * summaryShort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryShort
> ### Title: Provide short summary of an object.
> ### Aliases: summaryShort summaryShort-methods summaryShort,ANY-method
> ###   summaryShort,vector-method summaryShort,matrix-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> LX <- bind(loading, "runif(1, 0.8, 0.9)")
> summaryShort(LX)
     [,1]                    [,2]                   
[1,] "NA:runif(1, 0.8, 0.9)" "0"                    
[2,] "NA:runif(1, 0.8, 0.9)" "0"                    
[3,] "NA:runif(1, 0.8, 0.9)" "0"                    
[4,] "0"                     "NA:runif(1, 0.8, 0.9)"
[5,] "0"                     "NA:runif(1, 0.8, 0.9)"
[6,] "0"                     "NA:runif(1, 0.8, 0.9)"
> 
> 
> 
> cleanEx()
> nameEx("twoTailedPValue")
> ### * twoTailedPValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twoTailedPValue
> ### Title: Find two-tailed _p_ value from one-tailed _p_ value
> ### Aliases: twoTailedPValue
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateCovariance")
> ### * validateCovariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateCovariance
> ### Title: Validate whether all elements provides a good covariance matrix
> ### Aliases: validateCovariance
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateObject")
> ### * validateObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateObject
> ### Title: Validate whether the drawn parameters are good.
> ### Aliases: validateObject
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validatePath")
> ### * validatePath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validatePath
> ### Title: Validate whether the regression coefficient (or loading) matrix
> ###   is good
> ### Aliases: validatePath
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("whichMonotonic")
> ### * whichMonotonic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: whichMonotonic
> ### Title: Extract a part of a vector that is monotonically increasing or
> ###   decreasing
> ### Aliases: whichMonotonic
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # whichMonotonic(c(3, 4, 1, 2, 3, 5, 2, 1))
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.94 0.04 5.99 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
