
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simsem"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('simsem')
Loading required package: lavaan
This is lavaan 0.4-14
lavaan is BETA software! Please report any bugs.
Loading required package: MASS
 
###############################################################################################
This is simsem 0.2-8
simsem is BETA software! Please report any bugs.
simsem was developed at the University of Kansas Center for Research Methods and Data Analysis.
###############################################################################################
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MatrixSet-class")
> ### * MatrixSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatrixSet-class
> ### Title: Class '"MatrixSet"'
> ### Aliases: MatrixSet-class MisspecSet-class summary,MatrixSet-method
> ###   summary,MisspecSet-method
> 
> ### ** Examples
> 
> showClass("SimSet")
Class "SimSet" [package "simsem"]

Slots:
                                                                            
Name:  modelType        LY        TE       RTE       VTE        PS       RPS
Class: character SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPS        BE        TY        AL        ME        MY        VE
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimVector
                                                                            
Name:         VY        LX        TD       RTD       VTD        PH       RPH
Class: SimVector SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPH        GA        TX        KA        MX        VX        TH
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimMatrix
                
Name:        RTH
Class: SimMatrix

Known Subclasses: 
Class "NullSimSet", directly
Class "SimMisspec", directly
Class "NullSimMisspec", by class "SimMisspec", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> MatrixSet <- run(CFA.Model)
> summary(MatrixSet)
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

VTE: Variance of Measurement.Error.EPSILON 
[1] 0.51 0.51 0.51 0.51 0.51 0.51

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    0    0    0    0    0
[2,]    0    1    0    0    0    0
[3,]    0    0    1    0    0    0
[4,]    0    0    0    1    0    0
[5,]    0    0    0    0    1    0
[6,]    0    0    0    0    0    1

VY: Variance of Indicator.Y 
[1] 1 1 1 1 1 1

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

MY: mean of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2]
[1,]  1.0  0.5
[2,]  0.5  1.0

VPS: Variance of Regression.Residual.PSI 
[1] 1 1

RPS: Correlation of Regression.Residual.PSI 
     [,1] [,2]
[1,]  1.0  0.5
[2,]  0.5  1.0

VE: Variance of Factor.ETA 
[1] 1 1

AL: Regression Intercept of Factor.ETA 
[1] 0 0

ME: mean of Factor.ETA 
[1] 0 0
------------------------------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("Null-class")
> ### * Null-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Nullclass
> ### Title: Null Objects
> ### Aliases: NullDataFrame-class NullVector-class NullMatrix-class
> ###   NullSimMatrix-class NullSymMatrix-class NullSimVector-class
> ###   NullSimSet-class NullSimEqualCon-class NullSimREqualCon-class
> ###   NullRSet-class NullSimMisspec-class NullSimDataDist-class
> ###   NullSimMissing-class NullSimFunction-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimData-class")
> ### * SimData-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimData-class
> ### Title: Class '"SimData"'
> ### Aliases: SimData-class run,SimData-method summary,SimData-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimData")
Class "SimData" [package "simsem"]

Slots:
                                                                              
Name:    modelType           n       param     misspec    equalCon     maxDraw
Class:   character     numeric      SimSet  SimMisspec SimEqualCon     numeric
                                                                              
Name:   sequential     facDist   errorDist     indDist      indLab   modelBoot
Class:     logical SimDataDist SimDataDist SimDataDist      vector     logical
                  
Name:     realData
Class:  data.frame
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 200)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "No"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
               y1          y2           y3           y4           y5
1   -0.8045405678 -1.07615375  0.057008974 -0.902462922 -0.420303205
2    0.1846928903 -1.52519893 -0.596848908 -0.360271862  0.655075424
3   -0.9818489653 -1.00020156 -1.872460732  0.547424678  0.455643551
4    1.5595324860  0.98242927  1.129591494  1.133175506  0.771936669
5    1.1845695532  1.29080775  1.312506730 -0.614798923 -1.246842377
6   -2.4256570718 -0.52391592 -2.119384992  0.801634881  0.447980202
7   -0.8026409861 -0.01211317  0.886817943  0.874982013  0.264254397
8    0.0563541774  1.26607638 -0.572218116  0.960753031  1.193425123
9    1.4677564715  0.51392041 -0.801413687 -0.485506296  1.285396956
10  -0.2799641994 -0.93132978 -0.102089434  0.318816637 -1.065786453
11   1.1792430190  1.32162096  0.774606605  1.177173143  0.997041766
12   0.2512034453  0.06410751 -0.103496897  0.112998515  1.030275697
13  -0.5563709849  0.67445625 -0.824812638 -1.216554530  0.178167961
14  -1.7843904375  0.36259070 -1.175083029 -1.812722455 -3.445337824
15   1.8844962672 -0.52205666 -0.442225197  1.403045471  0.909652448
16  -0.9452810102 -0.62387834 -0.598349054  0.507410773  1.772555524
17  -0.0831099570  0.47046975  0.001881615 -0.684020271  0.600954470
18   0.0667599058  2.43207667  1.118568015  0.128168047 -0.759673520
19   0.0624300206  0.98647272 -0.269307069  1.547295847 -0.375973318
20   0.3418543450 -0.62490267  1.542665030 -0.535117264  1.106608185
21   1.1985632899  1.64210058  1.382428213 -1.009453441  0.262620519
22  -0.4294336414  0.51578927  1.489116211  1.073752569  0.686141945
23   1.4200746408 -0.52870595  0.120453095 -0.224536426 -0.155962968
24  -0.0705158002 -2.01187265 -1.466254278 -0.516334770 -2.101005185
25   1.3465994213  0.60673251  0.878034808 -0.444133582  0.161716811
26  -1.6017729664  0.05337596 -1.028983927 -0.120399156  1.479385138
27   0.4261412395  0.47207405 -0.760103948  0.564006789 -1.367508121
28  -0.2861057055 -0.70022762  0.212329374 -1.088102173 -0.935558478
29  -0.6774881190  0.42716566 -0.984082865  0.031142318 -1.051034032
30   0.9965878126 -0.44682030 -0.065989857  0.757599491  0.133966644
31   0.6690459148  1.98420225  1.435822722  1.633619512 -0.474452981
32   0.9584993506  1.49351309  1.288455423 -1.539705118 -0.355642036
33   0.1559852255  1.10912317  0.392489723  0.935602005 -0.058764218
34  -0.3086738117 -0.15275306 -0.426789831  0.194940236 -0.036323861
35  -1.7789568229 -0.98729507  0.068901395 -1.217656769 -0.696235716
36  -0.5865292974 -0.35461815  0.237837966 -0.099006066  0.126147956
37  -0.0900499230 -0.68642407 -0.785618330 -0.397217992  1.353802246
38   0.8217290574 -0.08617487  0.766121687 -0.546177050 -0.488701706
39  -0.2473621503 -0.33824834  1.306692499  1.598719049  0.448719261
40   0.7983910651  0.42456011  0.324473731  0.051228612  0.280284611
41  -1.7603689925 -0.17502680  0.636793969  0.686794776  0.965569964
42  -0.9235552750 -0.61617026 -0.384744863 -0.851671459 -0.058583975
43   0.8035345795  0.56088663 -0.263319249  0.754475137  2.033251767
44   0.3159403170  1.43200531  0.576236087 -0.529733049  0.192023403
45  -0.9343279406 -1.97436664 -0.070511142 -0.052742647 -0.164001262
46  -0.3556720991  0.37385555  1.287415951  0.427171005 -2.407145230
47   1.0826342292 -0.14211513  0.539715172  0.835172718 -0.077930462
48  -0.4128817647  0.99913523  1.314070137  0.728565750  0.382448273
49  -0.2157477195 -0.08399579  0.300039152 -0.405477056 -1.002169861
50   0.0619598370  0.10797140  0.213652275  2.446380196  0.397848746
51   0.2265662511  0.14138723  0.249285474 -0.196041332  0.872641544
52  -1.0308668478 -0.53998194 -0.220668169  0.198722579 -0.142478281
53   1.2684252196  0.39667291 -0.881515883  0.486765092 -0.492598325
54  -1.3671094745 -1.43683369  0.863288621 -0.054377978 -2.633850400
55   0.8681587718  0.18662850  0.886601631  2.102684710  0.585945042
56  -0.9306844795  1.71026113  1.650561104  1.847472340  1.439959863
57   0.8775331332  0.24194873  1.423436446 -1.670377316 -1.577584671
58  -0.6623350406 -0.70034460 -1.527115423  0.678702769 -1.585447109
59  -0.3114747365 -0.39640737  1.345515884  1.168227022 -0.064305301
60   0.4693003554  0.14868310 -0.309373532 -0.644550315 -0.222430918
61   1.2892242893  2.28783246 -0.030108233  2.319081697  2.371326500
62   0.7473376784 -0.86750928  0.572901489 -1.397225560  0.947577450
63   0.1075219190  0.23528599  1.437672545 -0.395683617  0.343749379
64  -0.9973491594  0.28584536 -0.403692843  0.063307132  0.507613256
65  -2.3728066858 -0.12220489 -1.354928719  0.340955897  0.515665189
66  -0.2500954183  0.98076769 -0.718728765  0.167447035  1.083731310
67  -1.7929149185 -0.54390514 -0.728723259 -0.963357244 -1.668881689
68   1.7769347604  2.40088430  0.404735210 -0.086789607 -0.039117880
69   0.2179779459  0.64516450 -0.101492435 -0.901905282  0.614526647
70   3.1339534228  1.26386491  1.270944654  0.330862280  1.352746038
71  -0.1259520428  0.19267403  1.246725188  0.845079971  0.699984832
72   0.0405485247 -0.52290120 -1.489294968  0.610526395 -0.661020996
73   0.4754008366  1.02404482  0.897144876  0.058166975 -0.300577340
74  -2.6895868084 -1.59264220 -1.223079580  0.344187484  0.512318372
75  -0.5459615881 -1.94432565 -0.252799729 -1.579852478 -0.616204573
76  -1.1562860290  0.53758634 -0.337650835  1.517225228  0.379865088
77   0.0461554357  1.83816492  0.349334111 -1.529994006 -1.058638868
78  -0.8395362886  0.77015046 -0.941009799  0.261897908  0.930996729
79   0.7735181418  0.28267314  0.892567365 -1.215600937 -0.010304868
80  -1.4055208647 -0.52048203 -0.520647633  0.044516709 -0.157260934
81   0.0877875454 -1.18856748 -0.590889118 -0.082663679 -0.797156263
82  -0.5602149639  0.44049776  0.403835171  0.466589138 -0.377065078
83   0.3477175853 -0.06490563  0.284933429  1.689456383  1.168282918
84  -0.5967279049 -0.86522915 -0.654388508 -1.123550593 -1.395703886
85   0.0067799214  0.84708257  1.138194028 -1.112129607  1.463993425
86   0.3721907535  1.01516030  0.652587552 -1.520379797  1.463838250
87   0.6847116122  0.56301423  1.810765506  0.481769335 -0.151947621
88  -0.0312676297 -0.72967448 -1.144571021  0.905538519  0.648209062
89   1.0223588579 -0.62933490 -0.238992060  1.486648564 -0.672133513
90  -0.8816612780 -0.12459415  0.171656989  0.394706171  0.930677659
91   0.4776656414 -1.35812046  0.318748265  0.100394651 -0.901169766
92   0.5619667249  0.28464579  1.076582903 -0.342022673  1.617624464
93  -0.4304015712  1.27001996  1.168457444  1.558340293  1.243160740
94   0.6634143823  1.34224632  1.356474398 -0.264195189 -0.447691467
95   0.4262455962  0.15540357  0.190310662 -0.295421796  3.519532872
96   0.3247077982  1.38678797 -0.768177285  1.039855697  0.143230420
97  -2.5688579778 -1.45764532  0.404043730 -0.647108311 -0.921581685
98  -0.3711483431 -1.57481049 -0.516172155  0.770821178  0.179842312
99  -0.5181913491 -0.46087164 -1.423157350 -1.225169114 -1.659354417
100 -0.3241931735 -0.27499555  0.061762260  0.026207235 -1.025488759
101 -1.2608123820 -0.70465244 -0.507725421 -0.134951402 -0.713208467
102  1.6045847696  0.60919145 -0.697583513 -0.344886746 -0.403963584
103 -1.4485685714 -2.27845518 -0.805216609  1.013183871 -0.074574886
104  0.2339305241  0.46845124  0.140785418 -0.155752781 -0.573181480
105 -1.8487178826 -1.05105968 -0.681699931 -0.175699031  0.950311805
106 -0.3282497066  0.65716891  1.171006577  0.934752511  1.930606581
107 -0.4343939862  1.31928628  0.448076578  1.392597949  0.391587472
108  0.0674125565  1.01929513 -0.025080675  1.028205339  0.944496848
109  1.4957467584  0.37478111  0.304887067 -0.873472484  0.533807642
110  2.0396040925  0.30108835  0.612602853  1.809915796  0.430701475
111  0.0836251337 -1.31710167 -1.475631644  1.465978243 -0.789000308
112  0.4471490248 -1.01867806 -0.495487362  0.212428221 -0.837182507
113  1.0422762097  1.12828005  1.340459378  1.226758030 -0.279993309
114 -0.8191229322 -0.13248823  0.534646102 -0.705367653 -0.677337795
115 -0.3305742687  0.61397339 -0.652812183  0.189087390  0.593848304
116 -2.1377059370 -0.48465132  0.368575054  0.132528125 -0.035314889
117 -0.2090894150  0.51027631 -0.285563244 -0.207521468 -0.639311014
118  0.8119503946 -0.33094260 -0.878902424 -0.472169073  0.233768693
119  1.0037904106  0.94540176  0.816627915 -0.048920330 -0.362574437
120  0.2201993071  0.15363391 -1.407204502 -0.508200123  1.504739911
121 -0.6192998951 -1.03481872 -1.154258093  0.715174505  0.347166193
122 -0.2059414972  0.53231605  0.338132464  1.596363103  2.785334795
123  0.4925457037 -0.57747645 -1.461444127  0.694848527  0.118499613
124  0.6252206657  1.09499760  0.472616815 -1.177192123 -1.401456154
125 -0.7788719599 -0.72244028  0.640398289  0.259634607  0.270596332
126  0.2753483074  0.97121188 -0.431707474  1.574931372 -0.270360531
127 -0.7992852453  0.64738850  0.486385041 -0.151085350 -0.722390099
128  0.2360446187  0.98780741 -1.532784374 -0.708819152  0.493995339
129  0.1946726104  0.11794660 -0.507478459 -1.207877217 -0.147378071
130 -0.7543560973 -0.19358829 -0.634660190  0.036005974  0.323987148
131  0.0364199431 -0.53394647  1.065937731  0.676364897 -0.219239440
132  0.8016260454  0.54404162 -0.389829562 -1.768305517 -0.230229594
133 -0.1410602527  1.25318139  0.462606717  0.153329550  0.176545122
134 -2.3269769264 -0.54785558 -2.053942030 -0.294801011 -1.610932747
135  0.5857480462  0.11162428  0.378092033 -0.850793701  0.988828103
136 -1.4985027092 -1.96261898 -0.640851643 -0.072579774 -0.014489374
137 -0.1646307300 -0.23488959 -1.501433465  0.009095024  0.420191131
138 -0.5618487081 -0.02751099 -0.482743297 -1.187932677 -0.517261379
139  0.4574846794 -1.27755036 -0.014418680 -0.990067363 -0.621959638
140  0.4427581879  0.48773647 -0.321451474 -0.193359071 -0.787832290
141 -2.8811023589 -1.42864914 -0.564206074 -0.628869108 -1.153407685
142  0.5270371745  1.36502363  1.935619345  0.197721738  0.723895619
143 -0.5481022617 -0.90491534 -2.243432508 -1.306192600 -0.361475697
144  0.2865956512 -1.00185782  0.175457323 -0.441685344 -0.383632346
145 -0.2988841089  0.13693426  1.005093026 -2.565371307 -1.796977620
146 -0.6471168107  0.68646757  0.370749527 -1.016599170 -0.771521601
147  1.5920708177  1.14827500  0.219847298  2.271895307  2.249293223
148 -0.3537815508  0.39353090  0.256750895 -0.209955942  1.175782254
149 -0.0951342086 -2.06625826 -1.532156850  0.693221919 -1.530572183
150 -0.9645588686 -2.12716027 -2.798450984 -0.503440256  0.143875513
151 -1.2920054024  0.91615740 -0.729809290  0.787663374  1.787693060
152 -0.8148269475 -0.03079735 -0.117361701  0.443020711  0.168357382
153 -1.0294529925 -0.50403937  0.372372788  0.693288619 -0.225272356
154 -0.1924206082 -0.09913424 -1.320466904 -0.509336732 -0.694754938
155 -2.5265702502 -1.27944370 -1.352037582 -1.148718189  0.204044661
156 -2.2110491362  0.14570621 -0.919234698  0.036490939 -0.579347648
157  2.4735564571  0.61652626  0.531788231  1.488814554 -0.226698058
158  0.2162123854 -0.54914264 -0.708117382 -0.964431035 -0.007118478
159  0.4181098432 -0.21523175 -0.374396776 -1.574864931 -2.193600951
160  0.8921263490  1.94720865  1.199808905  1.320595024 -0.023451999
161  1.4403901104  1.88825753  1.071807815 -0.258173610 -1.654814358
162 -0.3559374303 -1.36924575 -0.552086500  0.443121082  0.381188528
163  0.1852145141  1.37703245  1.442328834 -0.113670391 -0.510448063
164  0.7791536668  0.81928588  0.777994066  0.893991156  1.232566848
165 -0.4164688586  1.38355608 -1.985362180 -0.301342496 -1.245670312
166  2.0643736589  1.50892036  0.042081009  0.974514474  1.669113883
167 -0.0288257864 -1.10816814 -0.304657714  0.372368640  0.694684849
168 -0.5407691203 -1.21291136 -1.897155155 -0.806299057 -1.751715398
169  0.2195516909  0.73376002 -0.462299695  0.031618946 -0.174979246
170  0.0600798631  1.27659313  0.945174591 -0.996394346 -0.309409682
171  1.5526031710  1.99516318  1.641048935  1.986685756  1.257980323
172 -1.0491658530  0.57119059  0.311701320 -0.186224123  0.922032974
173  1.2005481525  0.23320060  0.613288649 -0.621743377 -0.253861583
174  0.8738445025 -1.13335374  0.197886868  0.115849461 -0.643024436
175  0.2261905333 -0.05979957  0.755267281 -1.436909836 -1.901562877
176 -0.5761764146 -0.39440018  0.911852765 -0.612949986 -0.191230765
177  1.0775405715  0.35572783 -0.019866615  0.242001452  0.983951606
178  1.5401987455  0.94737101  1.899713702  0.202911743  2.230571411
179  0.5955688479  1.29250324  0.409245640  1.887993553  0.920794012
180  0.6880648895 -0.19001521 -0.470446371  2.255087920  1.249070024
181 -1.4568256022 -2.15306330  0.082900476  0.404880890 -0.849702160
182  0.8180751554 -0.12494065 -0.226433199  1.039108508  1.264534294
183  0.0085438960  0.95015610  0.746740187 -1.199500750  0.065679066
184 -0.8940668214 -0.89639078 -1.395100746 -1.851574470  0.049340769
185  0.3770063973 -0.82598548 -0.077718026  0.609599278  1.228258471
186 -0.7713336559 -0.87279879  1.400998933 -0.555717355  0.131552517
187  2.1916399164  1.67997412  1.993896837  0.036039639 -0.433074625
188 -0.7644027282 -0.50832439 -0.744513922 -0.632456117 -0.201423058
189  1.0818416884 -0.71917476  1.372392496 -1.310306184 -0.758836981
190 -0.7123867784  0.32291498 -0.370940781 -0.492459708 -0.908119073
191 -0.7189526528 -1.27177778 -0.176011101  0.640347511  0.103736091
192  0.7583885763 -0.09557949 -0.692839578  0.531354179  0.215634518
193 -0.9704287286 -0.52589547 -1.472212149 -0.786149409  0.777841368
194  1.0111685017 -0.46876166  0.714326936  1.362278118  0.769143961
195 -0.9182525115  0.24633169 -1.615503809  0.346701771 -1.458981555
196 -0.9252375184  0.14194143 -0.068448638 -1.563162896 -0.991772639
197  0.2406860576  0.28524346  0.205569334  2.106344888  1.000259344
198 -1.4337577825 -0.14697860 -0.530798010 -0.407106864 -0.991733735
199 -1.0447500775  2.16919283  0.684209652 -0.615469883 -0.351618750
200  0.0003911315 -0.56261685 -1.389186009  0.482855829 -0.419598035
               y6
1    0.6180292594
2    2.3837518591
3   -0.5212269270
4    0.8620270188
5   -0.5963206302
6    0.5078609421
7    0.7560059736
8    0.0755523079
9    0.3437498957
10   0.8277790695
11   0.6519951487
12   0.2183530296
13  -0.7622672194
14  -1.0837788485
15   1.3074069668
16  -0.2938138623
17  -0.3715209234
18   0.8235061437
19   1.3636021679
20   0.5659299001
21   0.2328136550
22  -0.1785960274
23  -0.3303716169
24  -1.8632142568
25  -0.0472791943
26   0.9918544612
27   0.0365857421
28  -3.1384202905
29   0.3244417113
30   0.3115047955
31   0.2355117511
32  -2.2599809462
33  -0.9697594710
34   0.5124384949
35  -0.9466894918
36  -0.9987866543
37  -0.9858805748
38  -0.7061911584
39   1.6712780213
40   1.2013057555
41  -1.0177945028
42   1.8121359903
43  -1.0758238986
44   0.2602691534
45   0.4160715843
46  -2.1811373349
47  -0.7659919354
48   0.0905282800
49   0.9539121615
50   0.3284151719
51   0.3129508912
52  -0.7349192375
53   0.5990398139
54   0.0706749722
55   1.1537899816
56   2.2754967491
57  -0.7770942330
58  -0.4176790163
59   0.5578826036
60   0.0132791538
61   1.4557820236
62  -0.1614578505
63   1.0553020077
64   0.6572954141
65  -0.0065962895
66  -0.5011396666
67  -1.5871881961
68   1.4584604520
69   0.1442724592
70   1.4164788765
71  -0.9393140531
72  -0.8432634726
73   0.3107646599
74   0.8787032268
75  -0.1206297159
76   0.2355626325
77  -1.4341862530
78  -0.1780377153
79  -0.4228047777
80   0.1800367947
81   0.2762923915
82  -0.9192347075
83   1.3293771747
84  -1.5136484447
85   0.0532982808
86  -0.6395803272
87   0.9024505935
88  -0.8759472927
89   0.5248812368
90   0.5872486206
91  -0.8271764917
92   1.6762625941
93  -0.1260907029
94   0.1758749166
95   2.4085273170
96   0.1276953164
97   0.0387120748
98  -0.8022817056
99   0.3441005526
100 -0.3739782644
101  0.8174960980
102 -0.5973590354
103 -0.0829278468
104  0.5235849919
105  0.1649040059
106  2.7676406794
107 -0.2244604105
108  0.6392133680
109 -0.2851444833
110  1.5954968076
111 -0.5337575235
112 -0.1714677143
113  1.3230356725
114 -0.8265967191
115 -1.2505294045
116  0.5711619042
117 -0.4603102987
118 -0.4902306235
119 -0.3597381126
120 -0.6788897951
121 -0.2960524307
122  0.3744169193
123 -0.1330344756
124 -0.3388926172
125 -0.0736955572
126  0.7569598115
127  0.2420747996
128  0.3718613643
129 -1.2011266096
130 -0.0861716439
131 -0.7827238749
132 -1.3341324966
133  0.2405624650
134  0.7061373572
135  0.0237955037
136 -2.0122030071
137  0.2569017365
138  0.6451132878
139 -0.1854000475
140  0.1425078194
141 -1.0702872302
142 -0.0005046481
143 -1.3558555533
144 -0.5057265862
145 -0.9847451137
146 -1.6523504906
147  0.9426045614
148 -1.1921163188
149 -0.6607215400
150 -0.3718921579
151  0.3472952580
152  0.2766987981
153 -0.5906483904
154 -0.9348732590
155  0.0992055180
156 -0.8121355435
157 -0.8477839774
158 -0.4948894153
159 -1.6476829367
160  2.2083330530
161 -0.7717252908
162  0.4897595541
163  1.8916725586
164 -0.9253124870
165  0.0659688199
166  2.6450185696
167 -0.6547131876
168  0.4594654416
169 -0.9304610979
170 -0.1384007199
171  0.8817207466
172 -0.1425073228
173  0.6730545945
174  0.2774013733
175  1.0687579388
176  0.7227473027
177  0.5396272999
178  1.5551032352
179 -0.9594598042
180  1.3434623849
181 -0.9979190227
182  1.2007442189
183  0.3160171841
184 -0.9341570305
185  0.7917325900
186  0.0265509200
187  0.4427262353
188 -0.2408535448
189 -1.4022884237
190 -1.5768673396
191  0.7078508957
192  0.9055963979
193  0.0234449447
194 -0.0366973321
195 -1.4762230728
196 -0.8230762289
197  1.9785351080
198 -0.5896739751
199  0.8212020981
200  0.3500977547
> 
> 
> 
> cleanEx()
> nameEx("SimDataDist-class")
> ### * SimDataDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataDist-class
> ### Title: Class '"SimDataDist"'
> ### Aliases: SimDataDist-class summary,SimDataDist-method
> ###   run,SimDataDist-method plotDist,SimDataDist-method
> ###   extract,SimDataDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimDataDist")
Class "SimDataDist" [package "simsem"]

Slots:
                                              
Name:          p      dist keepScale   reverse
Class:   numeric      list    vector    vector

Known Subclasses: "NullSimDataDist"
> 
> chisq3 <- simChisq(3)
> chisq8 <- simChisq(8)
> dist <- simDataDist(chisq3, chisq8)
> dist2 <- extract(dist, 2)
> 
> m <- c(0, 0)
> cm <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> n <- 20
> dat <- run(dist, n, m, cm)
Loading required package: pspline
> 
> plotDist(dist, r=0.2)
> 
> 
> 
> 
> cleanEx()

detaching 'package:copula', 'package:pspline'

> nameEx("SimDataOut-class")
> ### * SimDataOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataOut-class
> ### Title: Class '"SimDataOut"'
> ### Aliases: SimDataOut-class summary,SimDataOut-method
> ###   createImpliedMACS,SimDataOut-method
> ###   summaryPopulation,SimDataOut-method getPopulation,SimDataOut-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimDataOut")
Class "SimDataOut" [package "simsem"]

Slots:
                                                                              
Name:    modelType        data       param    paramOut  misspecOut    equalCon
Class:   character  data.frame    SimParam     SimRSet     SimRSet SimEqualCon
                  
Name:            n
Class:     numeric
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> Data <- run(SimData, dataOnly=FALSE)
> Result <- run(SimModel, Data)
> summary(Data)
DATA RESULT OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 500
Data Summary       y1                  y2                 y3                  y4          
 Min.   :-2.828607   Min.   :-3.37032   Min.   :-2.475905   Min.   :-2.75821  
 1st Qu.:-0.625083   1st Qu.:-0.66606   1st Qu.:-0.716538   1st Qu.:-0.64799  
 Median :-0.018824   Median : 0.04373   Median :-0.077007   Median : 0.06414  
 Mean   : 0.002646   Mean   : 0.01874   Mean   :-0.009583   Mean   : 0.03211  
 3rd Qu.: 0.623182   3rd Qu.: 0.66428   3rd Qu.: 0.793210   3rd Qu.: 0.64480  
 Max.   : 3.523274   Max.   : 2.76574   Max.   : 3.186076   Max.   : 3.85754  
       y5                 y6          
 Min.   :-3.06740   Min.   :-2.64395  
 1st Qu.:-0.65420   1st Qu.:-0.63098  
 Median : 0.03630   Median :-0.01769  
 Mean   : 0.04269   Mean   : 0.01642  
 3rd Qu.: 0.76295   3rd Qu.: 0.71683  
 Max.   : 2.90336   Max.   : 2.95779  
============Parameter Values================
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]
[1,]  0.7
[2,]  0.7
[3,]  0.7
[4,]  0.7
[5,]  0.7
[6,]  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1]
[1,]    1

AL: Regression Intercept of Factor.ETA 
[1] 0
------------------------------------------------- 
============================================
> summaryPopulation(Data)
======== Real Parameters =========
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]
[1,]  0.7
[2,]  0.7
[3,]  0.7
[4,]  0.7
[5,]  0.7
[6,]  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1]
[1,]    1

AL: Regression Intercept of Factor.ETA 
[1] 0
------------------------------------------------- 
> mis <- getPopulation(Data, misspec=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("SimEqualCon-class")
> ### * SimEqualCon-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimEqualCon-class
> ### Title: Class '"SimEqualCon"'
> ### Aliases: SimEqualCon-class summary,SimEqualCon-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimEqualCon")
Class "SimEqualCon" [package "simsem"]

Slots:
                                                
Name:            con     modelType conBeforeFill
Class:          list     character       logical

Known Subclasses: "NullSimEqualCon"
> constraint1 <- matrix(1, 3, 2)
> constraint1[,1] <- 1:3
> rownames(constraint1) <- rep("LY", 3)
> constraint2 <- matrix(2, 3, 2)
> constraint2[,1] <- 4:6
> rownames(constraint2) <- rep("LY", 3)
> constraint3 <- matrix(3, 2, 2)
> constraint3[,1] <- 7:8
> rownames(constraint3) <- rep("LY", 2)
> equal.loading <- simEqualCon(constraint1, constraint2, constraint3, modelType="SEM")
> summary(equal.loading)
CONSTRAINT OBJECT
Model Type
[1] "SEM"
-------------Constraint----------------
1.
   Group Row Column
LY    NA   1      1
LY    NA   2      1
LY    NA   3      1
---------------------------------------
2.
   Group Row Column
LY    NA   4      2
LY    NA   5      2
LY    NA   6      2
---------------------------------------
3.
   Group Row Column
LY    NA   7      3
LY    NA   8      3
---------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("SimFunction-class")
> ### * SimFunction-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimFunction-class
> ### Title: Class '"SimFunction"'
> ### Aliases: SimFunction-class summary,SimFunction-method
> ###   run,SimFunction-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimFunction")
Class "SimFunction" [package "simsem"]

Slots:
                                    
Name:        fun attribute   callfun
Class:  function      list      call

Known Subclasses: "NullSimFunction"
> 
> n65 <- simNorm(0.6, 0.05)
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> 
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading.start <- matrix("", 9, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:9, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(9))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> datGen <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> 
> error.cor.trivial <- matrix(NA, 9, 9)
> diag(error.cor.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.trivial, "n1")
> 
> misGen <- simMisspecSEM(LY = LY.trivial, RTE = RTE.trivial)
> 
> Data.Mis <- simData(datGen, 300, misspec=misGen)
> 
> loading <- matrix(0, 12, 4)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 4] <- NA
> loading[10:12, 3] <- NA
> 
> path <- matrix(0, 4, 4)
> path[4, 1:3] <- NA
> 
> analysis <- simParamSEM(BE=path, LY=loading)
> 
> Model <- simModel(analysis)
> 
> # Find the products of indicators
> newFUN <- function(data, var1, var2, namesProd) {
+ 	prod <- data[,var1] * data[,var2]
+ 	colnames(prod) <- namesProd
+ 	return(data.frame(data, prod))
+ }
> 
> fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> Output <- simResult(10, Data.Mis, Model, objFunction=fun)
Warning in lavaan(model = code, meanstructure = TRUE, data = Data, missing = miss,  :
  lavaan WARNING: model has NOT converged!
Error in solve.default(E) : 
  system is computationally singular: reciprocal condition number = 6.96714e-23
Warning in estimateVCOV(lavaanModel, samplestats = lavaanSampleStats, options = lavaanOptions,  :
  lavaan WARNING: could not compute standard errors!

> summary(Output)
RESULT OBJECT
Model Type
[1] "SEM"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.68e+02 1.76e+02 1.82e+02 1.84e+02 1.31e+02
      AIC   9.40e+03 9.43e+03 9.46e+03 9.46e+03 9.04e+03
      BIC   9.55e+03 9.58e+03 9.61e+03 9.62e+03 9.20e+03
      RMSEA 9.12e-02 9.42e-02 9.65e-02 9.71e-02 7.46e-02
      CFI   9.09e-01 8.95e-01 8.84e-01 8.82e-01 9.38e-01
      TLI   8.74e-01 8.56e-01 8.41e-01 8.37e-01 9.15e-01
      SRMR  5.39e-02 5.55e-02 5.68e-02 5.71e-02 4.63e-02
========= Parameter Estimates and Standard Errors ============
        Estimate Average Estimate SD Average SE Power (Not equal 0) Std Est
LY1_1              0.702       0.093      0.053               1.000   0.713
LY2_1              0.743       0.166      0.055               1.000   0.726
LY3_1              0.699       0.219      0.054               1.000   0.703
LY4_2              0.657       0.131      0.056               1.000   0.658
LY5_2              0.724       0.209      0.054               1.000   0.721
LY6_2              0.722       0.154      0.056               1.000   0.735
LY10_3             0.521       0.110      0.092               1.000   0.528
LY11_3             0.585       0.266      0.099               0.889   0.540
LY12_3             0.556       0.249      0.095               1.000   0.536
LY7_4              0.316       0.111      0.052               1.000   0.768
LY8_4              0.314       0.085      0.053               1.000   0.763
LY9_4              0.326       0.122      0.052               1.000   0.755
BE4_1              1.451       0.724      0.407               0.889   0.531
BE4_2              1.235       0.720      0.347               0.889   0.447
BE4_3              0.015       0.184      0.192               0.000  -0.009
PS2_1              0.605       0.121      0.052               1.000   0.605
PS3_1             -0.004       0.150      0.084               0.333  -0.004
PS3_2              0.025       0.156      0.082               0.333   0.025
TE1_1              0.467       0.103      0.048               1.000   0.485
TE2_2              0.463       0.197      0.053               1.000   0.453
TE3_3              0.459       0.307      0.051               1.000   0.461
TE4_4              0.547       0.151      0.054               1.000   0.552
TE5_5              0.429       0.228      0.052               0.889   0.453
TE6_6              0.422       0.230      0.057               0.889   0.439
TE7_7              0.384       0.180      0.041               1.000   0.397
TE8_8              0.419       0.122      0.043               1.000   0.411
TE9_9              0.441       0.181      0.046               1.000   0.420
TE10_10            0.692       0.129      0.097               1.000   0.712
TE11_11            0.749       0.255      0.120               1.000   0.666
TE12_12            0.700       0.244      0.118               0.889   0.673
TY1               -0.011       0.060      0.057               0.000  -0.013
TY2                0.019       0.072      0.059               0.000   0.018
TY3               -0.013       0.043      0.057               0.000  -0.013
TY4               -0.012       0.077      0.058               0.222  -0.011
TY5               -0.043       0.037      0.057               0.000  -0.045
TY6               -0.038       0.074      0.057               0.111  -0.038
TY7               -0.023       0.076      0.057               0.111  -0.021
TY8               -0.020       0.068      0.058               0.111  -0.018
TY9               -0.009       0.059      0.059               0.111  -0.008
TY10               0.231       0.130      0.057               0.778   0.235
TY11               0.355       0.206      0.062               0.889   0.320
TY12               0.247       0.151      0.059               0.778   0.241
        Std Est SD
LY1_1        0.081
LY2_1        0.146
LY3_1        0.223
LY4_2        0.129
LY5_2        0.173
LY6_2        0.153
LY10_3       0.102
LY11_3       0.221
LY12_3       0.213
LY7_4        0.125
LY8_4        0.088
LY9_4        0.108
BE4_1        0.195
BE4_2        0.198
BE4_3        0.071
PS2_1        0.121
PS3_1        0.150
PS3_2        0.156
TE1_1        0.116
TE2_2        0.210
TE3_3        0.317
TE4_4        0.159
TE5_5        0.253
TE6_6        0.235
TE7_7        0.195
TE8_8        0.129
TE9_9        0.168
TE10_10      0.103
TE11_11      0.219
TE12_12      0.235
TY1          0.061
TY2          0.072
TY3          0.043
TY4          0.079
TY5          0.039
TY6          0.075
TY7          0.079
TY8          0.067
TY9          0.059
TY10         0.134
TY11         0.169
TY12         0.141
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000  0.039  0.039  0.997 -0.917 -0.917  0.816
AIC    0.039  1.000  1.000  0.000 -0.286 -0.286  0.171
BIC    0.039  1.000  1.000  0.000 -0.286 -0.286  0.171
RMSEA  0.997  0.000  0.000  1.000 -0.905 -0.905  0.824
CFI   -0.917 -0.286 -0.286 -0.905  1.000  1.000 -0.793
TLI   -0.917 -0.286 -0.286 -0.905  1.000  1.000 -0.793
SRMR   0.816  0.171  0.171  0.824 -0.793 -0.793  1.000
================== Replications =====================
Number of Replications
[1] 10
Number of Converged Replications
[1] 9
NOTE: The data generation model is not the same as the analysis model. See the summary of the population underlying data generation by the summaryPopulation function.
> 
> # Example of using the simfunction
> mc <- simFunction(newFUN, var1=1:3, var2=4:6, namesProd=paste("y", 10:12, sep=""))
> run(mc, attitude[,-1])
   complaints privileges learning raises critical advance  y10  y11  y12
1          51         30       39     61       92      45 3111 2760 1755
2          64         51       54     63       73      47 4032 3723 2538
3          70         68       69     76       86      48 5320 5848 3312
4          63         45       47     54       84      35 3402 3780 1645
5          78         56       66     71       83      47 5538 4648 3102
6          55         49       44     54       49      34 2970 2401 1496
7          67         42       56     66       68      35 4422 2856 1960
8          75         50       55     70       66      41 5250 3300 2255
9          82         72       67     71       83      31 5822 5976 2077
10         61         45       47     62       80      41 3782 3600 1927
11         53         53       58     58       67      34 3074 3551 1972
12         60         47       39     59       74      41 3540 3478 1599
13         62         57       42     55       63      25 3410 3591 1050
14         83         83       45     59       77      35 4897 6391 1575
15         77         54       72     79       77      46 6083 4158 3312
16         90         50       72     60       54      36 5400 2700 2592
17         85         64       69     79       79      63 6715 5056 4347
18         60         65       75     55       80      60 3300 5200 4500
19         70         46       57     75       85      46 5250 3910 2622
20         58         68       54     64       78      52 3712 5304 2808
21         40         33       34     43       64      33 1720 2112 1122
22         61         52       62     66       80      41 4026 4160 2542
23         66         52       50     63       80      37 4158 4160 1850
24         37         42       58     50       57      49 1850 2394 2842
25         54         42       48     66       75      33 3564 3150 1584
26         77         66       63     88       76      72 6776 5016 4536
27         75         58       74     80       78      49 6000 4524 3626
28         57         44       45     51       83      38 2907 3652 1710
29         85         71       71     77       74      55 6545 5254 3905
30         82         39       59     64       78      39 5248 3042 2301
> summary(mc)
FUNCTION OBJECT
Function Name =  newFUN 
Addition attributes =  var1, var2, namesProd 
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimGenLabels-class")
> ### * SimGenLabels-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimGenLabels-class
> ### Title: Class '"SimGenLabels"'
> ### Aliases: SimGenLabels-class run,SimGenLabels-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimMatrix-class")
> ### * SimMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMatrix-class
> ### Title: Matrix object: Random parameters matrix
> ### Aliases: SimMatrix-class run,SimMatrix-method
> ###   summaryShort,SimMatrix-method summary,SimMatrix-method
> ###   extract,SimMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMatrix")
Class "SimMatrix" [package "simsem"]

Slots:
                    
Name:    free  value
Class: matrix matrix

Known Subclasses: 
Class "SymMatrix", directly
Class "NullSimMatrix", directly
Class "NullSymMatrix", by class "SymMatrix", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> n65 <- simNorm(0.6, 0.05)
> LY <- simMatrix(loading, "n65")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.5686773 0.0000000
[2,] 0.6091822 0.0000000
[3,] 0.5582186 0.0000000
[4,] 0.0000000 0.6797640
[5,] 0.0000000 0.6164754
[6,] 0.0000000 0.5589766
> 
> u34 <- simUnif(0.3, 0.4)
> LY <- adjust(LY, "u34", c(2, 1))
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "runif(1, 0.3, 0.4)"  ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.6243715 0.0000000
[2,] 0.3769841 0.0000000
[3,] 0.5997116 0.0000000
[4,] 0.0000000 0.7202327
[5,] 0.0000000 0.6381797
[6,] 0.0000000 0.5600495
> summaryShort(LY)
     [,1]                     [,2]                    
[1,] "NA:rnorm(1, 0.6, 0.05)" "0"                     
[2,] "NA:runif(1, 0.3, 0.4)"  "0"                     
[3,] "NA:rnorm(1, 0.6, 0.05)" "0"                     
[4,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
[5,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
[6,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
> 
> LY <- extract(LY, 1:3, 1)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1]
[1,]   NA
[2,]   NA
[3,]   NA
[1] "Parameter/Starting Values:"
     [,1]                 
[1,] "rnorm(1, 0.6, 0.05)"
[2,] "runif(1, 0.3, 0.4)" 
[3,] "rnorm(1, 0.6, 0.05)"
> 
> 
> 
> cleanEx()
> nameEx("SimMissing-class")
> ### * SimMissing-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMissing-class
> ### Title: Class '"SimMissing"'
> ### Aliases: SimMissing-class summary,SimMissing-method
> ###   run,SimMissing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("SimMisspec-class")
> ### * SimMisspec-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMisspec-class
> ### Title: Class '"SimMisspec"'
> ### Aliases: SimMisspec-class run,SimMisspec-method
> ###   summary,SimMisspec-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMisspec")
Class "SimMisspec" [package "simsem"]

Slots:
                                                                              
Name:       conBeforeMis     misBeforeFill        misfitType       misfitBound
Class:           logical           logical         character            vector
                                                                              
Name:  averageNumMisspec         optMisfit           numIter         modelType
Class:           logical         character           numeric         character
                                                                              
Name:                 LY                TE               RTE               VTE
Class:         SimMatrix         SymMatrix         SymMatrix         SimVector
                                                                              
Name:                 PS               RPS               VPS                BE
Class:         SymMatrix         SymMatrix         SimVector         SimMatrix
                                                                              
Name:                 TY                AL                ME                MY
Class:         SimVector         SimVector         SimVector         SimVector
                                                                              
Name:                 VE                VY                LX                TD
Class:         SimVector         SimVector         SimMatrix         SymMatrix
                                                                              
Name:                RTD               VTD                PH               RPH
Class:         SymMatrix         SimVector         SymMatrix         SymMatrix
                                                                              
Name:                VPH                GA                TX                KA
Class:         SimVector         SimMatrix         SimVector         SimVector
                                                                              
Name:                 MX                VX                TH               RTH
Class:         SimVector         SimVector         SimMatrix         SimMatrix

Extends: "SimSet"

Known Subclasses: "NullSimMisspec"
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> 
> 
> 
> cleanEx()
> nameEx("SimModel-class")
> ### * SimModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModel-class
> ### Title: Class '"SimModel"'
> ### Aliases: SimModel-class run,SimModel-method summary,SimModel-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModel")
Class "SimModel" [package "simsem"]

Slots:
                                                                              
Name:    modelType       param       start    equalCon     package   estimator
Class:   character    SimParam     SimRSet SimEqualCon   character   character
                                          
Name:    auxiliary      indLab   factorLab
Class:      vector      vector      vector
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> SimModel <- simModel(CFA.Model)
> summary(SimModel)
MODEL OBJECT
Model Type
[1] "CFA"
========= Parameters Set ============
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]   NA    0    0    0    0    0
[2,]    0   NA    0    0    0    0
[3,]    0    0   NA    0    0    0
[4,]    0    0    0   NA    0    0
[5,]    0    0    0    0   NA    0
[6,]    0    0    0    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 0 0
------------------------------------------------- 
Number of free parameters =  19 
=====================================
Adding Constraint?
[1] "No"
Analysis Package
[1] "lavaan"
> 
> 
> 
> cleanEx()
> nameEx("SimModelMIOut-class")
> ### * SimModelMIOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModelMIOut-class
> ### Title: Class '"SimModelMIOut"'
> ### Aliases: SimModelMIOut-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModelMIOut")
Class "SimModelMIOut" [package "simsem"]

Slots:
                                                                              
Name:         FMI1        FMI2       param       start    equalCon     package
Class:     SimRSet     SimRSet    SimParam     SimRSet SimEqualCon   character
                                                                              
Name:         coef         fit          se   converged  paramValue           n
Class:     SimRSet      vector     SimRSet     logical     SimRSet     numeric
                                          
Name:        pMiss      indLab   factorLab
Class:      vector      vector      vector

Extends: "SimModelOut"
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> SimMissing <- simMissing(pmMCAR=0.05, numImps=5)
> Data <- run(SimData)
> Data <- run(SimMissing, Data)
> Result <- run(SimModel, Data, SimMissing)
Loading required package: Amelia
Loading required package: foreign
## 
## Amelia II: Multiple Imputation
## (Version 1.6.3, built: 2012-06-21)
## Copyright (C) 2005-2012 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
-- Imputation 1 --

 1  2  3  4  5 

-- Imputation 2 --

 1  2  3  4  5 

-- Imputation 3 --

 1  2  3  4 

-- Imputation 4 --

 1  2  3  4  5 

-- Imputation 5 --

 1  2  3  4  5 

> summary(Result)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          5.165           9.000           0.813         958.393          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           1.000           1.007        7678.489        7754.352 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR               F 
          0.000           0.000           0.031           0.013           0.574 
            df1             df2             p.F      baseline.F    baseline.df1 
          9.000          61.595           0.813          63.893          15.000 
   baseline.df2    baseline.p.F 
        390.975           0.000 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p Std Est  FMI1        FMI2
LY1_1    0.716 0.041 17.262 0.000   0.724 0.014 0.014403851
LY2_1    0.685 0.043 15.774 0.000   0.674 0.008 0.007806456
LY3_1    0.726 0.047 15.326 0.000   0.688 0.113 0.118105314
LY4_1    0.696 0.044 15.966 0.000   0.679 0.004 0.004303168
LY5_1    0.737 0.047 15.747 0.000   0.696 0.092 0.095601442
LY6_1    0.654 0.044 14.724 0.000   0.664 0.101 0.105160354
TE1_1    0.467 0.038 12.418 0.000   0.476 0.019 0.019288445
TE2_2    0.564 0.043 13.184 0.000   0.546 0.024 0.023837487
TE3_3    0.585 0.046 12.853 0.000   0.527 0.043 0.044030746
TE4_4    0.565 0.044 12.700 0.000   0.539 0.083 0.086606959
TE5_5    0.577 0.046 12.434 0.000   0.515 0.087 0.090029659
TE6_6    0.543 0.044 12.360 0.000   0.560 0.159 0.169000722
TY1      0.011 0.044  0.256 0.798   0.012 0.008 0.008484157
TY2      0.010 0.046  0.211 0.833   0.010 0.033 0.033287398
TY3      0.004 0.048  0.087 0.931   0.004 0.039 0.040227013
TY4      0.041 0.046  0.885 0.376   0.040 0.019 0.018981050
TY5      0.048 0.049  0.969 0.333   0.045 0.079 0.081649930
TY6      0.018 0.045  0.413 0.680   0.019 0.024 0.024414212
Converged
[1] TRUE
> 
> 
> 
> cleanEx()

detaching 'package:Amelia', 'package:foreign'

> nameEx("SimModelOut-class")
> ### * SimModelOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModelOut-class
> ### Title: Class '"SimModelOut"'
> ### Aliases: SimModelOut-class summary,SimModelOut-method
> ###   createImpliedMACS,SimModelOut-method
> ###   summaryPopulation,SimModelOut-method getPopulation,SimModelOut-method
> ###   setPopulation,SimModelOut,SimRSet-method
> ###   setPopulation,SimModelOut,SimSet-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModelOut")
Class "SimModelOut" [package "simsem"]

Slots:
                                                                              
Name:        param       start    equalCon     package        coef         fit
Class:    SimParam     SimRSet SimEqualCon   character     SimRSet      vector
                                                                              
Name:           se   converged  paramValue           n       pMiss      indLab
Class:     SimRSet     logical     SimRSet     numeric      vector      vector
                  
Name:    factorLab
Class:      vector

Known Subclasses: "SimModelMIOut"
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> Data <- run(SimData)
> Result <- run(SimModel, Data)
> summary(Result)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          4.178           9.000           0.899        1007.154          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           1.000           1.008        7677.530        7753.393 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.000           0.000           0.022           0.009 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p      Std Est
LY1_1    0.716 0.041 17.432 0.000  0.724666685
LY2_1    0.693 0.044 15.905 0.000  0.675881269
LY3_1    0.739 0.045 16.412 0.000  0.692385420
LY4_1    0.705 0.043 16.232 0.000  0.686536799
LY5_1    0.727 0.044 16.399 0.000  0.691962134
LY6_1    0.646 0.042 15.446 0.000  0.660677441
TE1_1    0.463 0.037 12.540 0.000  0.474858196
TE2_2    0.570 0.043 13.332 0.000  0.543184510
TE3_3    0.594 0.045 13.093 0.000  0.520602430
TE4_4    0.557 0.042 13.181 0.000  0.528667224
TE5_5    0.576 0.044 13.100 0.000  0.521188406
TE6_6    0.538 0.040 13.530 0.000  0.563505319
TY1      0.003 0.044  0.060 0.952  0.002680210
TY2      0.019 0.046  0.409 0.683  0.018282260
TY3     -0.010 0.048 -0.201 0.841 -0.008973401
TY4      0.032 0.046  0.699 0.484  0.031269038
TY5      0.043 0.047  0.908 0.364  0.040613303
TY6      0.016 0.044  0.376 0.707  0.016807132
Converged
[1] TRUE
> summaryParam(Result)
          Estimate         SE           z         p      Std Est
LY1_1  0.715506677 0.04104548 17.43204614 0.0000000  0.724666685
LY2_1  0.692648365 0.04354827 15.90530123 0.0000000  0.675881269
LY3_1  0.739414122 0.04505208 16.41242949 0.0000000  0.692385420
LY4_1  0.704905029 0.04342787 16.23162921 0.0000000  0.686536799
LY5_1  0.727423233 0.04435696 16.39930406 0.0000000  0.691962134
LY6_1  0.645651773 0.04179930 15.44647208 0.0000000  0.660677441
TE1_1  0.462929363 0.03691697 12.53974432 0.0000000  0.474858196
TE2_2  0.570469175 0.04278926 13.33206383 0.0000000  0.543184510
TE3_3  0.593725696 0.04534635 13.09313084 0.0000000  0.520602430
TE4_4  0.557334544 0.04228373 13.18082878 0.0000000  0.528667224
TE5_5  0.575976048 0.04396900 13.09959485 0.0000000  0.521188406
TE6_6  0.538165385 0.03977435 13.53046460 0.0000000  0.563505319
TY1    0.002646331 0.04415607  0.05993131 0.9522103  0.002680210
TY2    0.018735802 0.04583080  0.40880376 0.6826837  0.018282260
TY3   -0.009582899 0.04775896 -0.20065136 0.8409712 -0.008973401
TY4    0.032105639 0.04591788  0.69919695 0.4844290  0.031269038
TY5    0.042694620 0.04701320  0.90814107 0.3638037  0.040613303
TY6    0.016424890 0.04370427  0.37581889 0.7070515  0.016807132
> summaryPopulation(Result)
[1] "There is no parameter value underlying the data."
[1] "There is no parameter value underlying the data."
> param <- getPopulation(Result)
> Result2 <- setPopulation(Result, param)
> Result3 <- setPopulation(Result, CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("SimParam-class")
> ### * SimParam-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimParam-class
> ### Title: Class '"SimParam"'
> ### Aliases: SimParam-class summary,SimParam-method
> 
> ### ** Examples
> 
> showClass("SimParam")
Class "SimParam" [package "simsem"]

Slots:
                                                                            
Name:  modelType        LY        TE        PS        BE        TY        AL
Class: character    matrix    matrix    matrix    matrix    vector    vector
                                                                            
Name:         LX        TD        PH        GA        TX        KA        TH
Class:    matrix    matrix    matrix    matrix    vector    vector    matrix

Extends: "VirtualRSet"
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> HS.Model <- simParamCFA(LX = loading)
> summary(HS.Model)
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
      [,1] [,2] [,3]
 [1,]   NA    0    0
 [2,]   NA    0    0
 [3,]   NA    0    0
 [4,]    0   NA    0
 [5,]    0   NA    0
 [6,]    0   NA    0
 [7,]    0    0   NA
 [8,]    0    0   NA
 [9,]    0    0   NA

TE: Covariance of Measurement.Error.EPSILON 
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]   NA    0    0    0    0    0    0    0    0
 [2,]    0   NA    0    0    0    0    0    0    0
 [3,]    0    0   NA    0    0    0    0    0    0
 [4,]    0    0    0   NA    0    0    0    0    0
 [5,]    0    0    0    0   NA    0    0    0    0
 [6,]    0    0    0    0    0   NA    0    0    0
 [7,]    0    0    0    0    0    0   NA    0    0
 [8,]    0    0    0    0    0    0    0   NA    0
 [9,]    0    0    0    0    0    0    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA NA NA NA NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 1 1 1
------------------------------------------------- 
> SimModel <- simModel(HS.Model, indLab=paste("x", 1:9, sep=""))
> out <- run(SimModel, HolzingerSwineford1939)
> summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
         85.306          24.000           0.000         918.852          36.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           0.931           0.896        7535.490        7646.703 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.092           0.071           0.114           0.060 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z p   Std Est
LY1_1    0.900 0.081 11.127 0 0.7718808
LY2_1    0.498 0.077  6.429 0 0.4235991
LY3_1    0.656 0.074  8.817 0 0.5811320
LY4_2    0.990 0.057 17.474 0 0.8515822
LY5_2    1.102 0.063 17.576 0 0.8550653
LY6_2    0.917 0.054 17.082 0 0.8380100
LY7_3    0.619 0.070  8.903 0 0.5695144
LY8_3    0.731 0.066 11.090 0 0.7230441
LY9_3    0.670 0.065 10.305 0 0.6650091
PS2_1    0.459 0.064  7.189 0 0.4585082
PS3_1    0.471 0.073  6.461 0 0.4705332
PS3_2    0.283 0.069  4.117 0 0.2829833
TE1_1    0.549 0.114  4.833 0 0.4042000
TE2_2    1.134 0.102 11.146 0 0.8205638
TE3_3    0.844 0.091  9.317 0 0.6622856
TE4_4    0.371 0.048  7.778 0 0.2748077
TE5_5    0.446 0.058  7.642 0 0.2688633
TE6_6    0.356 0.043  8.277 0 0.2977393
TE7_7    0.799 0.081  9.823 0 0.6756533
TE8_8    0.488 0.074  6.573 0 0.4772072
TE9_9    0.566 0.071  8.003 0 0.5577629
TY1      4.036 0.105 38.398 0 3.4630482
TY2      5.590 0.103 54.322 0 4.7555391
TY3      1.594 0.099 16.126 0 1.4119762
TY4      2.071 0.088 23.611 0 1.7821807
TY5      3.239 0.097 33.332 0 2.5140601
TY6      1.269 0.083 15.328 0 1.1601697
TY7      3.566 0.094 38.078 0 3.2788058
TY8      4.796 0.088 54.518 0 4.7442674
TY9      4.704 0.087 53.963 0 4.6692496
Converged
[1] TRUE
> 
> HS.Model2 <- extract(HS.Model, y=1:3)
> summary(HS.Model2)
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2] [,3]
[1,]   NA    0    0
[2,]   NA    0    0
[3,]   NA    0    0

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3]
[1,]   NA    0    0
[2,]    0   NA    0
[3,]    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 1 1 1
------------------------------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("SimREqualCon-class")
> ### * SimREqualCon-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimREqualCon-class
> ### Title: Class '"SimREqualCon"'
> ### Aliases: SimREqualCon-class summary,SimREqualCon-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimResult-class")
> ### * SimResult-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResult-class
> ### Title: Class '"SimResult"'
> ### Aliases: SimResult-class summary,SimResult-method
> ###   summaryPopulation,SimResult-method getPopulation,SimResult-method
> ###   setPopulation,SimResult,data.frame-method
> ###   setPopulation,SimResult,SimSet-method
> ###   setPopulation,SimResult,VirtualRSet-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                            
Name:      pmMCAR      pmMAR
Class:     vector     vector
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.66e+01 1.75e+01 1.82e+01 1.84e+01 1.23e+01
      AIC   7.51e+03 7.51e+03 7.51e+03 7.51e+03 7.45e+03
      BIC   7.58e+03 7.59e+03 7.59e+03 7.59e+03 7.52e+03
      RMSEA 4.06e-02 4.31e-02 4.52e-02 4.56e-02 2.41e-02
      CFI   9.92e-01 9.91e-01 9.90e-01 9.90e-01 9.96e-01
      TLI   9.87e-01 9.86e-01 9.84e-01 9.84e-01 9.95e-01
      SRMR  1.85e-02 1.90e-02 1.95e-02 1.96e-02 1.53e-02
========= Parameter Estimates and Standard Errors ============
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
LY1_1            0.696       0.056      0.042                   1   0.698
LY2_1            0.706       0.018      0.042                   1   0.700
LY3_1            0.663       0.036      0.041                   1   0.687
LY4_1            0.694       0.022      0.042                   1   0.696
LY5_1            0.693       0.037      0.041                   1   0.700
LY6_1            0.708       0.046      0.042                   1   0.705
TE1_1            0.505       0.036      0.039                   1   0.511
TE2_2            0.519       0.032      0.040                   1   0.510
TE3_3            0.491       0.027      0.037                   1   0.528
TE4_4            0.514       0.050      0.039                   1   0.516
TE5_5            0.497       0.021      0.038                   1   0.509
TE6_6            0.504       0.043      0.039                   1   0.502
TY1             -0.004       0.043      0.045                   0  -0.004
TY2             -0.009       0.028      0.045                   0  -0.008
TY3             -0.014       0.038      0.043                   0  -0.014
TY4             -0.012       0.023      0.045                   0  -0.012
TY5             -0.019       0.030      0.044                   0  -0.019
TY6             -0.021       0.025      0.045                   0  -0.021
      Std.Est.SD Average.Param Average.Bias Coverage
LY1_1      0.036          0.70       -0.004      0.8
LY2_1      0.018          0.70        0.006      1.0
LY3_1      0.026          0.70       -0.037      0.8
LY4_1      0.019          0.70       -0.006      1.0
LY5_1      0.020          0.70       -0.007      1.0
LY6_1      0.029          0.70        0.008      1.0
TE1_1      0.049          0.51       -0.005      1.0
TE2_2      0.025          0.51        0.009      1.0
TE3_3      0.035          0.51       -0.019      1.0
TE4_4      0.026          0.51        0.004      1.0
TE5_5      0.028          0.51       -0.013      1.0
TE6_6      0.040          0.51       -0.006      1.0
TY1        0.043          0.00       -0.004      1.0
TY2        0.027          0.00       -0.009      1.0
TY3        0.040          0.00       -0.014      1.0
TY4        0.023          0.00       -0.012      1.0
TY5        0.031          0.00       -0.019      1.0
TY6        0.026          0.00       -0.021      1.0
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.745 -0.745  0.990 -0.966 -0.998  0.997
AIC   -0.745  1.000  1.000 -0.665  0.809  0.780 -0.774
BIC   -0.745  1.000  1.000 -0.665  0.809  0.780 -0.774
RMSEA  0.990 -0.665 -0.665  1.000 -0.944 -0.979  0.986
CFI   -0.966  0.809  0.809 -0.944  1.000  0.977 -0.963
TLI   -0.998  0.780  0.780 -0.979  0.977  1.000 -0.995
SRMR   0.997 -0.774 -0.774  0.986 -0.963 -0.995  1.000
================== Replications =====================
Number of Replications
[1] 5
Number of Converged Replications
[1] 5
> getCutoff(Output, 0.05)
         Chi      AIC     BIC      RMSEA       CFI       TLI       SRMR
95% 17.48556 7511.517 7587.38 0.04312852 0.9913239 0.9855399 0.01901709
> summaryParam(Output)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.      Std.Est
LY1_1      0.695770187  0.05591624 0.04164177                   1  0.698305541
LY2_1      0.705920222  0.01789751 0.04220905                   1  0.699835000
LY3_1      0.662918191  0.03553200 0.04059623                   1  0.686835416
LY4_1      0.693910554  0.02206814 0.04182486                   1  0.695746320
LY5_1      0.692720010  0.03670543 0.04134995                   1  0.700366262
LY6_1      0.708065387  0.04556773 0.04184982                   1  0.705460431
TE1_1      0.505142699  0.03615462 0.03852001                   1  0.511336376
TE2_2      0.519135938  0.03158771 0.03957955                   1  0.509961847
TE3_3      0.490757816  0.02718131 0.03690298                   1  0.527713999
TE4_4      0.514159658  0.04986211 0.03900823                   1  0.515639216
TE5_5      0.497108898  0.02098162 0.03796812                   1  0.509172612
TE6_6      0.504462094  0.04283085 0.03875721                   1  0.501665859
TY1       -0.003916509  0.04276367 0.04451029                   0 -0.004398486
TY2       -0.008652747  0.02760921 0.04511341                   0 -0.008457722
TY3       -0.013513401  0.03845597 0.04314707                   0 -0.014383096
TY4       -0.011653944  0.02258075 0.04461641                   0 -0.011864680
TY5       -0.018671224  0.02996310 0.04421328                   0 -0.018885011
TY6       -0.020695362  0.02474359 0.04486527                   0 -0.021222958
      Std.Est.SD Average.Param Average.Bias Coverage
LY1_1 0.03593389          0.70 -0.004229813      0.8
LY2_1 0.01834143          0.70  0.005920222      1.0
LY3_1 0.02605551          0.70 -0.037081809      0.8
LY4_1 0.01929513          0.70 -0.006089446      1.0
LY5_1 0.01982694          0.70 -0.007279990      1.0
LY6_1 0.02871676          0.70  0.008065387      1.0
TE1_1 0.04907873          0.51 -0.004857301      1.0
TE2_2 0.02548884          0.51  0.009135938      1.0
TE3_3 0.03526319          0.51 -0.019242184      1.0
TE4_4 0.02640626          0.51  0.004159658      1.0
TE5_5 0.02782190          0.51 -0.012891102      1.0
TE6_6 0.04027417          0.51 -0.005537906      1.0
TY1   0.04260561          0.00 -0.003916509      1.0
TY2   0.02728293          0.00 -0.008652747      1.0
TY3   0.04032088          0.00 -0.013513401      1.0
TY4   0.02298553          0.00 -0.011653944      1.0
TY5   0.03056008          0.00 -0.018671224      1.0
TY6   0.02585421          0.00 -0.020695362      1.0
> summaryPopulation(Output)
                 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
Population Value 0.7  0.7  0.7  0.7  0.7  0.7  0.51 0.51 0.51 0.51  0.51  0.51 
                 [,13] [,14] [,15] [,16] [,17] [,18]
Population Value 0     0     0     0     0     0    
> param <- getPopulation(Output)
> Output <- setPopulation(Output, param)
> Output2 <- setPopulation(Output, CFA.Model)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimResultParam-class")
> ### * SimResultParam-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResultParam-class
> ### Title: Class '"SimResultParam"'
> ### Aliases: SimResultParam-class summary,SimResultParam-method
> ###   summaryParam,SimResultParam-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResultParam")
Class "SimResultParam" [package "simsem"]

Slots:
                                                                        
Name:   modelType       nRep      param    misspec        fit       seed
Class:  character    numeric data.frame data.frame data.frame    numeric
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> summary(ParamObject)
PARAMETER RESULT OBJECT
Model Type
[1] "Path"
========= Parameter Values ============
       mean    sd
BE3_1 0.391 0.056
BE3_2 0.410 0.059
BE4_3 0.593 0.052
PS1_1 1.000 0.000
PS2_1 0.266 0.146
PS2_2 1.000 0.000
PS3_3 0.588 0.114
PS4_4 0.646 0.061
AL1   0.000 0.000
AL2   0.000 0.000
AL3   0.000 0.000
AL4   0.000 0.000
========= Misspecification Values ============
       mean    sd
BE4_1 0.023 0.023
BE4_2 0.043 0.079
========= Fit Indices Distributions ============
              f0 rmsea  srmr
5%         0.005 0.044 0.016
10%        0.007 0.055 0.020
25%        0.015 0.086 0.029
50%        0.019 0.097 0.036
75%        0.025 0.111 0.038
90%        0.031 0.124 0.041
95%        0.033 0.128 0.042
fitAverage 0.019 0.092 0.032
fitSE      0.012 0.037 0.012
========= Correlation between Fit Indices and Parameter Misspecification ============
       BE4_1  BE4_2     f0  rmsea   srmr
BE4_1  1.000 -0.838 -0.229 -0.135 -0.100
BE4_2 -0.838  1.000  0.510  0.423  0.464
f0    -0.229  0.510  1.000  0.981  0.942
rmsea -0.135  0.423  0.981  1.000  0.976
srmr  -0.100  0.464  0.942  0.976  1.000
> 
> 
> 
> cleanEx()
> nameEx("SimSet-class")
> ### * SimSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimSet-class
> ### Title: Class '"SimSet"'
> ### Aliases: SimSet-class run,SimSet-method summary,SimSet-method
> ###   extract,SimSet-method
> 
> ### ** Examples
> 
> showClass("SimSet")
Class "SimSet" [package "simsem"]

Slots:
                                                                            
Name:  modelType        LY        TE       RTE       VTE        PS       RPS
Class: character SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPS        BE        TY        AL        ME        MY        VE
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimVector
                                                                            
Name:         VY        LX        TD       RTD       VTD        PH       RPH
Class: SimVector SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPH        GA        TX        KA        MX        VX        TH
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimMatrix
                
Name:        RTH
Class: SimMatrix

Known Subclasses: 
Class "NullSimSet", directly
Class "SimMisspec", directly
Class "NullSimMisspec", by class "SimMisspec", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> # Error Correlation Object
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> 
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> summary(CFA.Model)
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
> #run(CFA.Model)
> 
> CFA.Model2 <- extract(CFA.Model, y=1:3, e=1)
> summary(CFA.Model2)
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]    
[1,] "NA:0.7"
[2,] "NA:0.7"
[3,] "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3]
[1,] "1"  "0"  "0" 
[2,] "0"  "1"  "0" 
[3,] "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]
[1,] "1" 

VE: Variance of Factor.ETA 
[1] "1"

AL: Regression Intercept of Factor.ETA 
[1] "0"

ME: mean of Factor.ETA 
[1] "0"
-------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("SimVector-class")
> ### * SimVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimVector-class
> ### Title: Vector object: Random parameters vector
> ### Aliases: SimVector-class run,SimVector-method
> ###   summaryShort,SimVector-method summary,SimVector-method
> ###   extract,SimVector-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimVector")
Class "SimVector" [package "simsem"]

Slots:
                    
Name:    free  value
Class: vector vector

Known Subclasses: "NullSimVector"
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- simVector(factor.mean, factor.mean.starting)
> run(AL)
[1] 5 2
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5" "2"
> summaryShort(AL)
[1] "NA:5" "NA:2"
> 
> n01 <- simNorm(0, 1)
> AL <- adjust(AL, "n01", 2)
> run(AL)
[1]  5.0000000 -0.6264538
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5"              "rnorm(1, 0, 1)"
> 
> AL <- extract(AL, 1)
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA
[1] "Parameter/Starting Values:"
[1] "5"
> 
> 
> 
> cleanEx()
> nameEx("SymMatrix-class")
> ### * SymMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SymMatrix-class
> ### Title: Symmetric matrix object: Random parameters symmetric matrix
> ### Aliases: SymMatrix-class run,SymMatrix-method summary,SymMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SymMatrix")
Class "SymMatrix" [package "simsem"]

Slots:
                    
Name:    free  value
Class: matrix matrix

Extends: "SimMatrix"

Known Subclasses: "NullSymMatrix"
> 
> latent.cor <- matrix(NA, 3, 3)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> u46 <- simUnif(0.4, 0.6)
> RPH <- adjust(RPH, "u46", c(3,2))
> summary(RPH)
[1] "Random Symmetric Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1
[1] "Parameter/Starting Values:"
     [,1]  [,2]                 [,3]                
[1,] ""    "0.5"                "0.5"               
[2,] "0.5" ""                   "runif(1, 0.4, 0.6)"
[3,] "0.5" "runif(1, 0.4, 0.6)" ""                  
> summaryShort(RPH)
     [,1]     [,2]                    [,3]                   
[1,] "1"      "NA:0.5"                "NA:0.5"               
[2,] "NA:0.5" "1"                     "NA:runif(1, 0.4, 0.6)"
[3,] "NA:0.5" "NA:runif(1, 0.4, 0.6)" "1"                    
> run(RPH)
     [,1]      [,2]      [,3]
[1,]  1.0 0.5000000 0.5000000
[2,]  0.5 1.0000000 0.4531017
[3,]  0.5 0.4531017 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("VirtualDist-class")
> ### * VirtualDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VirtualDist-class
> ### Title: Distribution Objects
> ### Aliases: VirtualDist-class SimBeta-class SimBinom-class SimCauchy-class
> ###   SimChisq-class SimExp-class SimF-class SimGamma-class SimGeom-class
> ###   SimHyper-class SimLnorm-class SimLogis-class SimNbinom-class
> ###   SimNorm-class SimPois-class SimT-class SimUnif-class SimWeibull-class
> ###   run,SimBeta-method run,SimBinom-method run,SimCauchy-method
> ###   run,SimChisq-method run,SimExp-method run,SimF-method
> ###   run,SimGamma-method run,SimGeom-method run,SimHyper-method
> ###   run,SimLnorm-method run,SimLogis-method run,SimNbinom-method
> ###   run,SimNorm-method run,SimPois-method run,SimT-method
> ###   run,SimUnif-method run,SimWeibull-method summary,SimBeta-method
> ###   summary,SimBinom-method summary,SimCauchy-method
> ###   summary,SimChisq-method summary,SimExp-method summary,SimF-method
> ###   summary,SimGamma-method summary,SimGeom-method
> ###   summary,SimHyper-method summary,SimLnorm-method
> ###   summary,SimLogis-method summary,SimNbinom-method
> ###   summary,SimNorm-method summary,SimPois-method summary,SimT-method
> ###   summary,SimUnif-method summary,SimWeibull-method
> ###   summaryShort,SimBeta-method summaryShort,SimBinom-method
> ###   summaryShort,SimCauchy-method summaryShort,SimChisq-method
> ###   summaryShort,SimExp-method summaryShort,SimF-method
> ###   summaryShort,SimGamma-method summaryShort,SimGeom-method
> ###   summaryShort,SimHyper-method summaryShort,SimLnorm-method
> ###   summaryShort,SimLogis-method summaryShort,SimNbinom-method
> ###   summaryShort,SimNorm-method summaryShort,SimPois-method
> ###   summaryShort,SimT-method summaryShort,SimUnif-method
> ###   summaryShort,SimWeibull-method toFunction,SimBeta-method
> ###   toFunction,SimBinom-method toFunction,SimCauchy-method
> ###   toFunction,SimChisq-method toFunction,SimExp-method
> ###   toFunction,SimF-method toFunction,SimGamma-method
> ###   toFunction,SimGeom-method toFunction,SimHyper-method
> ###   toFunction,SimLnorm-method toFunction,SimLogis-method
> ###   toFunction,SimNbinom-method toFunction,SimNorm-method
> ###   toFunction,SimPois-method toFunction,SimT-method
> ###   toFunction,SimUnif-method toFunction,SimWeibull-method
> ###   plotDist,VirtualDist-method skew,VirtualDist-method
> ###   kurtosis,VirtualDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("VirtualDist")
Virtual Class "VirtualDist" [package "simsem"]

No Slots, prototype of class "SimUnif"

Known Subclasses: "SimUnif", "SimNorm", "SimBeta", "SimBinom", "SimCauchy", "SimChisq", "SimExp", 
"SimF", "SimGamma", "SimGeom", "SimHyper", "SimLnorm", "SimLogis", "SimNbinom", 
"SimPois", "SimT", "SimWeibull"
> u1 <- simUnif(0, 1)
> chi3 <- simChisq(3)
> summary(chi3)
[1] "Random Chi-squared Distribution Object."
[1] "Degree of freedom is 3."
[1] "Non-centrality parameter is 0."
> skew(chi3)
[1] 1.631577
> kurtosis(chi3)
[1] 3.97977
> plotDist(chi3)
> plotDist(chi3, reverse=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("VirtualRSet-class")
> ### * VirtualRSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ParameterSet
> ### Title: Class '"VirtualRSet"', '"SimLabels"' and '"SimRSet"'
> ### Aliases: VirtualRSet-class SimRSet-class SimLabels-class
> ###   summary,VirtualRSet-method summary,SimRSet-method
> ###   summary,SimLabels-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("adjust")
> ### * adjust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adjust
> ### Title: Change an element in 'SimMatrix', 'SymMatrix', or 'SimVector'.
> ### Aliases: adjust adjust-methods adjust,ANY-method
> ###   adjust,SimMatrix-method adjust,SymMatrix-method
> ###   adjust,SimVector-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LX <- simMatrix(loading, 0.7)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> u34 <- simUnif(0.3, 0.4)
> LX <- adjust(LX, "u34", c(2, 1))
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                 [,2] 
[1,] "0.7"                ""   
[2,] "runif(1, 0.3, 0.4)" ""   
[3,] "0.7"                ""   
[4,] ""                   "0.7"
[5,] ""                   "0.7"
[6,] ""                   "0.7"
> run(LX)
          [,1] [,2]
[1,] 0.7000000  0.0
[2,] 0.3265509  0.0
[3,] 0.7000000  0.0
[4,] 0.0000000  0.7
[5,] 0.0000000  0.7
[6,] 0.0000000  0.7
> 
> LX <- adjust(LX, 0, c(2,1))
> LX <- adjust(LX, 0.5, c(2,2), FALSE)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]    0   NA
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] ""    "0.5"
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.0  0.5
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- simVector(factor.mean, factor.mean.starting)
> run(AL)
[1] 5 2
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5" "2"
> 
> n01 <- simNorm(0, 1)
> AL <- adjust(AL, "n01", 2)
> run(AL)
[1]  5.0000000 -0.3262334
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5"              "rnorm(1, 0, 1)"
> 
> 
> 
> cleanEx()
> nameEx("anova")
> ### * anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova
> ### Title: Provide a comparison of nested models and nonnested models
> ###   across replications
> ### Aliases: anova,SimResult-method anova,SimModelOut-method
> ###   anova,SimModelMIOut-method
> 
> ### ** Examples
> 
> loading1 <- matrix(0, 6, 1)
> loading1[1:6, 1] <- NA
> loading2 <- loading1
> loading2[6,1] <- 0
> LX1 <- simMatrix(loading1, 0.7)
> LX2 <- simMatrix(loading2, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model1 <- simSetCFA(LY = LX1, RPS = RPH, RTE = RTD)
> CFA.Model2 <- simSetCFA(LY = LX2, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model1, 500)
> SimModel1 <- simModel(CFA.Model1)
> SimModel2 <- simModel(CFA.Model2)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> # Need to make sure that both simResult calls have the same seed!
> Output1 <- simResult(5, SimData, SimModel1, seed=123567)
> Output2 <- simResult(5, SimData, SimModel2, seed=123567)
> anova(Output1, Output2)
$summary
  df      chisq       CFI       TLI      RMSEA      AIC      BIC
1  9   6.891728 0.9996613 1.0033576 0.00429422 7430.999 7506.862
2 10 282.423285 0.7484832 0.6227248 0.23310981 7704.530 7776.179

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
275.5315569   1.0000000   1.0000000  -0.2511781  -0.3806327   0.2288156 
   AIC diff    BIC diff 
273.5315569 269.3169488 

$varyParam
NULL

> 
> Output1b <- simResult(NULL, SimData, SimModel1, seed=123567, n=seq(50, 500, 50))
> Output2b <- simResult(NULL, SimData, SimModel2, seed=123567, n=seq(50, 500, 50))
> anova(Output1b, Output2b)
$summary
  df     chisq       CFI       TLI      RMSEA      AIC      BIC
1  9   8.90679 0.9922451 0.9918760 0.02684797 4151.095 4212.700
2 10 148.78517 0.7756391 0.6634587 0.22162940 4288.974 4347.156

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
139.8783790   1.0000000   1.0000000  -0.2166060  -0.3284173   0.1947814 
   AIC diff    BIC diff 
137.8783790 134.4559148 

$varyParam
     N power.1
1   50       1
2   74       1
3   97       1
4  121       1
5  145       1
6  168       1
7  192       1
8  216       1
9  239       1
10 263       1
11 287       1
12 311       1
13 334       1
14 358       1
15 382       1
16 405       1
17 429       1
18 453       1
19 476       1
20 500       1

> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("blankParameters")
> ### * blankParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blankParameters
> ### Title: Change all elements in the non-null objects to be all NAs.
> ### Aliases: blankParameters
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("centralMoment")
> ### * centralMoment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centralMoment
> ### Title: Calculate central moments of a variable
> ### Aliases: centralMoment
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # centralMoment(1:5, 2)
> 
> 
> 
> cleanEx()
> nameEx("checkInputValue")
> ### * checkInputValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkInputValue
> ### Title: Check the value argument in the matrix, symmetric matrix, or
> ###   vector objects
> ### Aliases: checkInputValue checkInputValueVector
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Extract only converged replications in the result objects
> ### Aliases: clean
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("cleanSimResult")
> ### * cleanSimResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cleanSimResult
> ### Title: Extract only converged replications in the result object
> ### Aliases: cleanSimResult
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("collapseExo")
> ### * collapseExo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapseExo
> ### Title: Collapse all exogenous variables and put all in endogenous side
> ###   only.
> ### Aliases: collapseExo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineLatentCorExoEndo")
> ### * combineLatentCorExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineLatentCorExoEndo
> ### Title: Combine exogenous factor correlation and endogenous factor
> ###   correlation into a single matrix
> ### Aliases: combineLatentCorExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineLoadingExoEndo")
> ### * combineLoadingExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineLoadingExoEndo
> ### Title: Combine factor loading from the exogenous and endogenous sides
> ###   into a single matrix
> ### Aliases: combineLoadingExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineMeasurementErrorExoEndo")
> ### * combineMeasurementErrorExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineMeasurementErrorExoEndo
> ### Title: Combine measurement error correlation from the exogenous and
> ###   endogenous sides into a single matrix
> ### Aliases: combineMeasurementErrorExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineObject")
> ### * combineObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineObject
> ### Title: Combine by summing or binding two objects together.
> ### Aliases: combineObject combineObject-methods
> ###   combineObject,ANY,ANY-method combineObject,SimMatrix,SimMatrix-method
> ###   combineObject,SimVector,SimVector-method
> ###   combineObject,vector,vector-method combineObject,matrix,matrix-method
> ###   combineObject,MatrixSet,MatrixSet-method
> ###   combineObject,SimParam,list-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combinePathExoEndo")
> ### * combinePathExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combinePathExoEndo
> ### Title: Combine the regression coefficient matrices
> ### Aliases: combinePathExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("constantVector")
> ### * constantVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constantVector
> ### Title: Create a constant vector object
> ### Aliases: constantVector
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # constantVector(0, 5)
> 
> 
> 
> cleanEx()
> nameEx("constrainMatrices")
> ### * constrainMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constrainMatrices
> ### Title: Impose an equality constraint in an object
> ### Aliases: constrainMatrices constrainMatrices-methods
> ###   constrainMatrices,ANY,ANY-method
> ###   constrainMatrices,MatrixSet,SimEqualCon-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("continuousPower")
> ### * continuousPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: continuousPower
> ### Title: Find power of model parameters when simulations have randomly
> ###   varying parameters
> ### Aliases: continuousPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D Cpow <- continuousPower(Output, contN = TRUE, contMCAR = TRUE)
> ##D Cpow
> ##D 
> ##D Cpow2 <- continuousPower(Output, contN = TRUE, contMCAR = TRUE, pred=list(N = 200, pmMCAR = 0.3))
> ##D Cpow2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("countFreeParameters")
> ### * countFreeParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countFreeParameters
> ### Title: Count how many free parameters in the target object
> ### Aliases: countFreeParameters countFreeParameters-methods
> ###   countFreeParameters,ANY-method countFreeParameters,SimMatrix-method
> ###   countFreeParameters,SymMatrix-method
> ###   countFreeParameters,SimVector-method
> ###   countFreeParameters,SimSet-method countFreeParameters,matrix-method
> ###   countFreeParameters,vector-method
> ###   countFreeParameters,VirtualRSet-method
> ###   countFreeParameters,SimEqualCon-method
> ###   countFreeParameters,SimREqualCon-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("countMACS")
> ### * countMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countMACS
> ### Title: Count the number of elements in the sufficient statistics
> ### Aliases: countMACS
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("cov2corMod")
> ### * cov2corMod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cov2corMod
> ### Title: Convert a covariance matrix to a correlation matrix
> ### Aliases: cov2corMod
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("createData")
> ### * createData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createData
> ### Title: Create data from model parameters
> ### Aliases: createData
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("createFreeParameters")
> ### * createFreeParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createFreeParameters
> ### Title: Create a free parameters object from a model specification
> ### Aliases: createFreeParameters
> 
> ### ** Examples
> 
> # No comment out because this function is not public
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # RPH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # RTD <- symMatrix(error.cor)
> # indicator.mean <- rep(NA, 6)
> # MX <- simVector(indicator.mean, 0)
> # CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD, MX = MX)
> # free <- createFreeParameters(CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("createImpliedMACS")
> ### * createImpliedMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createImpliedMACS
> ### Title: Create model implied mean vector and covariance matrix
> ### Aliases: createImpliedMACS createImpliedMACS-methods
> ###   createImpliedMACS,MatrixSet-method createImpliedMACS,SimRSet-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> param <- run(CFA.Model)
> createImpliedMACS(param)
$M
[1] 0 0 0 0 0 0

$CM
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]
[1,] 1.000 0.490 0.490 0.245 0.245 0.245
[2,] 0.490 1.000 0.490 0.245 0.245 0.245
[3,] 0.490 0.490 1.000 0.245 0.245 0.245
[4,] 0.245 0.245 0.245 1.000 0.490 0.490
[5,] 0.245 0.245 0.245 0.490 1.000 0.490
[6,] 0.245 0.245 0.245 0.490 0.490 1.000

> 
> 
> 
> cleanEx()
> nameEx("defaultStartingValues")
> ### * defaultStartingValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defaultStartingValues
> ### Title: Make ad hoc starting values
> ### Aliases: defaultStartingValues
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("divideObject")
> ### * divideObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: divideObject
> ### Title: Make a division on each element of the object
> ### Aliases: divideObject divideObject-methods divideObject,ANY-method
> ###   divideObject,vector,numeric-method divideObject,matrix,numeric-method
> ###   divideObject,MatrixSet,numeric-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("drawParameters")
> ### * drawParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drawParameters
> ### Title: Create parameter sets (with or without model misspecification)
> ###   from the data object
> ### Aliases: drawParameters
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("drawParametersMisspec")
> ### * drawParametersMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drawParametersMisspec
> ### Title: Create parameter sets (with or without model misspecification)
> ###   from the parameter with or without misspecification set
> ### Aliases: drawParametersMisspec
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("expandMatrices")
> ### * expandMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expandMatrices
> ### Title: Expand the set of intercept and covariance matrices into the set
> ###   of intercept/mean and covariance/correlation/variance objects
> ### Aliases: expandMatrices
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extract")
> ### * extract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract
> ### Title: Extract a part of an object
> ### Aliases: extract extract-methods extract,vector-method
> ###   extract,matrix-method extract,VirtualRSet-method
> ###   extract,data.frame-method
> 
> ### ** Examples
> 
> extract(1:10, c(4, 5))
[1] 4 5
> extract(diag(3), 1, 2:3)
     [,1] [,2]
[1,]    0    0
> 
> 
> 
> cleanEx()
> nameEx("extractLavaanFit")
> ### * extractLavaanFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractLavaanFit
> ### Title: Extract fit indices from the lavaan object
> ### Aliases: extractLavaanFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extractMatrixNames")
> ### * extractMatrixNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractMatrixNames
> ### Title: Extract a vector of parameter names based on specified rows and
> ###   columns
> ### Aliases: extractMatrixNames
> 
> ### ** Examples
> 
> # The function is not public
> 
> # vec <- c("LY1_1", "LY2_1", "LY3_1", "LY4_2", "LY5_2", "LY6_2", "LY7_3")
> # extractMatrixNames(vec, 5:6, 2)
> 
> 
> 
> cleanEx()
> nameEx("extractOpenMxFit")
> ### * extractOpenMxFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractOpenMxFit
> ### Title: Extract the fit indices reported by the 'OpenMx' result
> ### Aliases: extractOpenMxFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extractVectorNames")
> ### * extractVectorNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractVectorNames
> ### Title: Extract a vector of parameter names based on specified elements
> ### Aliases: extractVectorNames
> 
> ### ** Examples
> 
> # The function is not public
> 
> #vec <- c("TY1", "TY2", "TY3", "TY4", "TY5", "TY6", "TY7")
> #extractVectorNames(vec, 5:6)
> 
> 
> 
> cleanEx()
> nameEx("fillParam")
> ### * fillParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fillParam
> ### Title: Fill in other objects based on the parameter values of current
> ###   objects
> ### Aliases: fillParam
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("find2Dhist")
> ### * find2Dhist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find2Dhist
> ### Title: Fit the 2D Kernel Density Estimate
> ### Aliases: find2Dhist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findFactorIntercept")
> ### * findFactorIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorIntercept
> ### Title: Find factor intercept from regression coefficient matrix and
> ###   factor total means
> ### Aliases: findFactorIntercept
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> factorMean <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorIntercept(path, factorMean)
[1]  5.0  2.0  3.0 -3.0 -3.2 -2.6  0.0  0.0  0.0
> 
> 
> 
> cleanEx()
> nameEx("findFactorMean")
> ### * findFactorMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorMean
> ### Title: Find factor total means from regression coefficient matrix and
> ###   factor intercept
> ### Aliases: findFactorMean
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> intcept <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorMean(path, intcept)
[1] 5.00 2.00 3.00 3.00 3.20 2.60 1.80 3.12 2.84
> 
> 
> 
> cleanEx()
> nameEx("findFactorResidualVar")
> ### * findFactorResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorResidualVar
> ### Title: Find factor residual variances from regression coefficient
> ###   matrix, factor (residual) correlations, and total factor variances
> ### Aliases: findFactorResidualVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> totalVar <- rep(1, 9)
> findFactorResidualVar(path, facCor, totalVar)
[1] 1.00000 1.00000 1.00000 0.64000 0.28800 0.28800 0.64000 0.29568 0.21888
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalCov")
> ### * findFactorTotalCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalCov
> ### Title: Find factor total covariance from regression coefficient matrix,
> ###   factor residual covariance
> ### Aliases: findFactorTotalCov
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalCov(path, corPsi=facCor, errorVarPsi=residualVar)
       [,1]  [,2]  [,3]   [,4]   [,5]   [,6]    [,7]    [,8]    [,9]
 [1,] 1.000 0.400 0.400 0.6000 0.6400 0.4000 0.36000 0.62400 0.49600
 [2,] 0.400 1.000 0.400 0.2400 0.7600 0.6400 0.14400 0.55200 0.68800
 [3,] 0.400 0.400 1.000 0.2400 0.4000 0.7600 0.14400 0.33600 0.61600
 [4,] 0.600 0.240 0.240 1.0000 0.3840 0.2400 0.60000 0.63040 0.29760
 [5,] 0.640 0.760 0.400 0.3840 1.0000 0.5440 0.23040 0.75360 0.72640
 [6,] 0.400 0.640 0.760 0.2400 0.5440 1.0000 0.14400 0.42240 0.81760
 [7,] 0.360 0.144 0.144 0.6000 0.2304 0.1440 1.00000 0.37824 0.17856
 [8,] 0.624 0.552 0.336 0.6304 0.7536 0.4224 0.37824 1.00000 0.55488
 [9,] 0.496 0.688 0.616 0.2976 0.7264 0.8176 0.17856 0.55488 1.00000
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalVar")
> ### * findFactorTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalVar
> ### Title: Find factor total variances from regression coefficient matrix,
> ###   factor (residual) correlations, and factor residual variances
> ### Aliases: findFactorTotalVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalVar(path, facCor, residualVar)
[1] 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findIndIntercept")
> ### * findIndIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndIntercept
> ### Title: Find indicator intercepts from factor loading matrix, total
> ###   factor mean, and indicator mean.
> ### Aliases: findIndIntercept
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> indMean <- rep(1, 6)
> findIndIntercept(loading, facMean, indMean)
[1] 0.70 0.65 0.60 0.88 0.86 0.84
> 
> 
> 
> cleanEx()
> nameEx("findIndMean")
> ### * findIndMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndMean
> ### Title: Find indicator total means from factor loading matrix, total
> ###   factor mean, and indicator intercept.
> ### Aliases: findIndMean
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> intcept <- rep(0, 6)
> findIndMean(loading, facMean, intcept)
[1] 0.30 0.35 0.40 0.12 0.14 0.16
> 
> 
> 
> cleanEx()
> nameEx("findIndResidualVar")
> ### * findIndResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndResidualVar
> ### Title: Find indicator residual variances from factor loading matrix,
> ###   total factor covariance, and total indicator variances.
> ### Aliases: findIndResidualVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> totalVar <- rep(1, 6)
> findIndResidualVar(loading, facCov, totalVar)
[1] 0.64 0.51 0.36 0.64 0.51 0.36
> 
> 
> 
> cleanEx()
> nameEx("findIndTotalVar")
> ### * findIndTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndTotalVar
> ### Title: Find indicator total variances from factor loading matrix, total
> ###   factor covariance, and indicator residual variances.
> ### Aliases: findIndTotalVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> resVar <- c(0.64, 0.51, 0.36, 0.64, 0.51, 0.36)
> findIndTotalVar(loading, facCov, resVar)
[1] 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findPossibleFactorCor")
> ### * findPossibleFactorCor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPossibleFactorCor
> ### Title: Find the appropriate position for freely estimated correlation
> ###   (or covariance) given a regression coefficient matrix
> ### Aliases: findPossibleFactorCor
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findPossibleFactorCor(path)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1   NA   NA    0    0    0    0    0    0
 [2,]   NA    1   NA    0    0    0    0    0    0
 [3,]   NA   NA    1    0    0    0    0    0    0
 [4,]    0    0    0    1   NA   NA    0    0    0
 [5,]    0    0    0   NA    1   NA    0    0    0
 [6,]    0    0    0   NA   NA    1    0    0    0
 [7,]    0    0    0    0    0    0    1   NA   NA
 [8,]    0    0    0    0    0    0   NA    1   NA
 [9,]    0    0    0    0    0    0   NA   NA    1
> 
> 
> 
> cleanEx()
> nameEx("findPower")
> ### * findPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPower
> ### Title: Find a value of independent variables that provides a given
> ###   value of power.
> ### Aliases: findPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.4)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D pow <- getPower(Output)
> ##D findPower(pow, "N", 0.80)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("findRecursiveSet")
> ### * findRecursiveSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRecursiveSet
> ### Title: Group variables regarding the position in mediation chain
> ### Aliases: findRecursiveSet
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findRecursiveSet(path)
[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

> 
> 
> 
> cleanEx()
> nameEx("findRowZero")
> ### * findRowZero
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRowZero
> ### Title: Find rows in a matrix that all elements are zero in non-fixed
> ###   subset rows and columns.
> ### Aliases: findRowZero
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findTargetPower")
> ### * findTargetPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findTargetPower
> ### Title: Find a value of varying parameters that provides a given value
> ###   of power.
> ### Aliases: findTargetPower
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findphist")
> ### * findphist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findphist
> ### Title: Find the density (likelihood) of a pair value in 2D Kernel
> ###   Density Estimate
> ### Aliases: findphist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("fitMeasuresChi")
> ### * fitMeasuresChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitMeasuresChi
> ### Title: Find fit indices from the discrepancy values of the target model
> ###   and null models.
> ### Aliases: fitMeasuresChi
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("freeVector")
> ### * freeVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeVector
> ### Title: Create a free parameters vector with a starting values in a
> ###   vector object
> ### Aliases: freeVector
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # freeVector(0, 5)
> 
> 
> 
> cleanEx()
> nameEx("getCondQtile")
> ### * getCondQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCondQtile
> ### Title: Get a quantile of a variable given values of predictors
> ### Aliases: getCondQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("getCutoff")
> ### * getCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoff
> ### Title: Find fit indices cutoff given a priori alpha level
> ### Aliases: getCutoff getCutoff-methods getCutoff,data.frame-method
> ###   getCutoff,matrix-method getCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- simMatrix(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- symMatrix(error.cor)
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 200)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D getCutoff(Output, 0.05)
> ##D 
> ##D # Finding the cutoff when the sample size is varied.
> ##D Output2 <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10))
> ##D getCutoff(Output2, 0.05, nVal = 75)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNested")
> ### * getCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNested
> ### Title: Find fit indices cutoff for nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D 
> ##D getCutoffNested(Output.NULL.NULL, Output.NULL.ALT)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNonNested")
> ### * getCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNonNested
> ### Title: Find fit indices cutoff for non-nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D getCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D getCutoffNonNested(Output.A.A, Output.A.B)
> ##D getCutoffNonNested(Output.B.B, Output.B.A)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getKeywords")
> ### * getKeywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getKeywords
> ### Title: List of all keywords used in the 'simsem' package
> ### Aliases: getKeywords
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # getKeywords()
> 
> 
> 
> cleanEx()
> nameEx("getPopulation")
> ### * getPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPopulation
> ### Title: Extract the data generation population model underlying an
> ###   object
> ### Aliases: getPopulation getPopulation-methods getPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("getPower")
> ### * getPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPower
> ### Title: Find power of model parameters
> ### Aliases: getPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D getPower(Output)
> ##D 
> ##D getPower(Output, nVal=c(100, 200), pmMCARval=c(0, 0.1, 0.2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFit")
> ### * getPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFit
> ### Title: Find power in rejecting alternative models based on fit indices
> ###   criteria
> ### Aliases: getPowerFit getPowerFit-methods
> ###   getPowerFit,data.frame,vector-method getPowerFit,matrix,vector-method
> ###   getPowerFit,SimResult,vector-method
> ###   getPowerFit,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimModel <- simModel(CFA.Model.NULL)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- simResult(5, SimData.NULL, SimModel)
> ##D Cut.NULL <- getCutoff(Output.NULL, 0.95)
> ##D 
> ##D u79 <- simUnif(0.7, 0.9)
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D Output.ALT <- simResult(5, SimData.ALT, SimModel)
> ##D getPowerFit(Output.ALT, cutoff=Cut.NULL)
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D getPowerFit(Output.ALT, cutoff=Rule.of.thumb, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- simResult(NULL, SimData.NULL, SimModel, n=seq(50, 500, 50))
> ##D Output.ALT2 <- simResult(NULL, SimData.ALT, SimModel, n=seq(50, 500, 50))
> ##D getPowerFit(Output.ALT2, nullObject=Output.NULL2, nVal=250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNested")
> ### * getPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNested
> ### Title: Find power in rejecting nested models based on the differences
> ###   in fit indices
> ### Aliases: getPowerFitNested getPowerFitNested-methods
> ###   getPowerFitNested,SimResult,SimResult,vector-method
> ###   getPowerFitNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "rnorm(1,0,0.1)")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D # loading.alt.mis <- matrix(NA, 6, 2)
> ##D # loading.alt.mis[is.na(loading.alt)] <- 0
> ##D # LX.alt.mis <- simMatrix(loading.alt.mis, "runif(1,-.2,.2)")
> ##D # CFA.Model.alt.mis <- simMisspecCFA(LY = LX.alt.mis, RTE=RTD.Mis)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.ALT.NULL <- simResult(10, SimData.ALT, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D Output.ALT.ALT <- simResult(10, SimData.ALT, SimModel.ALT)
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10))
> ##D 
> ##D Output.NULL.NULL2 <- simResult(NULL, SimData.NULL, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.ALT.NULL2 <- simResult(NULL, SimData.ALT, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.NULL.ALT2 <- simResult(NULL, SimData.NULL, SimModel.ALT, n=seq(50, 500, 50))
> ##D Output.ALT.ALT2 <- simResult(NULL, SimData.ALT, SimModel.ALT, n=seq(50, 500, 50))
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, nVal = 250)
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10), nVal = 250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNonNested")
> ### * getPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNonNested
> ### Title: Find power in rejecting non-nested models based on the
> ###   differences in fit indices
> ### Aliases: getPowerFitNonNested getPowerFitNonNested-methods
> ###   getPowerFitNonNested,SimResult,SimResult,vector-method
> ###   getPowerFitNonNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("imposeMissing")
> ### * imposeMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imposeMissing
> ### Title: Impose MAR, MCAR, planned missingness, or attrition on a data
> ###   set
> ### Aliases: imposeMissing
> 
> ### ** Examples
> 
>   data <- matrix(rep(rnorm(10,1,1),19),ncol=19)
>   datac <- cbind(data,rnorm(10,0,1),rnorm(10,5,5))
>  
>   # Imposing Missing with the following arguments produces no missing values
>   imposeMissing(data)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,cov=c(1,2))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMCAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,nforms=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
> 
>   #Some more usage examples
>   imposeMissing(data,cov=c(1,2),pmMCAR=.1)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316        NA 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247        NA 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291        NA 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814        NA 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   
>  
>   imposeMissing(data,nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA
 [8,]        NA        NA        NA        NA        NA
 [9,]        NA        NA        NA        NA        NA
[10,]        NA        NA        NA        NA        NA
>   imposeMissing(data,nforms=3,itemGroups=list(c(1,2,3,4,5),c(6,7,8,9,10),c(11,12,13,14,15),c(16,17,18,19)))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078 1.3295078        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,]        NA 2.5952808 2.5952808 2.5952808 2.5952808
 [5,]        NA 1.3295078 1.3295078 1.3295078 1.3295078
 [6,]        NA 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291        NA        NA        NA        NA
 [8,] 1.7383247        NA        NA        NA        NA
 [9,] 1.5757814        NA        NA        NA        NA
[10,] 0.6946116        NA        NA        NA        NA
>   imposeMissing(datac,cov=c(20,21),nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462  1.51178117  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078  1.12493092  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA -0.01619026  4.221022
 [8,]        NA        NA        NA        NA        NA  0.94383621 -2.353762
 [9,]        NA        NA        NA        NA        NA  0.82122120  2.609250
[10,]        NA        NA        NA        NA        NA  0.59390132  7.089708
>   imposeMissing(data,twoMethod=c(19,.8))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808        NA
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247        NA
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(datac,cov=21,prAttr=.1,timePoints=5)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462        NA        NA        NA        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,]        NA        NA        NA        NA        NA          NA  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,]        NA        NA        NA        NA        NA          NA  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 -0.01619026  4.221022
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247  0.94383621 -2.353762
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814  0.82122120  2.609250
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116  0.59390132  7.089708
> 
> 
> 
> 
> cleanEx()
> nameEx("interpolate")
> ### * interpolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolate
> ### Title: Find the value of one vector relative to a value of another
> ###   vector by interpolation
> ### Aliases: interpolate
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("isCorMatrix")
> ### * isCorMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isCorMatrix
> ### Title: Check whether a 'matrix' is a possible correlation matrix
> ### Aliases: isCorMatrix
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # isCorMatrix(diag(5))
> 
> 
> 
> cleanEx()
> nameEx("isDefault")
> ### * isDefault
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isDefault
> ### Title: Check whether a vector object is default
> ### Aliases: isDefault
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isMeanConstraint")
> ### * isMeanConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isMeanConstraint
> ### Title: Check whether all rownames in a constraint matrix containing
> ###   symbols of means vectors
> ### Aliases: isMeanConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isNullObject")
> ### * isNullObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isNullObject
> ### Title: Check whether the object is the 'NULL' type of that class
> ### Aliases: isNullObject isNullObject-methods isNullObject,ANY,ANY-method
> ###   isNullObject,vector-method isNullObject,matrix-method
> ###   isNullObject,SimMatrix-method isNullObject,SymMatrix-method
> ###   isNullObject,SimVector-method isNullObject,SimSet-method
> ###   isNullObject,SimEqualCon-method isNullObject,SimREqualCon-method
> ###   isNullObject,SimMisspec-method isNullObject,VirtualRSet-method
> ###   isNullObject,data.frame-method isNullObject,SimMissing-method
> ###   isNullObject,SimDataDist-method isNullObject,SimFunction-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isRandom")
> ### * isRandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isRandom
> ### Title: Check whether the object contains any random parameters
> ### Aliases: isRandom isRandom-methods isRandom,ANY-method
> ###   isRandom,SimMatrix-method isRandom,SimVector-method
> ###   isRandom,SimSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isVarianceConstraint")
> ### * isVarianceConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isVarianceConstraint
> ### Title: Check whether all rownames in a constraint matrix containing
> ###   symbols of variance vectors
> ### Aliases: isVarianceConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("kStat")
> ### * kStat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kStat
> ### Title: Calculate the _k_-statistic of a variable
> ### Aliases: kStat
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # kStat(1:5, 4)
> 
> 
> 
> cleanEx()
> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Finding excessive kurtosis
> ### Aliases: kurtosis kurtosis-methods kurtosis,vector-method
> 
> ### ** Examples
> 
> kurtosis(1:5)
Excess Kur (g2)              se               z               p 
     -1.2000000       2.1908902      -0.5477226       0.5838824 
> 
> 
> 
> cleanEx()
> nameEx("likRatioFit")
> ### * likRatioFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: likRatioFit
> ### Title: Find the likelihood ratio (or Bayes factor) based on the
> ###   bivariate distribution of fit indices
> ### Aliases: likRatioFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2:3, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D param.A <- simParamSEM(LY=loading, BE=path.A)
> ##D 
> ##D model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[1:2, 3] <- NA
> ##D path.B[1, 2] <- NA
> ##D param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.mis <- matrix(NA, 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D LY.mis <- simMatrix(loading.mis, "u2")
> ##D misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D likRatioFit(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadingFromAlpha")
> ### * loadingFromAlpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadingFromAlpha
> ### Title: Find standardized factor loading from coefficient alpha
> ### Aliases: loadingFromAlpha
> 
> ### ** Examples
> 
>     loadingFromAlpha(0.8, 4)
[1] 0.7071068
> 
> 
> 
> cleanEx()
> nameEx("makeLabels")
> ### * makeLabels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeLabels
> ### Title: Make parameter names for each element in matrices or vectors or
> ###   the name for the whole object
> ### Aliases: makeLabels makeLabels-methods makeLabels,ANY-method
> ###   makeLabels,vector-method makeLabels,matrix-method
> ###   makeLabels,SimParam-method makeLabels,VirtualDist-method
> ###   makeLabels,SimSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("matchKeywords")
> ### * matchKeywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchKeywords
> ### Title: Search for the keywords and check whether the specified text
> ###   match one in the name vector
> ### Aliases: matchKeywords
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # matchKeywords("ly", c("LY", "LX"))
> 
> 
> 
> cleanEx()
> nameEx("miPool")
> ### * miPool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPool
> ### Title: Function to pool imputed results
> ### Aliases: miPool
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("miPoolChi")
> ### * miPoolChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPoolChi
> ### Title: Function to pool chi-square statistics from the result from
> ###   multiple imputation
> ### Aliases: miPoolChi
> 
> ### ** Examples
> 
> miPoolChi(c(89.864, 81.116, 71.500, 49.022, 61.986, 64.422, 55.256, 57.890, 79.416, 63.944), 2)
           F          df1          df2          p.F 
1.981628e+01 2.000000e+00 4.616817e+01 6.122891e-07 
> 
> 
> 
> cleanEx()
> nameEx("miPoolVector")
> ### * miPoolVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPoolVector
> ### Title: Function to pool imputed results that saved in a matrix format
> ### Aliases: miPoolVector
> 
> ### ** Examples
> 
> param <- matrix(c(0.7, 0.1, 0.5,
+ 					0.75, 0.12, 0.54,
+ 					0.66, 0.11, 0.56,
+ 					0.74, 0.09, 0.55), nrow=4, byrow=TRUE)
> SE <- matrix(c(0.1, 0.01, 0.05,
+ 				0.11, 0.023, 0.055,
+ 				0.10, 0.005, 0.04,
+ 				0.14, 0.012, 0.039), nrow=4, byrow=TRUE)
> nimps <- 4
> miPoolVector(param, SE, nimps)
$coef
[1] 0.7125 0.1050 0.5375

$se
[1] 0.12263598 0.02019488 0.05500985

$FMI.1
[1] 0.1406012 0.5108296 0.2857104

$FMI.2
[1] 0.1517078 0.5783172 0.3216485

> 
> 
> 
> cleanEx()
> nameEx("multipleAllEqual")
> ### * multipleAllEqual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multipleAllEqual
> ### Title: Test whether all objects are equal
> ### Aliases: multipleAllEqual
> 
> ### ** Examples
> 
> multipleAllEqual(1:5, 1:5, seq(2, 10, 2)/2)
[1] TRUE
> multipleAllEqual(1:5, 1:6, seq(2, 10, 2)/2)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("overlapHist")
> ### * overlapHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlapHist
> ### Title: Plot overlapping histograms
> ### Aliases: overlapHist
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # a <- rnorm(10000, 0, 1)
> # b <- rnorm(10000, 1, 1.5)
> # overlapHist(a, b, main="Example")
> 
> 
> 
> cleanEx()
> nameEx("pValue")
> ### * pValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValue
> ### Title: Find p-values (1 - percentile)
> ### Aliases: pValue pValue-methods pValue,ANY-method
> ###   pValue,numeric,vector-method pValue,numeric,data.frame-method
> ###   pValue,SimModelOut,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Compare number with a vector
> ##D pValue(0.5, rnorm(1000, 0, 1))
> ##D 
> ##D # Compare numbers with a data frame
> ##D pValue(c(0.5, 0.2), data.frame(rnorm(1000, 0, 1), runif(1000, 0, 1)))
> ##D 
> ##D # Compare an analysis result with a result of simulation study
> ##D library(lavaan)
> ##D loading <- matrix(0, 9, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D model <- simParamCFA(LY=loading)
> ##D SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.trivial <- matrix(NA, 9, 3)
> ##D loading.trivial[is.na(loading)] <- 0
> ##D LY.trivial <- simMatrix(loading.trivial, "u2")
> ##D mis <- simMisspecCFA(LY = LY.trivial)
> ##D out <- run(SimModel, HolzingerSwineford1939)
> ##D Output2 <- runFit(out, HolzingerSwineford1939, 20, mis)
> ##D pValue(out, Output2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueCondCutoff")
> ### * pValueCondCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueCondCutoff
> ### Title: Find a p value when the target is conditional (valid) on a
> ###   specific value of a predictor
> ### Aliases: pValueCondCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("pValueNested")
> ### * pValueNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNested
> ### Title: Find p-values (1 - percentile) for a nested model comparison
> ### Aliases: pValueNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D 
> ##D LY <- matrix(1, 4, 2)
> ##D LY[,2] <- 0:3
> ##D PS <- matrix(NA, 2, 2)
> ##D TY <- rep(0, 4)
> ##D AL <- rep(NA, 2)
> ##D TE <- diag(NA, 4)
> ##D linearModel <- simParamCFA(LY=LY, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D LY2 <- matrix(1, 4, 2)
> ##D LY2[,2] <- c(0, NA, NA, 3)
> ##D unconstrainModel <- simParamCFA(LY=LY2, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D nested <- simModel(linearModel, indLab=paste("t", 1:4, sep=""))
> ##D parent <- simModel(unconstrainModel, indLab=paste("t", 1:4, sep=""))
> ##D 
> ##D outNested <- run(nested, Demo.growth)
> ##D outParent <- run(parent, Demo.growth)
> ##D 
> ##D loadingMis <- matrix(0, 4, 2)
> ##D loadingMis[2:3, 2] <- NA
> ##D LYmis <- simMatrix(loadingMis, "runif(1, -0.1, 0.1)")
> ##D linearMis <- simMisspecCFA(LY=LYmis)
> ##D 
> ##D simNestedNested <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis)
> ##D simNestedParent <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis, analyzeModel=parent)
> ##D 
> ##D pValueNested(outNested, outParent, simNestedNested, simNestedParent)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueNonNested")
> ### * pValueNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNonNested
> ### Title: Find p-values (1 - percentile) for a non-nested model comparison
> ### Aliases: pValueNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2:3, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D param.A <- simParamSEM(LY=loading, BE=path.A)
> ##D 
> ##D model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[1:2, 3] <- NA
> ##D path.B[1, 2] <- NA
> ##D param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.mis <- matrix(NA, 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D LY.mis <- simMatrix(loading.mis, "u2")
> ##D misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D pValueNonNested(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueVariedCutoff")
> ### * pValueVariedCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueVariedCutoff
> ### Title: Find a p value when the cutoff is specified as a vector given
> ###   the values of predictors
> ### Aliases: pValueVariedCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plot3DQtile")
> ### * plot3DQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot3DQtile
> ### Title: Build a persepctive plot or contour plot of a quantile of
> ###   predicted values
> ### Aliases: plot3DQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotCutoff")
> ### * plotCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoff
> ### Title: Plot sampling distributions of fit indices with fit indices
> ###   cutoffs
> ### Aliases: plotCutoff plotCutoff-methods plotCutoff,data.frame-method
> ###   plotCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- simMatrix(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- symMatrix(error.cor)
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 200)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D plotCutoff(Output, 0.05, usedFit=c("RMSEA", "SRMR", "CFI", "TLI"))
> ##D 
> ##D # Varying N
> ##D Output2 <- simResult(NULL, SimData, SimModel, n=seq(450, 500, 10))
> ##D plotCutoff(Output2, 0.05)
> ##D 
> ##D # Varying N and pmMCAR
> ##D Output3 <- simResult(NULL, SimData, SimModel, n=seq(450, 500, 10), pmMCAR=c(0, 0.05, 0.1, 0.15))
> ##D plotCutoff(Output3, 0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNested")
> ### * plotCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between nested models with fit indices cutoffs
> ### Aliases: plotCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D 
> ##D plotCutoffNested(Output.NULL.NULL, Output.NULL.ALT, alpha=0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNonNested")
> ### * plotCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNonNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between non-nested models with fit indices cutoffs
> ### Aliases: plotCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, onetailed=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotDist")
> ### * plotDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotDist
> ### Title: Plot a distribution of a distribution object or data
> ###   distribution object
> ### Aliases: plotDist plotDist-methods
> 
> ### ** Examples
> 
> gamma11 <- simGamma(1, 1)
> plotDist(gamma11)
> 
> chi <- simChisq(5)
> dataDist <- simDataDist(chi, chi)
> plotDist(dataDist)
Loading required package: pspline
> 
> 
> 
> cleanEx()

detaching 'package:copula', 'package:pspline'

> nameEx("plotIndividualScatter")
> ### * plotIndividualScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotIndividualScatter
> ### Title: Plot an overlaying scatter plot visualizing the power of
> ###   rejecting misspecified models
> ### Aliases: plotIndividualScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotLogisticFit")
> ### * plotLogisticFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotLogisticFit
> ### Title: Plot multiple logistic curves for predicting whether rejecting a
> ###   misspecified model
> ### Aliases: plotLogisticFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotMisfit")
> ### * plotMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMisfit
> ### Title: Plot the population misfit in parameter result object
> ### Aliases: plotMisfit
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(20, Path.Model, Path.Mis.Model)
> plotMisfit(ParamObject)
> 
> plotMisfit(ParamObject, misParam=1:2)
> 
> 
> 
> cleanEx()
> nameEx("plotOverHist")
> ### * plotOverHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotOverHist
> ### Title: Plot multiple overlapping histograms
> ### Aliases: plotOverHist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPower")
> ### * plotPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPower
> ### Title: Make a power plot of a parameter given varying parameters
> ### Aliases: plotPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.4)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D plotPower(Output, "LY1_1", contMCAR=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFit")
> ### * plotPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFit
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimModel <- simModel(CFA.Model.NULL)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- simResult(5, SimData.NULL, SimModel)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.5)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D Output.ALT <- simResult(5, SimData.ALT, SimModel)
> ##D plotPowerFit(Output.ALT, nullObject=Output.NULL, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D plotPowerFit(Output.ALT, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- simResult(NULL, SimData.NULL, SimModel, n=seq(50, 250, 25))
> ##D Output.ALT2 <- simResult(NULL, SimData.ALT, SimModel, n=seq(50, 250, 25))
> ##D 
> ##D plotPowerFit(Output.ALT2, nullObject=Output.NULL2, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D plotPowerFit(Output.ALT2, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitDf")
> ### * plotPowerFitDf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitDf
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFitDf
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNested")
> ### * plotPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNested
> ### Title: Plot power of rejecting a nested model in a nested model
> ###   comparison by each fit index
> ### Aliases: plotPowerFitNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "rnorm(1,0,0.1)")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D # loading.alt.mis <- matrix(NA, 6, 2)
> ##D # loading.alt.mis[is.na(loading.alt)] <- 0
> ##D # LX.alt.mis <- simMatrix(loading.alt.mis, "runif(1,-.2,.2)")
> ##D # CFA.Model.alt.mis <- simMisspecCFA(LY = LX.alt.mis, RTE=RTD.Mis)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.ALT.NULL <- simResult(10, SimData.ALT, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D Output.ALT.ALT <- simResult(10, SimData.ALT, SimModel.ALT)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, usedFit="CFI")
> ##D 
> ##D Output.NULL.NULL2 <- simResult(NULL, SimData.NULL, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.ALT.NULL2 <- simResult(NULL, SimData.ALT, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.NULL.ALT2 <- simResult(NULL, SimData.NULL, SimModel.ALT, n=seq(50, 500, 50))
> ##D Output.ALT.ALT2 <- simResult(NULL, SimData.ALT, SimModel.ALT, n=seq(50, 500, 50))
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, logistic=FALSE)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(CFI=-0.1), logistic=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNonNested")
> ### * plotPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNonNested
> ### Title: Plot power of rejecting a non-nested model based on a difference
> ###   in fit index
> ### Aliases: plotPowerFitNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerSig")
> ### * plotPowerSig
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerSig
> ### Title: Plot multiple logistic curves given a significance result matrix
> ### Aliases: plotPowerSig
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotQtile")
> ### * plotQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotQtile
> ### Title: Build a scatterplot with overlaying line of quantiles of
> ###   predicted values
> ### Aliases: plotQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotScatter")
> ### * plotScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotScatter
> ### Title: Plot overlaying scatter plots visualizing the power of rejecting
> ###   misspecified models
> ### Aliases: plotScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("popDiscrepancy")
> ### * popDiscrepancy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popDiscrepancy
> ### Title: Find the discrepancy value between two means and covariance
> ###   matrices
> ### Aliases: popDiscrepancy
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popDiscrepancy(m1, S1, m2, S2)
         [,1]
[1,] 0.116864
> 
> 
> 
> cleanEx()
> nameEx("popMisfit")
> ### * popMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfit
> ### Title: Calculate population misfit
> ### Aliases: popMisfit popMisfit-methods popMisfit,ANY,ANY-method
> ###   popMisfit,matrix,matrix-method popMisfit,list,list-method
> ###   popMisfit,SimRSet,SimRSet-method popMisfit,MatrixSet,MatrixSet-method
> ###   popMisfit,SimSet,SimMisspec-method
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> popMisfit(Path.Model, Path.Mis.Model, fit.measures="rmsea")
     rmsea 
0.07897849 
> 
> 
> 
> cleanEx()
> nameEx("popMisfitMACS")
> ### * popMisfitMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfitMACS
> ### Title: Find population misfit by sufficient statistics
> ### Aliases: popMisfitMACS
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popMisfitMACS(m1, S1, m2, S2)
        f0       srmr 
0.11686397 0.06770032 
> 
> 
> 
> cleanEx()
> nameEx("predProb")
> ### * predProb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predProb
> ### Title: Function to get predicted probabilities from logistic regression
> ### Aliases: predProb
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("printIfNotNull")
> ### * printIfNotNull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printIfNotNull
> ### Title: Provide basic summary of each object if that object is not NULL.
> ### Aliases: printIfNotNull
> 
> ### ** Examples
> 
> # This function is not public
> 
> # AL <- simVector(rep(NA, 5), "0")
> # printIfNotNull(AL, "Factor mean")
> 
> 
> 
> cleanEx()
> nameEx("reassignNames")
> ### * reassignNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reassignNames
> ### Title: Reassign the name of equality constraint
> ### Aliases: reassignNames
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("reduceConstraint")
> ### * reduceConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduceConstraint
> ### Title: Reduce the model constraint to data generation parameterization
> ###   to analysis model parameterization.
> ### Aliases: reduceConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("reduceMatrices")
> ### * reduceMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduceMatrices
> ### Title: Reduce the model constraint to data generation parameterization
> ###   to analysis model parameterization.
> ### Aliases: reduceMatrices
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("revText")
> ### * revText
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: revText
> ### Title: Reverse the proportion value by subtracting it from 1
> ### Aliases: revText
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # revText(.96)
> # revText("> .60")
> 
> 
> 
> cleanEx()
> nameEx("run")
> ### * run
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run
> ### Title: Run a particular object in 'simsem' package.
> ### Aliases: run run-methods run,ANY-method run,NullSimMatrix-method
> ###   run,NullSymMatrix-method run,NullSimVector-method
> ### Keywords: run
> 
> ### ** Examples
> 
> n02 <- simNorm(0, 0.2)
> run(n02)
[1] -0.1252908
> 
> 
> 
> cleanEx()
> nameEx("runFit")
> ### * runFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runFit
> ### Title: Build a Monte Carlo simulation that the data-generation
> ###   parameters are from the result of analyzing real data
> ### Aliases: runFit runFit-methods runFit,ANY-method runFit,SimModel-method
> ###   runFit,SimModelOut-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 9, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D model <- simParamCFA(LY=loading)
> ##D SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.trivial <- matrix(NA, 9, 3)
> ##D loading.trivial[is.na(loading)] <- 0
> ##D LY.trivial <- simMatrix(loading.trivial, "u2")
> ##D mis <- simMisspecCFA(LY = LY.trivial)
> ##D Output <- runFit(SimModel, HolzingerSwineford1939, 5, mis)
> ##D summary(Output)
> ##D 
> ##D out <- run(SimModel, HolzingerSwineford1939)
> ##D Output2 <- runFit(out, HolzingerSwineford1939, 5, mis)
> ##D 
> ##D # Bollen-Stine Bootstrap
> ##D Output3 <- runFit(out, HolzingerSwineford1939, 5, modelBoot=TRUE)
> ##D 
> ##D # Bollen-Stine Bootstrap with trivial misspecification
> ##D Output4 <- runFit(out, HolzingerSwineford1939, 5, mis, modelBoot=TRUE)
> ##D 
> ##D # Example with multiple imputation
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path <- matrix(0, 3, 3)
> ##D path[2:3, 1] <- NA
> ##D path[3, 2] <- NA
> ##D errorCov <- diag(NA, 11)
> ##D facCov <- diag(3)
> ##D param <- simParamSEM(LY=loading, BE=path, TE=errorCov, PS=facCov)
> ##D 
> ##D miss <- simMissing(pmMCAR=0.03, numImps=5)
> ##D usedData <- run(miss, PoliticalDemocracy)
> ##D 
> ##D model <- simModel(param, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out <- run(model, usedData, miss)
> ##D output <- runFit(model, usedData, 5, missModel=miss)
> ##D pValue(out, output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("runFitParam")
> ### * runFitParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runFitParam
> ### Title: Build a parameter result object that the data-generation
> ###   parameters are from the result of analyzing real data
> ### Aliases: runFitParam runFitParam-methods runFitParam,ANY-method
> ###   runFitParam,SimModel-method runFitParam,SimModelOut-method
> 
> ### ** Examples
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> model <- simParamCFA(LY=loading)
> SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> u2 <- simUnif(-0.2, 0.2)
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> mis <- simMisspecCFA(LY = LY.trivial)
> Output <- runFitParam(SimModel, data=HolzingerSwineford1939, nRep=5, misspec=mis)
> summary(Output)
PARAMETER RESULT OBJECT
Model Type
[1] "CFA"
========= Parameter Values ============
       mean sd
LY1_1 0.772  0
LY2_1 0.424  0
LY3_1 0.581  0
LY4_2 0.852  0
LY5_2 0.855  0
LY6_2 0.838  0
LY7_3 0.570  0
LY8_3 0.723  0
LY9_3 0.665  0
PS2_1 0.459  0
PS3_1 0.471  0
PS3_2 0.283  0
TE1_1 0.404  0
TE2_2 0.821  0
TE3_3 0.662  0
TE4_4 0.275  0
TE5_5 0.269  0
TE6_6 0.298  0
TE7_7 0.676  0
TE8_8 0.477  0
TE9_9 0.558  0
TY1   3.463  0
TY2   4.756  0
TY3   1.412  0
TY4   1.782  0
TY5   2.514  0
TY6   1.160  0
TY7   3.279  0
TY8   4.744  0
TY9   4.669  0
========= Misspecification Values ============
        mean    sd
LY4_1 -0.052 0.104
LY5_1 -0.015 0.132
LY6_1 -0.009 0.114
LY7_1  0.076 0.077
LY8_1  0.005 0.145
LY9_1  0.001 0.093
LY1_2  0.049 0.144
LY2_2 -0.035 0.147
LY3_2 -0.073 0.088
LY7_2  0.045 0.127
LY8_2 -0.046 0.137
LY9_2 -0.053 0.161
LY1_3  0.022 0.030
LY2_3 -0.038 0.135
LY3_3 -0.051 0.157
LY4_3 -0.090 0.162
LY5_3 -0.013 0.111
LY6_3  0.052 0.087
========= Fit Indices Distributions ============
              f0 rmsea  srmr
5%         0.564 0.125 0.070
10%        0.592 0.128 0.075
25%        0.675 0.137 0.089
50%        1.109 0.176 0.094
75%        1.114 0.176 0.120
90%        1.158 0.179 0.126
95%        1.173 0.180 0.128
fitAverage 0.924 0.158 0.099
fitSE      0.297 0.027 0.026
========= Correlation between Fit Indices and Parameter Misspecification ============
       LY4_1  LY5_1  LY6_1  LY7_1  LY8_1  LY9_1  LY1_2  LY2_2  LY3_2  LY7_2
LY4_1  1.000 -0.005  0.549 -0.204 -0.059 -0.061  0.568 -0.025  0.043 -0.347
LY5_1 -0.005  1.000 -0.750  0.962  0.952  0.876 -0.495 -0.451  0.864 -0.655
LY6_1  0.549 -0.750  1.000 -0.764 -0.856 -0.855  0.700  0.644 -0.618  0.113
LY7_1 -0.204  0.962 -0.764  1.000  0.873  0.786 -0.621 -0.293  0.793 -0.620
LY8_1 -0.059  0.952 -0.856  0.873  1.000  0.967 -0.505 -0.679  0.827 -0.464
LY9_1 -0.061  0.876 -0.855  0.786  0.967  1.000 -0.604 -0.819  0.662 -0.253
LY1_2  0.568 -0.495  0.700 -0.621 -0.505 -0.604  1.000  0.420 -0.072 -0.195
LY2_2 -0.025 -0.451  0.644 -0.293 -0.679 -0.819  0.420  1.000 -0.255 -0.235
LY3_2  0.043  0.864 -0.618  0.793  0.827  0.662 -0.072 -0.255  1.000 -0.812
LY7_2 -0.347 -0.655  0.113 -0.620 -0.464 -0.253 -0.195 -0.235 -0.812  1.000
LY8_2 -0.813  0.144 -0.729  0.236  0.317  0.437 -0.758 -0.526 -0.072  0.564
LY9_2 -0.415  0.058 -0.328  0.168  0.106  0.299 -0.860 -0.373 -0.419  0.585
LY1_3 -0.378 -0.861  0.460 -0.720 -0.824 -0.702 -0.004  0.367 -0.927  0.815
LY2_3 -0.959  0.238 -0.688  0.435  0.265  0.275 -0.763 -0.093  0.081  0.235
LY3_3 -0.128 -0.157 -0.067 -0.121 -0.070  0.168 -0.623 -0.421 -0.611  0.716
LY4_3  0.590 -0.459  0.677 -0.510 -0.493 -0.335  0.124  0.053 -0.701  0.375
LY5_3  0.207  0.711 -0.171  0.766  0.466  0.341 -0.287  0.201  0.563 -0.805
LY6_3  0.444  0.206 -0.029  0.106  0.248  0.435 -0.403 -0.576 -0.212  0.229
f0    -0.474 -0.628  0.291 -0.435 -0.649 -0.519 -0.325  0.336 -0.851  0.729
rmsea -0.484 -0.613  0.285 -0.414 -0.642 -0.518 -0.335  0.353 -0.837  0.707
srmr  -0.807 -0.563 -0.080 -0.411 -0.443 -0.384 -0.156  0.151 -0.501  0.709
       LY8_2  LY9_2  LY1_3  LY2_3  LY3_3  LY4_3  LY5_3  LY6_3     f0  rmsea
LY4_1 -0.813 -0.415 -0.378 -0.959 -0.128  0.590  0.207  0.444 -0.474 -0.484
LY5_1  0.144  0.058 -0.861  0.238 -0.157 -0.459  0.711  0.206 -0.628 -0.613
LY6_1 -0.729 -0.328  0.460 -0.688 -0.067  0.677 -0.171 -0.029  0.291  0.285
LY7_1  0.236  0.168 -0.720  0.435 -0.121 -0.510  0.766  0.106 -0.435 -0.414
LY8_1  0.317  0.106 -0.824  0.265 -0.070 -0.493  0.466  0.248 -0.649 -0.642
LY9_1  0.437  0.299 -0.702  0.275  0.168 -0.335  0.341  0.435 -0.519 -0.518
LY1_2 -0.758 -0.860 -0.004 -0.763 -0.623  0.124 -0.287 -0.403 -0.325 -0.335
LY2_2 -0.526 -0.373  0.367 -0.093 -0.421  0.053  0.201 -0.576  0.336  0.353
LY3_2 -0.072 -0.419 -0.927  0.081 -0.611 -0.701  0.563 -0.212 -0.851 -0.837
LY7_2  0.564  0.585  0.815  0.235  0.716  0.375 -0.805  0.229  0.729  0.707
LY8_2  1.000  0.692  0.259  0.845  0.511 -0.358 -0.339  0.064  0.371  0.367
LY9_2  0.692  1.000  0.395  0.549  0.924  0.319 -0.024  0.604  0.643  0.641
LY1_3  0.259  0.395  1.000  0.216  0.474  0.392 -0.607 -0.096  0.927  0.918
LY2_3  0.845  0.549  0.216  1.000  0.225 -0.564  0.011 -0.257  0.407  0.421
LY3_3  0.511  0.924  0.474  0.225  1.000  0.605 -0.210  0.763  0.630  0.618
LY4_3 -0.358  0.319  0.392 -0.564  0.605  1.000 -0.087  0.698  0.398  0.384
LY5_3 -0.339 -0.024 -0.607  0.011 -0.210 -0.087  1.000  0.149 -0.327 -0.300
LY6_3  0.064  0.604 -0.096 -0.257  0.763  0.698  0.149  1.000  0.060  0.048
f0     0.371  0.643  0.927  0.407  0.630  0.398 -0.327  0.060  1.000  0.999
rmsea  0.367  0.641  0.918  0.421  0.618  0.384 -0.300  0.048  0.999  1.000
srmr   0.638  0.284  0.767  0.628  0.195 -0.257 -0.683 -0.466  0.677  0.672
        srmr
LY4_1 -0.807
LY5_1 -0.563
LY6_1 -0.080
LY7_1 -0.411
LY8_1 -0.443
LY9_1 -0.384
LY1_2 -0.156
LY2_2  0.151
LY3_2 -0.501
LY7_2  0.709
LY8_2  0.638
LY9_2  0.284
LY1_3  0.767
LY2_3  0.628
LY3_3  0.195
LY4_3 -0.257
LY5_3 -0.683
LY6_3 -0.466
f0     0.677
rmsea  0.672
srmr   1.000
> 
> out <- run(SimModel, HolzingerSwineford1939)
> Output2 <- runFitParam(out, nRep=5, misspec=mis)
> 
> 
> 
> cleanEx()
> nameEx("runLavaan")
> ### * runLavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runLavaan
> ### Title: Run data by the model object by the 'lavaan' package
> ### Aliases: runLavaan
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("runMI")
> ### * runMI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMI
> ### Title: Multiply impute and analyze data using lavaan
> ### Aliases: runMI
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function(data.mat,data.model,imps) {
+   #Impute missing data
+   imputed.l<-imputeMissing(data.mat,imps)
+   
+   #Run models on each imputed data set
+   #Does this give results from each dataset in the list?
+   
+   imputed.results<-result.object(imputed.l[[1]],sim.data.model,10)
+ 
+   imputed.results <- lapply(imputed.l,result.object,data.model,1)
+   comb.results<-MIpool(imputed.results,imps)
+   
+   return(comb.results)
+ 
+   }
function (data.mat, data.model, imps) 
{
    imputed.l <- imputeMissing(data.mat, imps)
    imputed.results <- result.object(imputed.l[[1]], sim.data.model, 
        10)
    imputed.results <- lapply(imputed.l, result.object, data.model, 
        1)
    comb.results <- MIpool(imputed.results, imps)
    return(comb.results)
}
> 
> 
> 
> cleanEx()
> nameEx("runMisspec")
> ### * runMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMisspec
> ### Title: Draw actual parameters and model misspecification
> ### Aliases: runMisspec
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("runRep")
> ### * runRep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runRep
> ### Title: Run one replication within a big simulation study
> ### Aliases: runRep
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("setOpenMxObject")
> ### * setOpenMxObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setOpenMxObject
> ### Title: Rearrange starting values for 'OpenMx'
> ### Aliases: setOpenMxObject setOpenMxObject-methods
> ###   setOpenMxObject,ANY,ANY-method setOpenMxObject,vector,vector-method
> ###   setOpenMxObject,matrix,matrix-method
> ###   setOpenMxObject,SimParam,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> # parameter <- c(NA, NA, 0, 0)
> # startingValues <- c(2, 5, 0, 0)
> # setOpenMxObject(parameter, startingValues)
> 
> 
> 
> cleanEx()
> nameEx("setPopulation")
> ### * setPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPopulation
> ### Title: Set the data generation population model underlying an object
> ### Aliases: setPopulation setPopulation-methods setPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("simBeta")
> ### * simBeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBeta
> ### Title: Create random beta distribution object
> ### Aliases: simBeta
> 
> ### ** Examples
> 
>     b11 <- simBeta(1, 1)
>     run(b11)
[1] 0.7344913
> 
> 
> 
> cleanEx()
> nameEx("simBinom")
> ### * simBinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBinom
> ### Title: Create random binomial distribution object
> ### Aliases: simBinom
> 
> ### ** Examples
> 
>     b55 <- simBinom(5, 0.5)
>     run(b55)
[1] 2
> 	summary(b55)
[1] "Random Binomial Distribution Object."
[1] "Number of trials is 5."
[1] "Probability of success is 0.5."
> 
> 
> 
> cleanEx()
> nameEx("simCauchy")
> ### * simCauchy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simCauchy
> ### Title: Create random Cauchy distribution object
> ### Aliases: simCauchy
> 
> ### ** Examples
> 
>     c02 <- simCauchy(0, 2)
>     run(c02)
[1] 2.20504
> 	summary(c02)
[1] "Random Cauchy Distribution Object."
[1] "Location parameter is 0."
[1] "Scale parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simChisq")
> ### * simChisq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simChisq
> ### Title: Create random chi-squared distribution object
> ### Aliases: simChisq
> 
> ### ** Examples
> 
>     chi5 <- simChisq(5)
>     run(chi5)
[1] 2.424343
> 	summary(chi5)
[1] "Random Chi-squared Distribution Object."
[1] "Degree of freedom is 5."
[1] "Non-centrality parameter is 0."
> 
> 
> 
> cleanEx()
> nameEx("simData")
> ### * simData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simData
> ### Title: Create a Data object
> ### Aliases: simData simData-methods simData,ANY-method
> ###   simData,SimSet-method simData,SimModelOut-method
> ###   simData,SimRSet-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 200)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "No"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
               y1          y2           y3           y4           y5
1   -0.8045405678 -1.07615375  0.057008974 -0.902462922 -0.420303205
2    0.1846928903 -1.52519893 -0.596848908 -0.360271862  0.655075424
3   -0.9818489653 -1.00020156 -1.872460732  0.547424678  0.455643551
4    1.5595324860  0.98242927  1.129591494  1.133175506  0.771936669
5    1.1845695532  1.29080775  1.312506730 -0.614798923 -1.246842377
6   -2.4256570718 -0.52391592 -2.119384992  0.801634881  0.447980202
7   -0.8026409861 -0.01211317  0.886817943  0.874982013  0.264254397
8    0.0563541774  1.26607638 -0.572218116  0.960753031  1.193425123
9    1.4677564715  0.51392041 -0.801413687 -0.485506296  1.285396956
10  -0.2799641994 -0.93132978 -0.102089434  0.318816637 -1.065786453
11   1.1792430190  1.32162096  0.774606605  1.177173143  0.997041766
12   0.2512034453  0.06410751 -0.103496897  0.112998515  1.030275697
13  -0.5563709849  0.67445625 -0.824812638 -1.216554530  0.178167961
14  -1.7843904375  0.36259070 -1.175083029 -1.812722455 -3.445337824
15   1.8844962672 -0.52205666 -0.442225197  1.403045471  0.909652448
16  -0.9452810102 -0.62387834 -0.598349054  0.507410773  1.772555524
17  -0.0831099570  0.47046975  0.001881615 -0.684020271  0.600954470
18   0.0667599058  2.43207667  1.118568015  0.128168047 -0.759673520
19   0.0624300206  0.98647272 -0.269307069  1.547295847 -0.375973318
20   0.3418543450 -0.62490267  1.542665030 -0.535117264  1.106608185
21   1.1985632899  1.64210058  1.382428213 -1.009453441  0.262620519
22  -0.4294336414  0.51578927  1.489116211  1.073752569  0.686141945
23   1.4200746408 -0.52870595  0.120453095 -0.224536426 -0.155962968
24  -0.0705158002 -2.01187265 -1.466254278 -0.516334770 -2.101005185
25   1.3465994213  0.60673251  0.878034808 -0.444133582  0.161716811
26  -1.6017729664  0.05337596 -1.028983927 -0.120399156  1.479385138
27   0.4261412395  0.47207405 -0.760103948  0.564006789 -1.367508121
28  -0.2861057055 -0.70022762  0.212329374 -1.088102173 -0.935558478
29  -0.6774881190  0.42716566 -0.984082865  0.031142318 -1.051034032
30   0.9965878126 -0.44682030 -0.065989857  0.757599491  0.133966644
31   0.6690459148  1.98420225  1.435822722  1.633619512 -0.474452981
32   0.9584993506  1.49351309  1.288455423 -1.539705118 -0.355642036
33   0.1559852255  1.10912317  0.392489723  0.935602005 -0.058764218
34  -0.3086738117 -0.15275306 -0.426789831  0.194940236 -0.036323861
35  -1.7789568229 -0.98729507  0.068901395 -1.217656769 -0.696235716
36  -0.5865292974 -0.35461815  0.237837966 -0.099006066  0.126147956
37  -0.0900499230 -0.68642407 -0.785618330 -0.397217992  1.353802246
38   0.8217290574 -0.08617487  0.766121687 -0.546177050 -0.488701706
39  -0.2473621503 -0.33824834  1.306692499  1.598719049  0.448719261
40   0.7983910651  0.42456011  0.324473731  0.051228612  0.280284611
41  -1.7603689925 -0.17502680  0.636793969  0.686794776  0.965569964
42  -0.9235552750 -0.61617026 -0.384744863 -0.851671459 -0.058583975
43   0.8035345795  0.56088663 -0.263319249  0.754475137  2.033251767
44   0.3159403170  1.43200531  0.576236087 -0.529733049  0.192023403
45  -0.9343279406 -1.97436664 -0.070511142 -0.052742647 -0.164001262
46  -0.3556720991  0.37385555  1.287415951  0.427171005 -2.407145230
47   1.0826342292 -0.14211513  0.539715172  0.835172718 -0.077930462
48  -0.4128817647  0.99913523  1.314070137  0.728565750  0.382448273
49  -0.2157477195 -0.08399579  0.300039152 -0.405477056 -1.002169861
50   0.0619598370  0.10797140  0.213652275  2.446380196  0.397848746
51   0.2265662511  0.14138723  0.249285474 -0.196041332  0.872641544
52  -1.0308668478 -0.53998194 -0.220668169  0.198722579 -0.142478281
53   1.2684252196  0.39667291 -0.881515883  0.486765092 -0.492598325
54  -1.3671094745 -1.43683369  0.863288621 -0.054377978 -2.633850400
55   0.8681587718  0.18662850  0.886601631  2.102684710  0.585945042
56  -0.9306844795  1.71026113  1.650561104  1.847472340  1.439959863
57   0.8775331332  0.24194873  1.423436446 -1.670377316 -1.577584671
58  -0.6623350406 -0.70034460 -1.527115423  0.678702769 -1.585447109
59  -0.3114747365 -0.39640737  1.345515884  1.168227022 -0.064305301
60   0.4693003554  0.14868310 -0.309373532 -0.644550315 -0.222430918
61   1.2892242893  2.28783246 -0.030108233  2.319081697  2.371326500
62   0.7473376784 -0.86750928  0.572901489 -1.397225560  0.947577450
63   0.1075219190  0.23528599  1.437672545 -0.395683617  0.343749379
64  -0.9973491594  0.28584536 -0.403692843  0.063307132  0.507613256
65  -2.3728066858 -0.12220489 -1.354928719  0.340955897  0.515665189
66  -0.2500954183  0.98076769 -0.718728765  0.167447035  1.083731310
67  -1.7929149185 -0.54390514 -0.728723259 -0.963357244 -1.668881689
68   1.7769347604  2.40088430  0.404735210 -0.086789607 -0.039117880
69   0.2179779459  0.64516450 -0.101492435 -0.901905282  0.614526647
70   3.1339534228  1.26386491  1.270944654  0.330862280  1.352746038
71  -0.1259520428  0.19267403  1.246725188  0.845079971  0.699984832
72   0.0405485247 -0.52290120 -1.489294968  0.610526395 -0.661020996
73   0.4754008366  1.02404482  0.897144876  0.058166975 -0.300577340
74  -2.6895868084 -1.59264220 -1.223079580  0.344187484  0.512318372
75  -0.5459615881 -1.94432565 -0.252799729 -1.579852478 -0.616204573
76  -1.1562860290  0.53758634 -0.337650835  1.517225228  0.379865088
77   0.0461554357  1.83816492  0.349334111 -1.529994006 -1.058638868
78  -0.8395362886  0.77015046 -0.941009799  0.261897908  0.930996729
79   0.7735181418  0.28267314  0.892567365 -1.215600937 -0.010304868
80  -1.4055208647 -0.52048203 -0.520647633  0.044516709 -0.157260934
81   0.0877875454 -1.18856748 -0.590889118 -0.082663679 -0.797156263
82  -0.5602149639  0.44049776  0.403835171  0.466589138 -0.377065078
83   0.3477175853 -0.06490563  0.284933429  1.689456383  1.168282918
84  -0.5967279049 -0.86522915 -0.654388508 -1.123550593 -1.395703886
85   0.0067799214  0.84708257  1.138194028 -1.112129607  1.463993425
86   0.3721907535  1.01516030  0.652587552 -1.520379797  1.463838250
87   0.6847116122  0.56301423  1.810765506  0.481769335 -0.151947621
88  -0.0312676297 -0.72967448 -1.144571021  0.905538519  0.648209062
89   1.0223588579 -0.62933490 -0.238992060  1.486648564 -0.672133513
90  -0.8816612780 -0.12459415  0.171656989  0.394706171  0.930677659
91   0.4776656414 -1.35812046  0.318748265  0.100394651 -0.901169766
92   0.5619667249  0.28464579  1.076582903 -0.342022673  1.617624464
93  -0.4304015712  1.27001996  1.168457444  1.558340293  1.243160740
94   0.6634143823  1.34224632  1.356474398 -0.264195189 -0.447691467
95   0.4262455962  0.15540357  0.190310662 -0.295421796  3.519532872
96   0.3247077982  1.38678797 -0.768177285  1.039855697  0.143230420
97  -2.5688579778 -1.45764532  0.404043730 -0.647108311 -0.921581685
98  -0.3711483431 -1.57481049 -0.516172155  0.770821178  0.179842312
99  -0.5181913491 -0.46087164 -1.423157350 -1.225169114 -1.659354417
100 -0.3241931735 -0.27499555  0.061762260  0.026207235 -1.025488759
101 -1.2608123820 -0.70465244 -0.507725421 -0.134951402 -0.713208467
102  1.6045847696  0.60919145 -0.697583513 -0.344886746 -0.403963584
103 -1.4485685714 -2.27845518 -0.805216609  1.013183871 -0.074574886
104  0.2339305241  0.46845124  0.140785418 -0.155752781 -0.573181480
105 -1.8487178826 -1.05105968 -0.681699931 -0.175699031  0.950311805
106 -0.3282497066  0.65716891  1.171006577  0.934752511  1.930606581
107 -0.4343939862  1.31928628  0.448076578  1.392597949  0.391587472
108  0.0674125565  1.01929513 -0.025080675  1.028205339  0.944496848
109  1.4957467584  0.37478111  0.304887067 -0.873472484  0.533807642
110  2.0396040925  0.30108835  0.612602853  1.809915796  0.430701475
111  0.0836251337 -1.31710167 -1.475631644  1.465978243 -0.789000308
112  0.4471490248 -1.01867806 -0.495487362  0.212428221 -0.837182507
113  1.0422762097  1.12828005  1.340459378  1.226758030 -0.279993309
114 -0.8191229322 -0.13248823  0.534646102 -0.705367653 -0.677337795
115 -0.3305742687  0.61397339 -0.652812183  0.189087390  0.593848304
116 -2.1377059370 -0.48465132  0.368575054  0.132528125 -0.035314889
117 -0.2090894150  0.51027631 -0.285563244 -0.207521468 -0.639311014
118  0.8119503946 -0.33094260 -0.878902424 -0.472169073  0.233768693
119  1.0037904106  0.94540176  0.816627915 -0.048920330 -0.362574437
120  0.2201993071  0.15363391 -1.407204502 -0.508200123  1.504739911
121 -0.6192998951 -1.03481872 -1.154258093  0.715174505  0.347166193
122 -0.2059414972  0.53231605  0.338132464  1.596363103  2.785334795
123  0.4925457037 -0.57747645 -1.461444127  0.694848527  0.118499613
124  0.6252206657  1.09499760  0.472616815 -1.177192123 -1.401456154
125 -0.7788719599 -0.72244028  0.640398289  0.259634607  0.270596332
126  0.2753483074  0.97121188 -0.431707474  1.574931372 -0.270360531
127 -0.7992852453  0.64738850  0.486385041 -0.151085350 -0.722390099
128  0.2360446187  0.98780741 -1.532784374 -0.708819152  0.493995339
129  0.1946726104  0.11794660 -0.507478459 -1.207877217 -0.147378071
130 -0.7543560973 -0.19358829 -0.634660190  0.036005974  0.323987148
131  0.0364199431 -0.53394647  1.065937731  0.676364897 -0.219239440
132  0.8016260454  0.54404162 -0.389829562 -1.768305517 -0.230229594
133 -0.1410602527  1.25318139  0.462606717  0.153329550  0.176545122
134 -2.3269769264 -0.54785558 -2.053942030 -0.294801011 -1.610932747
135  0.5857480462  0.11162428  0.378092033 -0.850793701  0.988828103
136 -1.4985027092 -1.96261898 -0.640851643 -0.072579774 -0.014489374
137 -0.1646307300 -0.23488959 -1.501433465  0.009095024  0.420191131
138 -0.5618487081 -0.02751099 -0.482743297 -1.187932677 -0.517261379
139  0.4574846794 -1.27755036 -0.014418680 -0.990067363 -0.621959638
140  0.4427581879  0.48773647 -0.321451474 -0.193359071 -0.787832290
141 -2.8811023589 -1.42864914 -0.564206074 -0.628869108 -1.153407685
142  0.5270371745  1.36502363  1.935619345  0.197721738  0.723895619
143 -0.5481022617 -0.90491534 -2.243432508 -1.306192600 -0.361475697
144  0.2865956512 -1.00185782  0.175457323 -0.441685344 -0.383632346
145 -0.2988841089  0.13693426  1.005093026 -2.565371307 -1.796977620
146 -0.6471168107  0.68646757  0.370749527 -1.016599170 -0.771521601
147  1.5920708177  1.14827500  0.219847298  2.271895307  2.249293223
148 -0.3537815508  0.39353090  0.256750895 -0.209955942  1.175782254
149 -0.0951342086 -2.06625826 -1.532156850  0.693221919 -1.530572183
150 -0.9645588686 -2.12716027 -2.798450984 -0.503440256  0.143875513
151 -1.2920054024  0.91615740 -0.729809290  0.787663374  1.787693060
152 -0.8148269475 -0.03079735 -0.117361701  0.443020711  0.168357382
153 -1.0294529925 -0.50403937  0.372372788  0.693288619 -0.225272356
154 -0.1924206082 -0.09913424 -1.320466904 -0.509336732 -0.694754938
155 -2.5265702502 -1.27944370 -1.352037582 -1.148718189  0.204044661
156 -2.2110491362  0.14570621 -0.919234698  0.036490939 -0.579347648
157  2.4735564571  0.61652626  0.531788231  1.488814554 -0.226698058
158  0.2162123854 -0.54914264 -0.708117382 -0.964431035 -0.007118478
159  0.4181098432 -0.21523175 -0.374396776 -1.574864931 -2.193600951
160  0.8921263490  1.94720865  1.199808905  1.320595024 -0.023451999
161  1.4403901104  1.88825753  1.071807815 -0.258173610 -1.654814358
162 -0.3559374303 -1.36924575 -0.552086500  0.443121082  0.381188528
163  0.1852145141  1.37703245  1.442328834 -0.113670391 -0.510448063
164  0.7791536668  0.81928588  0.777994066  0.893991156  1.232566848
165 -0.4164688586  1.38355608 -1.985362180 -0.301342496 -1.245670312
166  2.0643736589  1.50892036  0.042081009  0.974514474  1.669113883
167 -0.0288257864 -1.10816814 -0.304657714  0.372368640  0.694684849
168 -0.5407691203 -1.21291136 -1.897155155 -0.806299057 -1.751715398
169  0.2195516909  0.73376002 -0.462299695  0.031618946 -0.174979246
170  0.0600798631  1.27659313  0.945174591 -0.996394346 -0.309409682
171  1.5526031710  1.99516318  1.641048935  1.986685756  1.257980323
172 -1.0491658530  0.57119059  0.311701320 -0.186224123  0.922032974
173  1.2005481525  0.23320060  0.613288649 -0.621743377 -0.253861583
174  0.8738445025 -1.13335374  0.197886868  0.115849461 -0.643024436
175  0.2261905333 -0.05979957  0.755267281 -1.436909836 -1.901562877
176 -0.5761764146 -0.39440018  0.911852765 -0.612949986 -0.191230765
177  1.0775405715  0.35572783 -0.019866615  0.242001452  0.983951606
178  1.5401987455  0.94737101  1.899713702  0.202911743  2.230571411
179  0.5955688479  1.29250324  0.409245640  1.887993553  0.920794012
180  0.6880648895 -0.19001521 -0.470446371  2.255087920  1.249070024
181 -1.4568256022 -2.15306330  0.082900476  0.404880890 -0.849702160
182  0.8180751554 -0.12494065 -0.226433199  1.039108508  1.264534294
183  0.0085438960  0.95015610  0.746740187 -1.199500750  0.065679066
184 -0.8940668214 -0.89639078 -1.395100746 -1.851574470  0.049340769
185  0.3770063973 -0.82598548 -0.077718026  0.609599278  1.228258471
186 -0.7713336559 -0.87279879  1.400998933 -0.555717355  0.131552517
187  2.1916399164  1.67997412  1.993896837  0.036039639 -0.433074625
188 -0.7644027282 -0.50832439 -0.744513922 -0.632456117 -0.201423058
189  1.0818416884 -0.71917476  1.372392496 -1.310306184 -0.758836981
190 -0.7123867784  0.32291498 -0.370940781 -0.492459708 -0.908119073
191 -0.7189526528 -1.27177778 -0.176011101  0.640347511  0.103736091
192  0.7583885763 -0.09557949 -0.692839578  0.531354179  0.215634518
193 -0.9704287286 -0.52589547 -1.472212149 -0.786149409  0.777841368
194  1.0111685017 -0.46876166  0.714326936  1.362278118  0.769143961
195 -0.9182525115  0.24633169 -1.615503809  0.346701771 -1.458981555
196 -0.9252375184  0.14194143 -0.068448638 -1.563162896 -0.991772639
197  0.2406860576  0.28524346  0.205569334  2.106344888  1.000259344
198 -1.4337577825 -0.14697860 -0.530798010 -0.407106864 -0.991733735
199 -1.0447500775  2.16919283  0.684209652 -0.615469883 -0.351618750
200  0.0003911315 -0.56261685 -1.389186009  0.482855829 -0.419598035
               y6
1    0.6180292594
2    2.3837518591
3   -0.5212269270
4    0.8620270188
5   -0.5963206302
6    0.5078609421
7    0.7560059736
8    0.0755523079
9    0.3437498957
10   0.8277790695
11   0.6519951487
12   0.2183530296
13  -0.7622672194
14  -1.0837788485
15   1.3074069668
16  -0.2938138623
17  -0.3715209234
18   0.8235061437
19   1.3636021679
20   0.5659299001
21   0.2328136550
22  -0.1785960274
23  -0.3303716169
24  -1.8632142568
25  -0.0472791943
26   0.9918544612
27   0.0365857421
28  -3.1384202905
29   0.3244417113
30   0.3115047955
31   0.2355117511
32  -2.2599809462
33  -0.9697594710
34   0.5124384949
35  -0.9466894918
36  -0.9987866543
37  -0.9858805748
38  -0.7061911584
39   1.6712780213
40   1.2013057555
41  -1.0177945028
42   1.8121359903
43  -1.0758238986
44   0.2602691534
45   0.4160715843
46  -2.1811373349
47  -0.7659919354
48   0.0905282800
49   0.9539121615
50   0.3284151719
51   0.3129508912
52  -0.7349192375
53   0.5990398139
54   0.0706749722
55   1.1537899816
56   2.2754967491
57  -0.7770942330
58  -0.4176790163
59   0.5578826036
60   0.0132791538
61   1.4557820236
62  -0.1614578505
63   1.0553020077
64   0.6572954141
65  -0.0065962895
66  -0.5011396666
67  -1.5871881961
68   1.4584604520
69   0.1442724592
70   1.4164788765
71  -0.9393140531
72  -0.8432634726
73   0.3107646599
74   0.8787032268
75  -0.1206297159
76   0.2355626325
77  -1.4341862530
78  -0.1780377153
79  -0.4228047777
80   0.1800367947
81   0.2762923915
82  -0.9192347075
83   1.3293771747
84  -1.5136484447
85   0.0532982808
86  -0.6395803272
87   0.9024505935
88  -0.8759472927
89   0.5248812368
90   0.5872486206
91  -0.8271764917
92   1.6762625941
93  -0.1260907029
94   0.1758749166
95   2.4085273170
96   0.1276953164
97   0.0387120748
98  -0.8022817056
99   0.3441005526
100 -0.3739782644
101  0.8174960980
102 -0.5973590354
103 -0.0829278468
104  0.5235849919
105  0.1649040059
106  2.7676406794
107 -0.2244604105
108  0.6392133680
109 -0.2851444833
110  1.5954968076
111 -0.5337575235
112 -0.1714677143
113  1.3230356725
114 -0.8265967191
115 -1.2505294045
116  0.5711619042
117 -0.4603102987
118 -0.4902306235
119 -0.3597381126
120 -0.6788897951
121 -0.2960524307
122  0.3744169193
123 -0.1330344756
124 -0.3388926172
125 -0.0736955572
126  0.7569598115
127  0.2420747996
128  0.3718613643
129 -1.2011266096
130 -0.0861716439
131 -0.7827238749
132 -1.3341324966
133  0.2405624650
134  0.7061373572
135  0.0237955037
136 -2.0122030071
137  0.2569017365
138  0.6451132878
139 -0.1854000475
140  0.1425078194
141 -1.0702872302
142 -0.0005046481
143 -1.3558555533
144 -0.5057265862
145 -0.9847451137
146 -1.6523504906
147  0.9426045614
148 -1.1921163188
149 -0.6607215400
150 -0.3718921579
151  0.3472952580
152  0.2766987981
153 -0.5906483904
154 -0.9348732590
155  0.0992055180
156 -0.8121355435
157 -0.8477839774
158 -0.4948894153
159 -1.6476829367
160  2.2083330530
161 -0.7717252908
162  0.4897595541
163  1.8916725586
164 -0.9253124870
165  0.0659688199
166  2.6450185696
167 -0.6547131876
168  0.4594654416
169 -0.9304610979
170 -0.1384007199
171  0.8817207466
172 -0.1425073228
173  0.6730545945
174  0.2774013733
175  1.0687579388
176  0.7227473027
177  0.5396272999
178  1.5551032352
179 -0.9594598042
180  1.3434623849
181 -0.9979190227
182  1.2007442189
183  0.3160171841
184 -0.9341570305
185  0.7917325900
186  0.0265509200
187  0.4427262353
188 -0.2408535448
189 -1.4022884237
190 -1.5768673396
191  0.7078508957
192  0.9055963979
193  0.0234449447
194 -0.0366973321
195 -1.4762230728
196 -0.8230762289
197  1.9785351080
198 -0.5896739751
199  0.8212020981
200  0.3500977547
> 
> # With Misspecification Model
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> SimData <- simData(CFA.Model, 200, misspec=CFA.Model.Mis)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "Yes"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
              y1           y2            y3          y4            y5
1    0.310020825 -0.345899382  1.8123879306 -0.34326028  1.0658688701
2    0.335506346  1.318523686  0.8434819458  0.44801752  1.5461676121
3   -1.132483101  0.217147334 -1.0254883629 -0.15853308  0.7433163068
4   -0.419300107  0.134239695 -0.0447513423  1.12840822  1.0523633318
5   -0.028513223 -1.652978377  0.0750363919  1.65883057 -0.0926169753
6    0.006318933 -0.704186687 -1.8147112214  0.21886781  0.3215200833
7    1.135431363  0.946516333  0.7683064905  0.72878296  1.9804177373
8   -1.143169040 -0.038772706 -1.1061440089  0.27112284  1.3879963966
9   -0.984405564 -0.605474580 -1.4498906591  0.63892629  0.3163259710
10  -0.806225011 -0.441869768  0.3230280450  0.23400418  0.1452400548
11   0.064939093  1.459169471 -0.1873405497 -0.21831465  0.1654414922
12   0.624647070 -0.922153549  0.1992993077 -0.98803796 -0.4997015596
13   0.824110335  0.025799864 -1.3263230766 -0.56434188  0.4097367384
14   1.707908654  3.319916841  1.1284675124  1.41092753  1.6135782618
15  -0.510020221 -0.128291052  0.1570524387  0.67283472 -0.3897724573
16   0.417899513  0.225044632 -0.3907797890  0.15179286 -0.5613695593
17  -0.677631690  1.566427752 -0.4273748437  1.00158371  0.7982875014
18  -1.448297929 -1.427924286  0.3367410375  1.58999488  2.2737916019
19  -0.954369496 -0.017401046 -1.3185728288 -0.74733791 -0.0439828180
20  -1.546106084 -0.256509229 -1.1225857814  0.17634875 -1.7941212719
21   0.380444741  0.002802138  1.0886217239  0.06716056  0.4480224812
22  -1.022804130 -1.834722241 -0.3316122024  0.12112624  0.5800292571
23   0.545140977  0.759815240 -0.2036692683  0.27951375  1.0734314663
24  -1.105248773 -0.660164244 -0.7784816839 -0.01494612  0.9156364281
25  -2.454260384 -0.906499544 -1.8639188052 -0.06114785 -1.3447165032
26   0.553796141 -0.860783346 -0.0803869221 -1.43932926  0.8751117999
27   3.580683474  2.316965063  3.3156422945  1.01161425 -0.0786741743
28  -0.004594863 -1.047200913 -1.4244510069 -1.56031918 -1.1000025407
29  -0.229204737 -1.121323068 -1.3735852812 -1.07192931  0.5521645152
30   0.722518830 -1.087937294 -0.5839266867 -1.95534592 -0.7950657367
31   0.384642783  0.274749618  0.5343877902 -1.08081056 -1.8473082870
32   0.990200311  0.065109814  0.1227527518  1.40210684  1.2310813072
33   0.953752961  1.264542763  1.6624161825 -1.71575853 -2.0126393959
34  -0.321175077 -1.700880116  0.8899653825  0.43096654  0.1438285686
35  -0.720529110 -1.124595226 -0.3300756642 -1.26151331 -1.0656456027
36   0.349235743  0.003848763  0.6967217972  0.31041680 -1.2417759905
37   1.084215481  0.950267453 -0.1654479394 -0.99811095  1.7849912435
38   1.346700863  1.636870727  1.3214568840  1.01576001  2.1134519551
39   0.523596496  1.486208591  0.3285972831  0.45080607  1.0965664833
40  -1.096155117 -0.178316826 -0.4279677418  0.24672744 -0.0796817059
41  -0.106632369 -0.343155433  0.2271187826  0.01824684 -0.3882349371
42   0.356350567  1.009448722 -0.4336542736  0.81804715  1.2168117040
43  -0.762939689  0.301448554 -1.3914705353  0.81108162  0.8484466416
44  -0.645079376  0.982601628 -0.4779978529  0.87920064 -0.3662172535
45  -1.080070602 -1.963256822 -1.8290507922 -0.16386395 -0.6669719470
46  -0.129377786 -0.616315991  0.2455551820 -0.02188195 -1.0999850790
47  -1.332409795 -0.422345195 -0.7523721373 -0.56154346 -0.0005282294
48  -0.245046996 -0.622011189 -1.6844861519 -0.72164378 -0.7595069789
49   0.133878212 -0.241536197 -0.2034534062  0.44910944 -1.0979554760
50   0.217767268  1.030060934 -0.6546208444 -0.71191811 -0.6372109332
51  -1.017531821  0.139300186 -1.6566711792  0.62732286  0.0735219340
52   1.223895322  1.605632366 -0.2721916733 -0.48210568  0.1675932996
53  -1.194715618 -0.395240236 -0.6629751999  0.13835639 -0.1998861957
54  -0.378058530 -0.870606030 -0.1106753262 -0.59145306 -0.3685266495
55   1.876800554  0.727320311  1.9305231574  1.01504763  0.2931352770
56   0.355915431  1.667392945  2.3279705788 -0.26699834  0.0866130640
57   1.489016123 -0.034359524  1.3900005346  0.19079917  0.4579506893
58   1.551939432  2.783109720  2.0409089744  0.66442398  0.4849478164
59  -0.796405070  0.248664914  0.1218659961 -1.47614438 -0.6056958232
60   0.738119247  1.511616216  0.4036966819  1.70884248  1.9456741316
61   0.600909613  0.757293945  1.8606126528  0.93192433  0.0655582448
62  -2.086548557  1.176546820 -0.5217724060  0.96839945  1.0843332762
63   0.186272074 -0.255046224  1.4183597399  1.23321978  0.2331142654
64   0.870318211 -0.532617993  0.9144902783  0.01282129 -0.3950214490
65   0.425995933 -1.030588241  0.5298933979 -0.81731179 -0.5095705181
66  -0.536749385 -0.717112975 -0.9181549561 -1.00607776 -1.4892026372
67   1.808162990  0.086678628 -0.0669929636  0.75778658  1.3097465471
68   1.689130859  0.659531105  1.4719781696  0.17698520  1.7114730819
69   1.508067710  0.905174961  1.3952507375  2.58267557  1.8291853243
70  -0.479009734 -0.306830661  0.0039804251  0.38321706  0.3566023354
71  -0.313156686 -0.282733669 -0.4253655394 -0.45621797  0.9579749453
72  -0.815742545  1.331070192 -0.9000145316  0.65572984 -0.0992401354
73   1.103897692  0.890822757  0.0065677935  0.40748473  0.8262161012
74   2.527327086  0.195943706  0.9443848824  0.83999678  0.4541195869
75   0.024563063  0.161177670 -0.0473171338  0.32240688  0.8908071596
76   0.224447118  1.618431556 -0.0306077669  1.44543386  0.9465477106
77  -0.645678781  0.953307884  0.4754561313 -0.91420330  0.1866399554
78   0.439363088  1.065649523  0.1448226520  0.06345299  0.7179600861
79   0.840300155 -1.068169121  0.5573872841  2.16863511  1.4360811986
80   1.333975819  2.055210240  1.7422302654  2.94637669  3.3857892054
81   0.185659697  0.313298386 -0.7198966967 -0.21374096 -0.0065658993
82  -0.873199827  0.870936040 -0.3725563785 -0.46782962 -1.9722932193
83  -0.877563902  1.271416152 -1.5833880559  0.18237317  1.6709882743
84   0.423650826 -0.456248467  0.9382664113  0.53649243 -0.8440517746
85   1.269017422  1.301030312  0.0409185482 -0.38809513  0.3325878724
86   0.192015768 -0.924334958 -0.0766083538  0.85586397  1.5025212217
87   1.425034782  1.308555629  1.1560905497  0.38540900  0.4704581008
88  -2.256058725  0.421607992 -0.8865469555 -1.04376663 -1.3204611881
89  -0.360712062 -1.986901982  1.0589359722 -1.41170033 -0.9545403396
90   0.499500007  1.472538068  0.4368652634  1.35209314  0.9142566271
91   0.346788098  0.706884928 -0.2220860532  1.70616057 -0.4868957247
92  -1.755400196 -1.052392031 -0.1847246788  0.52352018 -1.2007944062
93  -1.359293193 -1.063624682 -1.5598815512 -0.57795509 -0.0467322012
94  -0.681215793  0.975981847 -0.8765188813  0.10774948 -0.5245360856
95   0.415155160  1.196912368 -1.1744541894  0.93086925  0.4216209188
96   1.668478153 -0.804207137  0.3723982986 -1.00171621 -0.9257819043
97   0.774591639  1.117549634  1.1579448572  1.36948984 -0.3660588271
98   0.877845451 -0.124911365  1.3260626963  0.31847139 -0.8350835573
99   0.086563679 -1.049607585  0.8182820309  1.16172348  0.1696784570
100  0.449248762  0.612313555 -0.9951094881 -0.15108928  0.2894140133
101 -0.324724926  0.547351535 -0.2617464621  0.68505156 -0.6607950192
102 -1.225456248  1.418832944  0.2148873606 -0.06700420 -0.7945985380
103  1.261283737 -1.059976631  0.2343420133  1.87926064  1.1404341627
104 -1.209219278  0.006124173 -0.9299516027 -0.84334517 -0.7220325464
105 -0.334076011  0.259168682 -0.4534424000  1.86145978  1.1846433535
106  0.611838513  1.441873511  0.2369235880 -1.92553327 -0.6608053861
107  0.194655465 -0.013920609  0.6336421091  0.46744421  1.2537953115
108 -1.834724698 -1.986610015  0.4690023788  0.84731488  0.5760924622
109 -0.323513484 -0.723148255  0.0252457954 -2.50320607 -1.0906622703
110  0.259518175  0.634316908  1.0051704085 -0.03393793 -0.6312711582
111 -0.741174450  0.918996407 -0.5229105304 -1.05494563 -0.7449630659
112  0.816567967 -0.106633949  1.1519904787  1.93755128  1.0981347267
113  0.272954017 -1.221790665 -0.5193445903 -0.14370002 -1.3881039054
114 -0.295394606 -0.817859472 -1.6829758553 -0.94336763 -1.2633579354
115 -2.562876296 -1.816797319 -0.0623438845  0.61543898  0.3110845474
116  0.225518018 -1.412183667 -0.3894308618 -0.68406941 -0.0241436787
117 -0.484634898 -0.249610035 -2.3769399391 -0.22626843  0.8532176413
118  2.438942114  1.405686725 -0.0001931225 -1.60115105 -1.8856807379
119 -0.729062287 -1.319052054 -0.8630850052  0.70631959  0.1738192269
120 -1.884152366 -1.096903823  0.3505628172  1.59751727 -0.4909781653
121  0.038852313  0.839307608  0.5841643102 -0.40186853  0.3399992839
122  0.680077452 -2.751647722 -0.4598583390 -1.27626500  0.3984148043
123 -0.319360622  1.333786017 -1.6795232308  0.08256865  0.7256875659
124  0.057877329  0.101616604 -0.2312194698 -0.69617734  0.7070432774
125 -0.096521591 -0.978436413 -0.7103392467 -0.30948545  1.5961913534
126 -0.881919088 -2.471881819 -1.6924686660 -0.54861905 -1.0077949269
127  0.957682744 -0.748708839 -0.8175367568 -0.27324910  0.3795089673
128 -0.978403248 -0.562565395  0.9323577319 -0.20592448 -1.4483778402
129  1.419153877  0.440696624  1.6721581714 -0.31674435  0.2690737707
130  1.882379450  1.265439120  2.5692366002  0.62520930 -0.0624739986
131  1.340161136  0.839420057  0.1788998136  1.24980927  0.9319578708
132 -1.575939074 -0.199646107 -0.5197879911  0.12607981 -1.5411633234
133  0.058309669 -1.260602438  0.1681418943 -0.64405472 -0.7865100270
134  0.296933136 -0.150678466 -1.2746839915  0.31034817  0.0366466437
135 -0.693388738 -0.718227618 -1.3051681797 -0.36726940 -0.8445595918
136 -0.308218025 -1.119301689 -1.2559067205 -0.64498175 -1.5403772733
137  0.620746997  0.171852719  0.6003464279  1.16351656 -0.4113394236
138 -1.518029973  1.183800335 -0.9499120939  1.27387921  0.1404349714
139 -0.269172065  0.499832372  0.6066276262  0.68068720  0.0940217511
140 -1.502733844 -1.360555214 -0.6183211399  0.54127408 -0.9012056909
141 -0.020416472 -1.226535287 -0.3413941502  0.14827995  0.2108122522
142 -1.953981783 -0.536352278 -2.0728859820 -1.14418724 -0.0360589293
143 -0.306873504 -0.121545450 -1.2602347309 -0.91229739 -0.3792384843
144  0.352855250  2.110790947 -0.2296185213 -1.36432980 -0.2547739540
145  0.697810233 -1.073113478 -0.8101301793 -1.38913758 -0.0132664712
146 -0.986796732 -0.526643949 -0.6826953259 -0.65870360 -0.2163805208
147 -0.367073873 -1.252325823 -0.6596516713 -1.23918100 -0.6456142352
148 -0.666981071 -0.435761193 -1.3051235612  0.16620764 -1.7731746027
149 -1.513298163 -1.212897149  0.0812464639 -0.72059439 -1.0124850510
150  1.366725110  0.799851423  2.1277018666  1.10114756  1.1999324078
151  1.472352551  0.350094503 -0.3975231484 -1.72335542 -0.8860511227
152 -3.225521488 -1.502301829 -0.1945819575  0.45456842  0.5993679387
153 -0.696713959 -1.568049604 -1.2425350014 -1.32537877 -0.4879251578
154 -1.481504374  0.528035886 -0.5311579798  0.64499291 -0.6476077302
155  0.968535243 -0.771431792 -0.7506232091 -0.56469778 -0.9148226818
156 -1.053187416  1.717186505  0.1654106674  0.03079016 -0.7602648909
157  0.778993449  0.849207393  1.0216461132 -1.02209601 -1.0202839093
158  1.112412017  0.560989806 -0.5632996624  0.99281891  0.2344852091
159 -0.072714216 -0.528981073  1.1785135910  0.96051928  0.0788777011
160  1.531018747  0.964043532  0.7985078776  0.60606083  0.8789754103
161  0.263295000  0.712091179  0.3759530945  0.50596058 -0.5903738719
162  0.270643763  0.309141429 -0.4313363115 -0.03922605  2.1062354053
163 -1.136576278 -0.218297560  0.6268599668  0.41803919  0.0072990871
164  0.712067502  1.174067257  0.3871139912  0.39601431  0.0105803098
165 -0.371149945  0.298834058 -0.6414699443  0.12665737  0.0001596950
166  0.073996407  0.987856629 -0.1873290142 -0.64834218 -1.2965939670
167 -2.670997958  0.084907403 -1.0293920035  0.03045715 -0.8115058757
168  0.457690997  0.857946321  0.2345793150 -0.83141933 -0.9885424355
169  0.316271934  0.017391844 -0.3037404630 -0.15739407 -0.9909986107
170 -1.058610617  1.425819365  0.1725383303  1.17334572  0.3302254592
171 -0.586841983 -0.918837667 -0.3706447445  0.29688265  0.2136294687
172  1.363404537  0.664327395 -0.7241515129 -0.89488673 -1.1198349413
173 -0.299745303 -1.293994605 -1.1925624593 -1.13457225 -0.4606250998
174  0.708855279  0.968223032  0.7469687944  0.50769475  2.1696284080
175  0.253813640  0.008947227 -0.6986818210 -1.04767162  0.1048269594
176 -1.050618135  0.539954565 -0.6750233672 -1.44127307 -2.0454589483
177  0.080006572  0.795198101 -0.2802539293 -0.93378636 -1.5863742852
178 -0.359397057  1.668350576 -0.9522843787 -0.16422353 -0.4293920611
179 -0.186890408 -0.494112989  0.4023205125  1.03245483  2.1203043917
180  0.760213665  0.582168896  0.6580121380 -1.27553708 -0.6982532924
181  1.100688270 -1.203045200  1.4473032596  0.06661078 -0.8552076777
182 -1.764941047 -0.493702830 -1.9189640641 -0.34482101 -0.8757530918
183  1.920160584 -0.289997827  1.3252699102  0.96785471 -0.3873156890
184  1.777218113  0.175780316  1.8060983945 -1.77624637 -0.4458384503
185 -0.267201307  0.973403813  0.8814153531  0.52575847  0.1496141960
186  0.384472102  0.421017516  1.6337727652  1.66977029  1.1117794962
187  0.039659775 -0.298574526  0.5388751670  1.42609702 -0.5350613825
188  0.810465525  0.105008075 -0.2799078603 -1.43031846 -0.2088758033
189  0.897928167 -1.558841238 -1.6997873710 -0.33525530  0.5318894214
190  0.016885559 -0.119480420 -0.7388971646 -0.35555522 -0.5224106424
191 -0.870455121 -2.470985149 -0.1124242064 -0.38267764 -0.2574371120
192  0.402901693  0.757590850 -0.7682410577  0.72470870 -0.3382878110
193 -0.903217760 -1.911822469 -1.1996956499  0.12983574 -0.5344953363
194 -0.951884425 -0.519802492 -2.2221336356  0.07206109 -0.9327954972
195 -0.447689422 -0.714894777 -0.7659633216 -0.17708854 -0.0383111363
196  0.270148190  0.629490041  0.1304935672  1.16528764  1.4121564451
197  1.254957799  1.143624256  1.2082239591 -0.58384469 -0.6034150352
198 -1.006868702 -0.322100650 -0.3027236776 -0.63627368  0.2386344547
199  1.398689981  0.311210388  1.3700804874  0.01873503  0.2302247049
200 -0.627349402 -0.574605609 -0.0256743851 -0.44229065 -0.4749974602
              y6
1    1.175134426
2    0.627126002
3    0.035694078
4    1.112114255
5    1.070418891
6   -0.153146894
7    1.497029050
8    1.036992556
9    1.662034834
10   2.480193623
11   0.370167479
12  -1.163791364
13   0.497050911
14   1.513958027
15  -0.142587921
16  -0.911124540
17   0.632192319
18  -0.152585402
19   0.824424126
20   0.134299972
21   1.387083215
22   2.636029973
23  -0.473402978
24   0.246518529
25  -0.220223737
26   1.175939279
27  -0.040298943
28  -0.669598642
29  -0.797097133
30  -1.527352970
31   0.459747584
32   1.704689203
33  -0.418726677
34  -0.629576676
35  -0.712407421
36   0.250300702
37   1.548788505
38   1.686635159
39   1.431915167
40  -2.043745281
41  -1.408122885
42  -0.504485670
43   0.028794479
44   0.724225850
45   0.247255402
46  -0.070575572
47  -0.793238227
48   0.312177493
49  -1.818990106
50  -0.738989116
51   1.672172809
52   0.531573385
53   0.125576295
54  -1.159728742
55   0.828999192
56  -0.056208313
57  -0.567794370
58  -0.401394187
59  -1.395769940
60   1.892355176
61   0.768374327
62   0.360648013
63  -0.349958844
64  -0.532169177
65   0.960414635
66  -1.605178424
67  -0.790515938
68   2.927389249
69   0.209258060
70   0.605851909
71  -0.020228323
72   0.547530499
73   1.453682623
74   1.185778670
75   0.228483191
76   0.304419015
77  -0.172814466
78  -0.358157326
79   0.693967373
80   3.066824852
81   0.271804989
82   0.233560724
83   0.988489261
84  -2.126022154
85   0.202165870
86  -0.328415710
87   0.718263422
88   1.100438525
89  -1.250608591
90   1.645328334
91  -1.033154285
92  -0.219962190
93   0.101486837
94  -1.163977545
95   0.658887950
96  -1.188970716
97   1.452529438
98  -0.445601751
99  -0.489187943
100 -0.179471944
101 -1.120728142
102 -0.207138982
103  1.123303303
104 -1.702257557
105  1.680593647
106 -0.854847152
107  0.327482561
108  1.272083691
109 -0.738112261
110  0.257527543
111 -0.358895006
112 -0.410836555
113 -0.263706751
114 -2.096444854
115 -0.344426265
116 -0.060382020
117 -0.912900448
118 -0.771780289
119 -0.531236992
120 -0.398104525
121 -0.045887654
122 -1.338170410
123  2.866117522
124  0.029145561
125  0.170026220
126 -1.701015736
127 -0.647351563
128 -0.021222006
129  0.073760671
130 -0.425954012
131  0.510419320
132 -0.823374162
133 -0.728487407
134  0.441768895
135 -0.364979494
136 -1.518055091
137  1.091770256
138  0.027827951
139  0.815276053
140 -1.163123373
141 -0.228748206
142  0.813166908
143 -0.330187674
144  0.515736233
145 -0.629125666
146 -1.008030844
147 -1.107332682
148 -1.678950073
149  0.729945450
150  0.320626879
151 -1.140350743
152 -1.085843852
153 -0.424726748
154  0.772831379
155  0.577895484
156  0.936042331
157 -1.490896300
158  1.254127913
159  1.172834901
160 -0.374668410
161 -0.181512252
162  2.125087633
163 -0.157814984
164  1.185896258
165 -0.063619338
166 -1.459841849
167 -0.715805430
168 -2.339688732
169 -1.740016820
170  0.194800367
171  0.993655421
172 -1.491317551
173  0.705392470
174  0.929783889
175  0.465881934
176 -0.246598654
177  0.379734636
178  0.707608218
179  0.244384889
180 -0.177180533
181 -0.019467529
182  1.058091911
183 -0.142583161
184 -0.863901628
185  0.686257325
186  0.918665536
187 -0.451879143
188  0.009160055
189 -0.911020288
190 -0.539468379
191  0.183052245
192  0.803107907
193 -1.618569427
194 -2.455909720
195 -0.606051616
196  0.684313334
197 -1.637075745
198 -0.089590054
199 -0.483292338
200  0.652379610
> 
> 
> 
> cleanEx()
> nameEx("simDataDist")
> ### * simDataDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simDataDist
> ### Title: Create a data distribution object.
> ### Aliases: simDataDist
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> #summary(Output)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("simEqualCon")
> ### * simEqualCon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simEqualCon
> ### Title: Equality Constraint Object
> ### Aliases: simEqualCon
> 
> ### ** Examples
> 
> # Example 1: Single-group, one constraint
> constraint <- matrix(0, 3, 2)
> constraint[1,] <- c(1, 1)
> constraint[2,] <- c(2, 1)
> constraint[3,] <- c(3, 1)
> rownames(constraint) <- rep("LY", 3)
> equal.loading <- simEqualCon(constraint, modelType="SEM.exo")
> 
> # Example 2: Multiple-group, one constraint
> group.con <- matrix(0, 2, 3)
> group.con[1,] <- c(1, 2, 1)
> group.con[2,] <- c(2, 2, 1)
> rownames(group.con) <- rep("BE", 2)
> equal.path <- simEqualCon(group.con, modelType="Path")
> 
> # Example 3: Single-group, multiple constraints
> constraint1 <- matrix(1, 3, 2)
> constraint1[,1] <- 1:3
> rownames(constraint1) <- rep("LY", 3)
> constraint2 <- matrix(2, 3, 2)
> constraint2[,1] <- 4:6
> rownames(constraint2) <- rep("LY", 3)
> constraint3 <- matrix(3, 2, 2)
> constraint3[,1] <- 7:8
> rownames(constraint3) <- rep("LY", 2)
> equal.loading2 <- simEqualCon(constraint1, constraint2, constraint3, modelType="SEM")
> summary(equal.loading2)
CONSTRAINT OBJECT
Model Type
[1] "SEM"
-------------Constraint----------------
1.
   Group Row Column
LY    NA   1      1
LY    NA   2      1
LY    NA   3      1
---------------------------------------
2.
   Group Row Column
LY    NA   4      2
LY    NA   5      2
LY    NA   6      2
---------------------------------------
3.
   Group Row Column
LY    NA   7      3
LY    NA   8      3
---------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("simExp")
> ### * simExp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simExp
> ### Title: Create random exponential distribution object
> ### Aliases: simExp
> 
> ### ** Examples
> 
>     exp2 <- simExp(2)
>     run(exp2)
[1] 0.3775909
> 	summary(exp2)
[1] "Random Exponential Distribution Object."
[1] "Rate parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simF")
> ### * simF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simF
> ### Title: Create random F distribution object
> ### Aliases: simF
> 
> ### ** Examples
> 
>     f27 <- simF(2, 7)
>     run(f27)
[1] 0.09450995
> 	summary(f27)
[1] "Random F Distribution Object."
[1] "Numerator degree of freedom is 2."
[1] "Denominator degree of freedom is 7."
[1] "Non-centrality parameter is 0."
> 
> 
> 
> cleanEx()
> nameEx("simFunction")
> ### * simFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simFunction
> ### Title: Create function object
> ### Aliases: simFunction
> 
> ### ** Examples
> 
> 
> n65 <- simNorm(0.6, 0.05)
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> 
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading.start <- matrix("", 9, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:9, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(9))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> datGen <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> 
> error.cor.trivial <- matrix(NA, 9, 9)
> diag(error.cor.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.trivial, "n1")
> 
> misGen <- simMisspecSEM(LY = LY.trivial, RTE = RTE.trivial)
> 
> Data.Mis <- simData(datGen, 300, misspec=misGen)
> 
> loading <- matrix(0, 12, 4)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 4] <- NA
> loading[10:12, 3] <- NA
> 
> path <- matrix(0, 4, 4)
> path[4, 1:3] <- NA
> 
> analysis <- simParamSEM(BE=path, LY=loading)
> 
> Model <- simModel(analysis)
> 
> # Find the products of indicators
> newFUN <- function(data, var1, var2, namesProd) {
+ 	prod <- data[,var1] * data[,var2]
+ 	colnames(prod) <- namesProd
+ 	return(data.frame(data, prod))
+ }
> 
> fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> Output <- simResult(10, Data.Mis, Model, objFunction=fun)
Warning in lavaan(model = code, meanstructure = TRUE, data = Data, missing = miss,  :
  lavaan WARNING: model has NOT converged!
Error in solve.default(E) : 
  system is computationally singular: reciprocal condition number = 6.96714e-23
Warning in estimateVCOV(lavaanModel, samplestats = lavaanSampleStats, options = lavaanOptions,  :
  lavaan WARNING: could not compute standard errors!

> summary(Output)
RESULT OBJECT
Model Type
[1] "SEM"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.68e+02 1.76e+02 1.82e+02 1.84e+02 1.31e+02
      AIC   9.40e+03 9.43e+03 9.46e+03 9.46e+03 9.04e+03
      BIC   9.55e+03 9.58e+03 9.61e+03 9.62e+03 9.20e+03
      RMSEA 9.12e-02 9.42e-02 9.65e-02 9.71e-02 7.46e-02
      CFI   9.09e-01 8.95e-01 8.84e-01 8.82e-01 9.38e-01
      TLI   8.74e-01 8.56e-01 8.41e-01 8.37e-01 9.15e-01
      SRMR  5.39e-02 5.55e-02 5.68e-02 5.71e-02 4.63e-02
========= Parameter Estimates and Standard Errors ============
        Estimate Average Estimate SD Average SE Power (Not equal 0) Std Est
LY1_1              0.702       0.093      0.053               1.000   0.713
LY2_1              0.743       0.166      0.055               1.000   0.726
LY3_1              0.699       0.219      0.054               1.000   0.703
LY4_2              0.657       0.131      0.056               1.000   0.658
LY5_2              0.724       0.209      0.054               1.000   0.721
LY6_2              0.722       0.154      0.056               1.000   0.735
LY10_3             0.521       0.110      0.092               1.000   0.528
LY11_3             0.585       0.266      0.099               0.889   0.540
LY12_3             0.556       0.249      0.095               1.000   0.536
LY7_4              0.316       0.111      0.052               1.000   0.768
LY8_4              0.314       0.085      0.053               1.000   0.763
LY9_4              0.326       0.122      0.052               1.000   0.755
BE4_1              1.451       0.724      0.407               0.889   0.531
BE4_2              1.235       0.720      0.347               0.889   0.447
BE4_3              0.015       0.184      0.192               0.000  -0.009
PS2_1              0.605       0.121      0.052               1.000   0.605
PS3_1             -0.004       0.150      0.084               0.333  -0.004
PS3_2              0.025       0.156      0.082               0.333   0.025
TE1_1              0.467       0.103      0.048               1.000   0.485
TE2_2              0.463       0.197      0.053               1.000   0.453
TE3_3              0.459       0.307      0.051               1.000   0.461
TE4_4              0.547       0.151      0.054               1.000   0.552
TE5_5              0.429       0.228      0.052               0.889   0.453
TE6_6              0.422       0.230      0.057               0.889   0.439
TE7_7              0.384       0.180      0.041               1.000   0.397
TE8_8              0.419       0.122      0.043               1.000   0.411
TE9_9              0.441       0.181      0.046               1.000   0.420
TE10_10            0.692       0.129      0.097               1.000   0.712
TE11_11            0.749       0.255      0.120               1.000   0.666
TE12_12            0.700       0.244      0.118               0.889   0.673
TY1               -0.011       0.060      0.057               0.000  -0.013
TY2                0.019       0.072      0.059               0.000   0.018
TY3               -0.013       0.043      0.057               0.000  -0.013
TY4               -0.012       0.077      0.058               0.222  -0.011
TY5               -0.043       0.037      0.057               0.000  -0.045
TY6               -0.038       0.074      0.057               0.111  -0.038
TY7               -0.023       0.076      0.057               0.111  -0.021
TY8               -0.020       0.068      0.058               0.111  -0.018
TY9               -0.009       0.059      0.059               0.111  -0.008
TY10               0.231       0.130      0.057               0.778   0.235
TY11               0.355       0.206      0.062               0.889   0.320
TY12               0.247       0.151      0.059               0.778   0.241
        Std Est SD
LY1_1        0.081
LY2_1        0.146
LY3_1        0.223
LY4_2        0.129
LY5_2        0.173
LY6_2        0.153
LY10_3       0.102
LY11_3       0.221
LY12_3       0.213
LY7_4        0.125
LY8_4        0.088
LY9_4        0.108
BE4_1        0.195
BE4_2        0.198
BE4_3        0.071
PS2_1        0.121
PS3_1        0.150
PS3_2        0.156
TE1_1        0.116
TE2_2        0.210
TE3_3        0.317
TE4_4        0.159
TE5_5        0.253
TE6_6        0.235
TE7_7        0.195
TE8_8        0.129
TE9_9        0.168
TE10_10      0.103
TE11_11      0.219
TE12_12      0.235
TY1          0.061
TY2          0.072
TY3          0.043
TY4          0.079
TY5          0.039
TY6          0.075
TY7          0.079
TY8          0.067
TY9          0.059
TY10         0.134
TY11         0.169
TY12         0.141
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000  0.039  0.039  0.997 -0.917 -0.917  0.816
AIC    0.039  1.000  1.000  0.000 -0.286 -0.286  0.171
BIC    0.039  1.000  1.000  0.000 -0.286 -0.286  0.171
RMSEA  0.997  0.000  0.000  1.000 -0.905 -0.905  0.824
CFI   -0.917 -0.286 -0.286 -0.905  1.000  1.000 -0.793
TLI   -0.917 -0.286 -0.286 -0.905  1.000  1.000 -0.793
SRMR   0.816  0.171  0.171  0.824 -0.793 -0.793  1.000
================== Replications =====================
Number of Replications
[1] 10
Number of Converged Replications
[1] 9
NOTE: The data generation model is not the same as the analysis model. See the summary of the population underlying data generation by the summaryPopulation function.
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("simGamma")
> ### * simGamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simGamma
> ### Title: Create random gamma distribution object
> ### Aliases: simGamma
> 
> ### ** Examples
> 
>     g11 <- simGamma(1, 1)
>     run(g11)
[1] 0.1551414
> 	summary(g11)
[1] "Random Gamma Distribution Object."
[1] "Shape parameter (alpha) is 1."
[1] "Rate parameter (beta) is 1."
> 
> 
> 
> cleanEx()
> nameEx("simGeom")
> ### * simGeom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simGeom
> ### Title: Create random geometric distribution object
> ### Aliases: simGeom
> 
> ### ** Examples
> 
>     geom5 <- simGeom(0.05)
>     run(geom5)
[1] 13
> 	summary(geom5)
[1] "Random Geometric Distribution Object."
[1] "Probability of successes is 0.05."
> 
> 
> 
> cleanEx()
> nameEx("simHyper")
> ### * simHyper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simHyper
> ### Title: Create random hypergeometric distribution object
> ### Aliases: simHyper
> 
> ### ** Examples
> 
>     hyp <- simHyper(20, 5, 10)
>     run(hyp)
[1] 9
> 	summary(hyp)
[1] "Random Hypergeometric Distribution Object."
[1] "The number of successes is 20."
[1] "The number of failures is 5."
[1] "The number of drawns is 10."
> 
> 
> 
> cleanEx()
> nameEx("simLnorm")
> ### * simLnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simLnorm
> ### Title: Create random log normal distribution object
> ### Aliases: simLnorm
> 
> ### ** Examples
> 
>     lognorm <- simLnorm(0, exp(1))
>     run(lognorm)
[1] 0.1821585
> 	summary(lognorm)
[1] "Random Log Normal Distribution Object."
[1] "Mean in log scale is 0."
[1] "Standard deviation in log scale is 2.72."
> 
> 
> 
> cleanEx()
> nameEx("simLogis")
> ### * simLogis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simLogis
> ### Title: Create random logistic distribution object
> ### Aliases: simLogis
> 
> ### ** Examples
> 
>     logis <- simLogis(0, 1)
>     run(logis)
[1] -1.017531
> 	summary(logis)
[1] "Random Logistic Distribution Object."
[1] "Location parameter is 0."
[1] "Scale parameter is 1."
> 
> 
> 
> cleanEx()
> nameEx("simMatrix")
> ### * simMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMatrix
> ### Title: Create simMatrix that save free parameters and starting values,
> ###   as well as fixed values
> ### Aliases: simMatrix
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> n65 <- simNorm(0.6, 0.05)
> LY <- simMatrix(loading, "n65")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.5686773 0.0000000
[2,] 0.6091822 0.0000000
[3,] 0.5582186 0.0000000
[4,] 0.0000000 0.6797640
[5,] 0.0000000 0.6164754
[6,] 0.0000000 0.5589766
> 
> start <- matrix(0, 6, 2)
> start[1:3, 1] <- 0.7
> start[4:6, 2] <- 0.7
> ST <- simMatrix(value=start)
> 
> 
> 
> cleanEx()
> nameEx("simMissing")
> ### * simMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMissing
> ### Title: Construct a SimMissing object to create data with missingness
> ###   and analyze missing data.
> ### Aliases: simMissing
> 
> ### ** Examples
> 
> 	#Example of imposing 10% MCAR missing in all variables with no imputations (FIML method)
> 	Missing <- simMissing(pmMCAR=0.1)
> 	summary(Missing)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates (will not impose any missing values): none 
Proportion of MCAR: 0.1 
> 	
> 	loading <- matrix(0, 6, 1)
> 	loading[1:6, 1] <- NA
> 	LX <- simMatrix(loading, 0.7)
> 	RPH <- symMatrix(diag(1))
> 	RTD <- symMatrix(diag(6))
> 	CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> 	SimData <- simData(CFA.Model, 500)
> 	SimModel <- simModel(CFA.Model)
> 	
> 	#Create data
> 	dat <- run(SimData)
> 	
> 	#Impose missing
> 	dat <- run(Missing, dat)
> 	
> 	#Analyze data
> 	out <- run(SimModel, dat)
> 	summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          4.992           9.000           0.835         848.384          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           1.000           1.008        6959.092        7034.955 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.000           0.000           0.030           0.011 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p       Std Est
LY1_1    0.722 0.044 16.505 0.000  7.247259e-01
LY2_1    0.685 0.045 15.331 0.000  6.818594e-01
LY3_1    0.726 0.048 15.206 0.000  6.882229e-01
LY4_1    0.688 0.047 14.772 0.000  6.680860e-01
LY5_1    0.747 0.047 15.755 0.000  7.064281e-01
LY6_1    0.632 0.044 14.222 0.000  6.472463e-01
TE1_1    0.471 0.041 11.583 0.000  4.747724e-01
TE2_2    0.540 0.044 12.347 0.000  5.350677e-01
TE3_3    0.586 0.048 12.144 0.000  5.263492e-01
TE4_4    0.588 0.047 12.418 0.000  5.536611e-01
TE5_5    0.560 0.048 11.729 0.000  5.009594e-01
TE6_6    0.554 0.043 12.815 0.000  5.810722e-01
TY1      0.000 0.046  0.000 1.000  2.148851e-05
TY2      0.023 0.046  0.490 0.624  2.260657e-02
TY3     -0.005 0.049 -0.100 0.920 -4.645960e-03
TY4      0.037 0.048  0.781 0.435  3.616270e-02
TY5      0.052 0.049  1.052 0.293  4.897779e-02
TY6      0.006 0.045  0.127 0.899  5.874597e-03
Converged
[1] TRUE
> 	
> 	#Example to create simMissing object for 3 forms design at 3 timepoints with 10 imputations
> 	Missing <- simMissing(nforms=3, timePoints=3, numImps=10)
> 
> 
> 
> 
> cleanEx()
> nameEx("simMisspecCFA")
> ### * simMisspecCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecCFA
> ### Title: Set of model misspecification for CFA model.
> ### Aliases: simMisspecCFA
> 
> ### ** Examples
> 
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> 
> 
> 
> cleanEx()
> nameEx("simMisspecPath")
> ### * simMisspecPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecPath
> ### Title: Set of model misspecification for Path analysis model.
> ### Aliases: simMisspecPath
> 
> ### ** Examples
> 
> u1 <- simUnif(-0.1, 0.1)
> mis.path.GA <- matrix(0, 2, 2)
> mis.path.GA[2, 1:2] <- NA
> mis.GA <- simMatrix(mis.path.GA, "u1")
> Path.Mis.Model <- simMisspecPath(GA = mis.GA, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simMisspecSEM")
> ### * simMisspecSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecSEM
> ### Title: Set of model misspecification for SEM model.
> ### Aliases: simMisspecSEM
> 
> ### ** Examples
> 
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> loading.X.trivial <- matrix(NA, 6, 2)
> loading.X.trivial[is.na(loading.X.trivial)] <- 0
> LX.trivial <- simMatrix(loading.X.trivial, "u2")
> error.cor.X.trivial <- matrix(NA, 6, 6)
> diag(error.cor.X.trivial) <- 0
> RTD.trivial <- symMatrix(error.cor.X.trivial, "n1")
> error.cor.Y.trivial <- matrix(NA, 2, 2)
> diag(error.cor.Y.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.Y.trivial, "n1")
> RTH.trivial <- simMatrix(matrix(NA, 6, 2), "n1")
> SEM.Mis.Model <- simMisspecSEM(LX = LX.trivial, RTE = RTE.trivial, RTD = RTD.trivial, RTH = RTH.trivial, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simModel")
> ### * simModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simModel
> ### Title: Create a model object
> ### Aliases: simModel simModel-methods simModel,ANY-method
> ###   simModel,SimSet-method simModel,SimParam-method
> ###   simModel,SimModelOut-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> SimModel <- simModel(CFA.Model)
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> HS.Model <- simParamCFA(LX = loading)
> SimModel <- simModel(HS.Model, indLab=paste("x", 1:9, sep=""))
> out <- run(SimModel, HolzingerSwineford1939)
> summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
         85.306          24.000           0.000         918.852          36.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           0.931           0.896        7535.490        7646.703 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.092           0.071           0.114           0.060 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z p   Std Est
LY1_1    0.900 0.081 11.127 0 0.7718808
LY2_1    0.498 0.077  6.429 0 0.4235991
LY3_1    0.656 0.074  8.817 0 0.5811320
LY4_2    0.990 0.057 17.474 0 0.8515822
LY5_2    1.102 0.063 17.576 0 0.8550653
LY6_2    0.917 0.054 17.082 0 0.8380100
LY7_3    0.619 0.070  8.903 0 0.5695144
LY8_3    0.731 0.066 11.090 0 0.7230441
LY9_3    0.670 0.065 10.305 0 0.6650091
PS2_1    0.459 0.064  7.189 0 0.4585082
PS3_1    0.471 0.073  6.461 0 0.4705332
PS3_2    0.283 0.069  4.117 0 0.2829833
TE1_1    0.549 0.114  4.833 0 0.4042000
TE2_2    1.134 0.102 11.146 0 0.8205638
TE3_3    0.844 0.091  9.317 0 0.6622856
TE4_4    0.371 0.048  7.778 0 0.2748077
TE5_5    0.446 0.058  7.642 0 0.2688633
TE6_6    0.356 0.043  8.277 0 0.2977393
TE7_7    0.799 0.081  9.823 0 0.6756533
TE8_8    0.488 0.074  6.573 0 0.4772072
TE9_9    0.566 0.071  8.003 0 0.5577629
TY1      4.036 0.105 38.398 0 3.4630482
TY2      5.590 0.103 54.322 0 4.7555391
TY3      1.594 0.099 16.126 0 1.4119762
TY4      2.071 0.088 23.611 0 1.7821807
TY5      3.239 0.097 33.332 0 2.5140601
TY6      1.269 0.083 15.328 0 1.1601697
TY7      3.566 0.094 38.078 0 3.2788058
TY8      4.796 0.088 54.518 0 4.7442674
TY9      4.704 0.087 53.963 0 4.6692496
Converged
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("simNbinom")
> ### * simNbinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simNbinom
> ### Title: Create random negative binomial distribution object
> ### Aliases: simNbinom
> 
> ### ** Examples
> 
>     nbinom <- simNbinom(5, 0.25)
>     run(nbinom)
[1] 14
> 	summary(nbinom)
[1] "Random Negative Binomial Distribution Object."
[1] "The target number of successful trials is 5."
[1] "The probability of successes is 0.25."
> 
> 
> 
> cleanEx()
> nameEx("simNorm")
> ### * simNorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simNorm
> ### Title: Create random normal distribution object
> ### Aliases: simNorm
> 
> ### ** Examples
> 
>     n02 <- simNorm(0, 0.2)
>     run(n02)
[1] -0.1252908
> 	summary(n02)
[1] "Random Normal Distribution Object."
[1] "Mean is 0."
[1] "Standard deviation is 0.2."
> 
> 
> 
> cleanEx()
> nameEx("simParamCFA")
> ### * simParamCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamCFA
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to CFA model.
> ### Aliases: simParamCFA
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> CFA.Model <- simParamCFA(LX = loading)
> 
> 
> 
> cleanEx()
> nameEx("simParamPath")
> ### * simParamPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamPath
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to Path analysis model
> ### Aliases: simParamPath
> 
> ### ** Examples
>  
> path <- matrix(0, 4, 4)
> path[3, 1:2] <- NA
> path[4, 3] <- NA
> model <- simParamPath(BE=path)
> 
> exoPath <- matrix(NA, 3, 2)
> model2 <- simParamPath(GA=exoPath, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simParamSEM")
> ### * simParamSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamSEM
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to SEM model
> ### Aliases: simParamSEM
> 
> ### ** Examples
> 
> loading <- matrix(0, 8, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:8, 3] <- NA
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> SEM.model <- simParamSEM(BE=path, LY=loading)
> 
> loading.X <- matrix(0, 6, 2)
> loading.X[1:3, 1] <- NA
> loading.X[4:6, 2] <- NA
> loading.Y <- matrix(NA, 2, 1)
> path.GA <- matrix(NA, 1, 2)
> BE <- as.matrix(0)
> SEM.Exo.model <- simParamSEM(GA=path.GA, BE=BE, LX=loading.X, LY=loading.Y, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simPois")
> ### * simPois
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simPois
> ### Title: Create random Poisson distribution object
> ### Aliases: simPois
> 
> ### ** Examples
> 
>     pois5 <- simPois(5)
>     run(pois5)
[1] 4
> 	summary(pois5)
[1] "Random Poisson Distribution Object."
[1] "Lambda parameter (mean and variance) is 5."
> 
> 
> 
> cleanEx()
> nameEx("simResult")
> ### * simResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simResult
> ### Title: Create simResult.
> ### Aliases: simResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D summary(Output)
> ##D 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10))
> ##D summary(Output)
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D # Use distribution object on sample size and percent completely at random
> ##D n <- simUnif(100, 500)
> ##D pmMCAR <- simUnif(0, 0.1)
> ##D Output <- simResult(5, SimData, SimModel, n=n, pmMCAR=pmMCAR)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simResultParam")
> ### * simResultParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simResultParam
> ### Title: The constructor of the parameter result object
> ### Aliases: simResultParam
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea")
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> 
> # Specify the range of misfits to select the set of misspecified parameters
> Path.Mis.Model2 <- simMisspecPath(BE = mis.BE, misfitType="rmsea", misfitBound=c(0.05, 0.08))
> ParamObject2 <- simResultParam(5, Path.Model, Path.Mis.Model2)
> 
> # Find the maximum misspecification for each actual parameter
> Path.Mis.Model3 <- simMisspecPath(BE = mis.BE, misfitType="rmsea", optMisfit="max", numIter=10)
> ParamObject3 <- simResultParam(5, Path.Model, Path.Mis.Model3)
> 
> 
> 
> cleanEx()
> nameEx("simSetCFA")
> ### * simSetCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetCFA
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to CFA model.
> ### Aliases: simSetCFA
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> 
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> 
> 
> 
> cleanEx()
> nameEx("simSetPath")
> ### * simSetPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetPath
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to Path analysis model
> ### Aliases: simSetPath
> 
> ### ** Examples
>  
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE)
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.GA <- matrix(0, 2, 2)
> path.GA[1, 1:2] <- NA
> GA <- simMatrix(path.GA, "u35")
> 
> path.BE <- matrix(0, 2, 2)
> path.BE[2, 1] <- NA
> BE <- simMatrix(path.BE, "u57")
> 
> exo.cor <- matrix(NA, 2, 2)
> diag(exo.cor) <- 1
> RPH <- symMatrix(exo.cor, "n31")
> 
> RPS <- symMatrix(diag(2))
> 
> Path.Exo.Model <- simSetPath(RPS = RPS, BE = BE, RPH = RPH, GA = GA, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simSetSEM")
> ### * simSetSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetSEM
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to SEM model
> ### Aliases: simSetSEM
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> n65 <- simNorm(0.6, 0.05)
> loading <- matrix(0, 8, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:8, 3] <- NA
> loading.start <- matrix("", 8, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:8, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(8))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> SEM.model <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.X <- matrix(0, 6, 2)
> loading.X[1:3, 1] <- NA
> loading.X[4:6, 2] <- NA
> LX <- simMatrix(loading.X, 0.7)
> 
> loading.Y <- matrix(NA, 2, 1)
> LY <- simMatrix(loading.Y, "u68")
> 
> RTD <- symMatrix(diag(6))
> 
> RTE <- symMatrix(diag(2))
> 
> factor.K.cor <- matrix(NA, 2, 2)
> diag(factor.K.cor) <- 1
> RPH <- symMatrix(factor.K.cor, 0.5)
> 
> RPS <- symMatrix(as.matrix(1))
> 
> path.GA <- matrix(NA, 1, 2)
> path.GA.start <- matrix(c("n65", "u35"), ncol=2)
> GA <- simMatrix(path.GA, path.GA.start)
> 
> BE <- simMatrix(as.matrix(0))
> 
> SEM.Exo.model <- simSetSEM(GA=GA, BE=BE, LX=LX, LY=LY, RPH=RPH, RPS=RPS, RTD=RTD, RTE=RTE, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simT")
> ### * simT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simT
> ### Title: Create random t distribution object
> ### Aliases: simT
> 
> ### ** Examples
> 
>     nct82 <- simT(8, ncp=2)
>     run(nct82)
[1] 1.399685
> 	summary(nct82)
[1] "Random t Distribution Object."
[1] "Degree of freedom is 8."
[1] "Non-centrality parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simUnif")
> ### * simUnif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simUnif
> ### Title: Create random uniform distribution object
> ### Aliases: simUnif
> 
> ### ** Examples
> 
> u1 <- simUnif(-0.1, 0.1)
> run(u1)
[1] -0.04689827
> summary(u1)
[1] "Random Uniform Distribution Object."
[1] "Minimum is -0.1."
[1] "Maximum is 0.1."
> 
> 
> 
> cleanEx()
> nameEx("simVector")
> ### * simVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simVector
> ### Title: Create simVector that save free parameters and starting values,
> ###   as well as fixed values
> ### Aliases: simVector
> 
> ### ** Examples
> 
> factor.mean <- rep(NA, 4)
> AL <- simVector(factor.mean, 0)
> 
> n02 <- simNorm(0, 0.2)
> factor.start <- rep("n02", 4)
> KA <- simVector(factor.mean, factor.start)
> 
> start <- c(2, 0, 0, 1)
> VE <- simVector(value=start)
> 
> 
> 
> cleanEx()
> nameEx("simWeibull")
> ### * simWeibull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simWeibull
> ### Title: Create random Weibull distribution object
> ### Aliases: simWeibull
> 
> ### ** Examples
> 
>     exWeibull <- simWeibull(2, 100)
>     run(exWeibull)
[1] 115.1568
> 	summary(exWeibull)
[1] "Random Weibull Distribution Object."
[1] "Shape parameter is 2."
[1] "Scale parameter is 100."
> 
> 
> 
> cleanEx()
> nameEx("skew")
> ### * skew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skew
> ### Title: Find skewness
> ### Aliases: skew skew-methods skew,vector-method
> 
> ### ** Examples
> 
> skew(1:5)
skew (g1)        se         z         p 
 0.000000  1.095445  0.000000  1.000000 
> 
> 
> 
> cleanEx()
> nameEx("sortList")
> ### * sortList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sortList
> ### Title: Sort two objects in a list
> ### Aliases: sortList
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("standardize")
> ### * standardize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: standardize
> ### Title: Standardize the parameter estimates within an object
> ### Aliases: standardize standardize-methods standardize,ANY-method
> ###   standardize,SimModelOut-method standardize,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # summary(LX)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # PH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # TD <- symMatrix(error.cor)
> # CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> # SimData <- simData(CFA.Model, 200)
> # SimModel <- simModel(CFA.Model)
> # standardize(run(SimModel, run(SimData)))
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # summary(LX)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # PH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # TD <- symMatrix(error.cor)
> # CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> # set <- reduceMatrices(run(CFA.Model))
> 
> 
> 
> cleanEx()
> nameEx("startingValues")
> ### * startingValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: startingValues
> ### Title: Find starting values by averaging random numbers
> ### Aliases: startingValues startingValues-methods
> ###   startingValues,ANY-method startingValues,SimMatrix-method
> ###   startingValues,SimVector-method startingValues,SimSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #startingValues(LX, 10)
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #latent.cor <- matrix(NA, 2, 2)
> #diag(latent.cor) <- 1
> #PH <- symMatrix(latent.cor, 0.5)
> #error.cor <- matrix(0, 6, 6)
> #diag(error.cor) <- 1
> #TD <- symMatrix(error.cor)
> #CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> #result <- startingValues(CFA.Model, 10)
> #summary(result)
> 
> 
> 
> cleanEx()
> nameEx("subtractObject")
> ### * subtractObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subtractObject
> ### Title: Make a subtraction of each element in an object
> ### Aliases: subtractObject subtractObject-methods
> ###   subtractObject,ANY,ANY-method subtractObject,SimRSet,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #startingValues(LX, 10)
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #latent.cor <- matrix(NA, 2, 2)
> #diag(latent.cor) <- 1
> #PH <- symMatrix(latent.cor, 0.5)
> #error.cor <- matrix(0, 6, 6)
> #diag(error.cor) <- 1
> #TD <- symMatrix(error.cor)
> #CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> #result <- startingValues(CFA.Model, 10)
> #summary(result)
> 
> 
> 
> cleanEx()
> nameEx("summaryFit")
> ### * summaryFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryFit
> ### Title: Provide summary of model fit across replications
> ### Aliases: summaryFit summaryFit-methods summaryFit,ANY-method
> ###   summaryFit,SimResult-method summaryFit,SimResultParam-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summaryFit(Output)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.658982e+01 1.748556e+01 1.820214e+01 1.836338e+01 1.229758e+01
      AIC   7.507979e+03 7.511517e+03 7.514347e+03 7.514983e+03 7.448769e+03
      BIC   7.583842e+03 7.587380e+03 7.590210e+03 7.590846e+03 7.524632e+03
      RMSEA 4.059817e-02 4.312852e-02 4.515279e-02 4.560825e-02 2.407053e-02
      CFI   9.923631e-01 9.913239e-01 9.904926e-01 9.903056e-01 9.962657e-01
      TLI   9.872718e-01 9.855399e-01 9.841543e-01 9.838426e-01 9.946571e-01
      SRMR  1.845382e-02 1.901709e-02 1.946770e-02 1.956908e-02 1.529650e-02
> summaryFit(Output, detail=TRUE)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.658982e+01 1.748556e+01 1.820214e+01 1.836338e+01 1.229758e+01
      AIC   7.507979e+03 7.511517e+03 7.514347e+03 7.514983e+03 7.448769e+03
      BIC   7.583842e+03 7.587380e+03 7.590210e+03 7.590846e+03 7.524632e+03
      RMSEA 4.059817e-02 4.312852e-02 4.515279e-02 4.560825e-02 2.407053e-02
      CFI   9.923631e-01 9.913239e-01 9.904926e-01 9.903056e-01 9.962657e-01
      TLI   9.872718e-01 9.855399e-01 9.841543e-01 9.838426e-01 9.946571e-01
      SRMR  1.845382e-02 1.901709e-02 1.946770e-02 1.956908e-02 1.529650e-02
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryMisspec")
> ### * summaryMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryMisspec
> ### Title: Provide summary of model misspecification imposed across
> ###   replications
> ### Aliases: summaryMisspec summaryMisspec-methods
> ###   summaryMisspec,ANY-method summaryMisspec,SimResultParam-method
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea")
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> 
> summaryMisspec(ParamObject)
            mean         sd
BE4_1 0.02332835 0.02344691
BE4_2 0.04287967 0.07869762
> 
> 
> 
> cleanEx()
> nameEx("summaryParam")
> ### * summaryParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryParam
> ### Title: Provide summary of parameter estimates and standard error across
> ###   replications
> ### Aliases: summaryParam summaryParam-methods summaryParam,ANY-method
> ###   summaryParam,SimResult-method summaryParam,SimModelOut-method
> ###   summaryParam,SimModelMIOut-method
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                            
Name:      pmMCAR      pmMAR
Class:     vector     vector
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summaryParam(Output)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.      Std.Est
LY1_1      0.695770187  0.05591624 0.04164177                   1  0.698305541
LY2_1      0.705920222  0.01789751 0.04220905                   1  0.699835000
LY3_1      0.662918191  0.03553200 0.04059623                   1  0.686835416
LY4_1      0.693910554  0.02206814 0.04182486                   1  0.695746320
LY5_1      0.692720010  0.03670543 0.04134995                   1  0.700366262
LY6_1      0.708065387  0.04556773 0.04184982                   1  0.705460431
TE1_1      0.505142699  0.03615462 0.03852001                   1  0.511336376
TE2_2      0.519135938  0.03158771 0.03957955                   1  0.509961847
TE3_3      0.490757816  0.02718131 0.03690298                   1  0.527713999
TE4_4      0.514159658  0.04986211 0.03900823                   1  0.515639216
TE5_5      0.497108898  0.02098162 0.03796812                   1  0.509172612
TE6_6      0.504462094  0.04283085 0.03875721                   1  0.501665859
TY1       -0.003916509  0.04276367 0.04451029                   0 -0.004398486
TY2       -0.008652747  0.02760921 0.04511341                   0 -0.008457722
TY3       -0.013513401  0.03845597 0.04314707                   0 -0.014383096
TY4       -0.011653944  0.02258075 0.04461641                   0 -0.011864680
TY5       -0.018671224  0.02996310 0.04421328                   0 -0.018885011
TY6       -0.020695362  0.02474359 0.04486527                   0 -0.021222958
      Std.Est.SD Average.Param Average.Bias Coverage
LY1_1 0.03593389          0.70 -0.004229813      0.8
LY2_1 0.01834143          0.70  0.005920222      1.0
LY3_1 0.02605551          0.70 -0.037081809      0.8
LY4_1 0.01929513          0.70 -0.006089446      1.0
LY5_1 0.01982694          0.70 -0.007279990      1.0
LY6_1 0.02871676          0.70  0.008065387      1.0
TE1_1 0.04907873          0.51 -0.004857301      1.0
TE2_2 0.02548884          0.51  0.009135938      1.0
TE3_3 0.03526319          0.51 -0.019242184      1.0
TE4_4 0.02640626          0.51  0.004159658      1.0
TE5_5 0.02782190          0.51 -0.012891102      1.0
TE6_6 0.04027417          0.51 -0.005537906      1.0
TY1   0.04260561          0.00 -0.003916509      1.0
TY2   0.02728293          0.00 -0.008652747      1.0
TY3   0.04032088          0.00 -0.013513401      1.0
TY4   0.02298553          0.00 -0.011653944      1.0
TY5   0.03056008          0.00 -0.018671224      1.0
TY6   0.02585421          0.00 -0.020695362      1.0
> summaryParam(Output, detail=TRUE)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.      Std.Est
LY1_1      0.695770187  0.05591624 0.04164177                   1  0.698305541
LY2_1      0.705920222  0.01789751 0.04220905                   1  0.699835000
LY3_1      0.662918191  0.03553200 0.04059623                   1  0.686835416
LY4_1      0.693910554  0.02206814 0.04182486                   1  0.695746320
LY5_1      0.692720010  0.03670543 0.04134995                   1  0.700366262
LY6_1      0.708065387  0.04556773 0.04184982                   1  0.705460431
TE1_1      0.505142699  0.03615462 0.03852001                   1  0.511336376
TE2_2      0.519135938  0.03158771 0.03957955                   1  0.509961847
TE3_3      0.490757816  0.02718131 0.03690298                   1  0.527713999
TE4_4      0.514159658  0.04986211 0.03900823                   1  0.515639216
TE5_5      0.497108898  0.02098162 0.03796812                   1  0.509172612
TE6_6      0.504462094  0.04283085 0.03875721                   1  0.501665859
TY1       -0.003916509  0.04276367 0.04451029                   0 -0.004398486
TY2       -0.008652747  0.02760921 0.04511341                   0 -0.008457722
TY3       -0.013513401  0.03845597 0.04314707                   0 -0.014383096
TY4       -0.011653944  0.02258075 0.04461641                   0 -0.011864680
TY5       -0.018671224  0.02996310 0.04421328                   0 -0.018885011
TY6       -0.020695362  0.02474359 0.04486527                   0 -0.021222958
      Std.Est.SD Average.Param Average.Bias Coverage     Rel.Bias    Std.Bias
LY1_1 0.03593389          0.70 -0.004229813      0.8 -0.006042590 -0.07564552
LY2_1 0.01834143          0.70  0.005920222      1.0  0.008457460  0.33078461
LY3_1 0.02605551          0.70 -0.037081809      0.8 -0.052974012 -1.04361724
LY4_1 0.01929513          0.70 -0.006089446      1.0 -0.008699209 -0.27593831
LY5_1 0.01982694          0.70 -0.007279990      1.0 -0.010399986 -0.19833553
LY6_1 0.02871676          0.70  0.008065387      1.0  0.011521982  0.17699780
TE1_1 0.04907873          0.51 -0.004857301      1.0 -0.009524120 -0.13434801
TE2_2 0.02548884          0.51  0.009135938      1.0  0.017913604  0.28922447
TE3_3 0.03526319          0.51 -0.019242184      1.0 -0.037729772 -0.70791964
TE4_4 0.02640626          0.51  0.004159658      1.0  0.008156193  0.08342323
TE5_5 0.02782190          0.51 -0.012891102      1.0 -0.025276671 -0.61439975
TE6_6 0.04027417          0.51 -0.005537906      1.0 -0.010858638 -0.12929713
TY1   0.04260561          0.00 -0.003916509      1.0           NA -0.09158497
TY2   0.02728293          0.00 -0.008652747      1.0           NA -0.31340068
TY3   0.04032088          0.00 -0.013513401      1.0           NA -0.35139931
TY4   0.02298553          0.00 -0.011653944      1.0           NA -0.51610082
TY5   0.03056008          0.00 -0.018671224      1.0           NA -0.62314052
TY6   0.02585421          0.00 -0.020695362      1.0           NA -0.83639281
      Rel.SE.Bias
LY1_1 -0.25528307
LY2_1  1.35837527
LY3_1  0.14252583
LY4_1  0.89525957
LY5_1  0.12653506
LY6_1 -0.08159072
TE1_1  0.06542433
TE2_2  0.25300491
TE3_3  0.35765987
TE4_4 -0.21767797
TE5_5  0.80958959
TE6_6 -0.09510995
TY1    0.04084359
TY2    0.63399839
TY3    0.12198626
TY4    0.97586051
TY5    0.47559076
TY6    0.81320770
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryPopulation")
> ### * summaryPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryPopulation
> ### Title: Summarize the data generation population model underlying an
> ###   object
> ### Aliases: summaryPopulation summaryPopulation-methods
> ###   summaryPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("summaryShort")
> ### * summaryShort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryShort
> ### Title: Provide short summary of an object.
> ### Aliases: summaryShort summaryShort-methods summaryShort,ANY-method
> ###   summaryShort,vector-method summaryShort,matrix-method
> 
> ### ** Examples
> 
> u89 <- simUnif(0.8, 0.9)
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> LX <- simMatrix(loading, "u89")
> summaryShort(LX)
     [,1]                    [,2]                   
[1,] "NA:runif(1, 0.8, 0.9)" "0"                    
[2,] "NA:runif(1, 0.8, 0.9)" "0"                    
[3,] "NA:runif(1, 0.8, 0.9)" "0"                    
[4,] "0"                     "NA:runif(1, 0.8, 0.9)"
[5,] "0"                     "NA:runif(1, 0.8, 0.9)"
[6,] "0"                     "NA:runif(1, 0.8, 0.9)"
> 
> 
> 
> cleanEx()
> nameEx("symMatrix")
> ### * symMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: symMatrix
> ### Title: Create symmetric simMatrix that save free parameters and
> ###   starting values, as well as fixed values
> ### Aliases: symMatrix
> 
> ### ** Examples
> 
> latent.cor <- matrix(NA, 3, 3)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> u46 <- simUnif(0.4, 0.6)
> factor.cor <- matrix(NA, 4, 4)
> diag(factor.cor) <- 1
> factor.cor.start <- matrix("u46", 4, 4)
> factor.cor.start[1, 2] <- factor.cor.start[2, 1] <- "0.5"
> RPS <- symMatrix(factor.cor, factor.cor.start)
> 
> start <- diag(4)
> start[1, 2] <- 0.5
> start[2, 1] <- 0.5
> ST <- symMatrix(value=start)
> 
> 
> 
> cleanEx()
> nameEx("tagHeaders")
> ### * tagHeaders
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tagHeaders
> ### Title: Tag names to each element
> ### Aliases: tagHeaders tagHeaders-methods tagHeaders,ANY-method
> ###   tagHeaders,VirtualRSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("toFunction")
> ### * toFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toFunction
> ### Title: Export the distribution object to a function command in text
> ###   that can be evaluated directly.
> ### Aliases: toFunction toFunction-methods toFunction,ANY-method
> 
> ### ** Examples
> 
> u2 <- simUnif(-0.2, 0.2)
> toFunction(u2)
[1] "runif(1, -0.2, 0.2)"
> 
> 
> 
> cleanEx()
> nameEx("toSimSet")
> ### * toSimSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toSimSet
> ### Title: Transform the analysis model object into the object for data
> ###   generation
> ### Aliases: toSimSet toSimSet-methods toSimSet,ANY-method
> ###   toSimSet,SimRSet-method toSimSet,SimModelOut-method
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # library(lavaan)
> # hs <- HolzingerSwineford1939
> # loading <- matrix(0, 9, 3)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loading[7:9, 3] <- NA
> # model <- simParamCFA(LY=loading)
> # SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> # out <- run(SimModel, hs)
> # set <- toSimSet(out)
> 
> 
> 
> cleanEx()
> nameEx("twoTailedPValue")
> ### * twoTailedPValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twoTailedPValue
> ### Title: Find two-tailed _p_ value from one-tailed _p_ value
> ### Aliases: twoTailedPValue
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateCovariance")
> ### * validateCovariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateCovariance
> ### Title: Validate whether all elements provides a good covariance matrix
> ### Aliases: validateCovariance
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateObject")
> ### * validateObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateObject
> ### Title: Validate whether the drawn parameters are good.
> ### Aliases: validateObject
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validatePath")
> ### * validatePath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validatePath
> ### Title: Validate whether the regression coefficient (or loading) matrix
> ###   is good
> ### Aliases: validatePath
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("vectorizeObject")
> ### * vectorizeObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vectorizeObject
> ### Title: Change an object to a vector with labels
> ### Aliases: vectorizeObject vectorizeObject-methods
> ###   vectorizeObject,ANY,ANY-method vectorizeObject,vector,vector-method
> ###   vectorizeObject,matrix,matrix-method
> ###   vectorizeObject,VirtualRSet,SimLabels-method
> ###   vectorizeObject,MatrixSet,SimGenLabels-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("weightedMean")
> ### * weightedMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weightedMean
> ### Title: Calculate the weighted mean of a variable
> ### Aliases: weightedMean
> 
> ### ** Examples
> 
> # This function is not public
> 
> # weightedMean(1:5, c(1,1,1,1,2))
> 
> 
> 
> cleanEx()
> nameEx("whichMonotonic")
> ### * whichMonotonic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: whichMonotonic
> ### Title: Extract a part of a vector that is monotonically increasing or
> ###   decreasing
> ### Aliases: whichMonotonic
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # whichMonotonic(c(3, 4, 1, 2, 3, 5, 2, 1))
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanCode")
> ### * writeLavaanCode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanCode
> ### Title: Write a lavaan code given the matrices of free parameter
> ### Aliases: writeLavaanCode
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanConstraint")
> ### * writeLavaanConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanConstraint
> ### Title: Write a lavaan code for a given set of equality constraints
> ### Aliases: writeLavaanConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanIndividualConstraint")
> ### * writeLavaanIndividualConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanIndividualConstraint
> ### Title: Write a lavaan code for a given equality constraint for each
> ###   parameter
> ### Aliases: writeLavaanIndividualConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanNullCode")
> ### * writeLavaanNullCode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanNullCode
> ### Title: Write a lavaan code for a null model
> ### Aliases: writeLavaanNullCode
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  24.38 0.23 24.65 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
