
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simsem"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('simsem')
Loading required package: lavaan
Loading required package: MASS
Loading required package: boot
Loading required package: mvtnorm
Loading required package: quadprog
This is lavaan 0.5-9
lavaan is BETA software! Please report any bugs.
 
###############################################################################################
This is simsem 0.3-12
simsem is BETA software! Please report any bugs.
simsem was developed at the University of Kansas Center for Research Methods and Data Analysis.
###############################################################################################
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SimDataDist-class")
> ### * SimDataDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataDist-class
> ### Title: Class '"SimDataDist"': Data distribution object
> ### Aliases: SimDataDist-class summary,SimDataDist-method
> ###   plotDist,SimDataDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimDataDist")
Class "SimDataDist" [package "simsem"]

Slots:
                                                                       
Name:             p      margins paramMargins    keepScale      reverse
Class:      numeric    character         list      logical       vector
> 
> d1 <- list(df=2)
> d2 <- list(df=3)
> d3 <- list(df=4)
> d4 <- list(df=5)
> d5 <- list(df=3)
> d6 <- list(df=4)
> d7 <- list(df=5)
> d8 <- list(df=6)
> 
> dist <- bindDist(c(rep("t", 4), rep("chisq", 8)), d1, d2, d3, d4, d5, d6, d7, d8, d5, d6, d7, d8)
> summary(dist)
DATA DISTRIBUTION OBJECT
The number of variables is 12 
Keep means and variances of the original scales: TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE / TRUE 
The list of distributions:
1. t: df = 2
2. t: df = 3
3. t: df = 4
4. t: df = 5
5. chisq: df = 3
6. chisq: df = 4
7. chisq: df = 5
8. chisq: df = 6
9. chisq: df = 3
10. chisq: df = 4
11. chisq: df = 5
12. chisq: df = 6
Reverse (mirror) distribution: FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE / FALSE 
> 
> 
> 
> cleanEx()
> nameEx("SimMatrix-class")
> ### * SimMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMatrix-class
> ### Title: Matrix object: Random parameters matrix
> ### Aliases: SimMatrix-class summaryShort,SimMatrix-method
> ###   summary,SimMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMatrix")
Class "SimMatrix" [package "simsem"]

Slots:
                                              
Name:       free  popParam   misspec symmetric
Class:    matrix    matrix    matrix   logical
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LY <- bind(loading, loadingValues)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> rawDraw(LY)
$param
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7

$paramMis
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7

> 
> LY <- bind(loading, "rnorm(1, 0.6, 0.05)")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> rawDraw(LY)
$param
          [,1]      [,2]
[1,] 0.6091822 0.0000000
[2,] 0.5582186 0.0000000
[3,] 0.6797640 0.0000000
[4,] 0.0000000 0.6164754
[5,] 0.0000000 0.5589766
[6,] 0.0000000 0.6243715

$paramMis
          [,1]      [,2]
[1,] 0.6091822 0.0000000
[2,] 0.5582186 0.0000000
[3,] 0.6797640 0.0000000
[4,] 0.0000000 0.6164754
[5,] 0.0000000 0.5589766
[6,] 0.0000000 0.6243715

> 
> mis <- matrix("runif(1, -0.1, 0.1)", 6, 2)
> mis[is.na(loading)] <- 0
> LY <- bind(loading, "rnorm(1, 0.6, 0.05)", mis)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
[1] "Model misspecification"
     [,1]                  [,2]                 
[1,] "0"                   "runif(1, -0.1, 0.1)"
[2,] "0"                   "runif(1, -0.1, 0.1)"
[3,] "0"                   "runif(1, -0.1, 0.1)"
[4,] "runif(1, -0.1, 0.1)" "0"                  
[5,] "runif(1, -0.1, 0.1)" "0"                  
[6,] "runif(1, -0.1, 0.1)" "0"                  
> rawDraw(LY)
$param
          [,1]      [,2]
[1,] 0.6194922 0.0000000
[2,] 0.5689380 0.0000000
[3,] 0.4892650 0.0000000
[4,] 0.0000000 0.6471918
[5,] 0.0000000 0.6410611
[6,] 0.0000000 0.6296951

$paramMis
             [,1]         [,2]
[1,]  0.619492162  0.019913165
[2,]  0.568937971 -0.001291739
[3,]  0.489265006 -0.062756480
[4,]  0.073938169  0.647191811
[5,] -0.031930201  0.641061060
[6,] -0.003583977  0.629695066

> 
> 
> 
> cleanEx()
> nameEx("SimMissing-class")
> ### * SimMissing-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMissing-class
> ### Title: Class '"SimMissing"'
> ### Aliases: SimMissing-class summary,SimMissing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> misstemplate <- miss(pmMCAR=0.2)
> summary(misstemplate)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates: none 
Ignored Variables: none 
Proportion of MCAR: 0.2 
> 
> 
> 
> cleanEx()
> nameEx("SimResult-class")
> ### * SimResult-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResult-class
> ### Title: Class '"SimResult"': Simulation Result Object
> ### Aliases: SimResult-class summary,SimResult-method
> ###   summaryShort,SimResult-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                       
Name:     modelType         nRep         coef           se          fit
Class:    character      numeric   data.frame   data.frame   data.frame
                                                                       
Name:     converged   paramValue misspecValue       popFit         FMI1
Class:       vector   data.frame   data.frame   data.frame   data.frame
                                                                       
Name:          FMI2      stdCoef         seed            n         nobs
Class:   data.frame   data.frame      numeric       vector   data.frame
                                                                       
Name:        pmMCAR        pmMAR     extraOut    paramOnly       timing
Class:       vector       vector         list      logical         list
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LY <- bind(loading, 0.7)
> RPS <- binds(diag(1))
> RTE <- binds(diag(6))
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> 
> # Summary the simulation result
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean     SD
      Chi     17.123   17.314   17.468   17.502   11.619  5.626
      AIC   7506.931 7510.452 7513.269 7513.903 7448.091 69.165
      BIC   7582.794 7586.315 7589.132 7589.766 7523.954 69.165
      RMSEA    0.042    0.043    0.043    0.043    0.022  0.021
      CFI      0.992    0.992    0.991    0.991    0.996  0.004
      TLI      0.987    0.986    0.985    0.985    0.996  0.009
      SRMR     0.019    0.019    0.019    0.019    0.015  0.004
========= Parameter Estimates and Standard Errors ============
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
1.f1=~y1            0.691       0.028      0.041                   1   0.697
1.f1=~y2            0.685       0.023      0.042                   1   0.685
1.f1=~y3            0.696       0.016      0.041                   1   0.703
1.f1=~y4            0.666       0.056      0.041                   1   0.681
1.f1=~y5            0.695       0.031      0.042                   1   0.699
1.f1=~y6            0.727       0.050      0.042                   1   0.721
1.y1~~y1            0.504       0.014      0.038                   1   0.514
1.y2~~y2            0.531       0.034      0.040                   1   0.531
1.y3~~y3            0.496       0.044      0.038                   1   0.505
1.y4~~y4            0.509       0.038      0.038                   1   0.535
1.y5~~y5            0.506       0.056      0.039                   1   0.510
1.y6~~y6            0.485       0.021      0.038                   1   0.479
1.y1~1              0.018       0.029      0.044                   0   0.018
1.y2~1              0.005       0.043      0.045                   0   0.005
1.y3~1              0.021       0.019      0.044                   0   0.021
1.y4~1              0.014       0.039      0.044                   0   0.015
1.y5~1              0.007       0.033      0.044                   0   0.007
1.y6~1              0.013       0.021      0.045                   0   0.013
         Std.Est.SD Average.Param Average.Bias Coverage
1.f1=~y1      0.014          0.70       -0.009      1.0
1.f1=~y2      0.016          0.70       -0.015      1.0
1.f1=~y3      0.018          0.70       -0.004      1.0
1.f1=~y4      0.039          0.70       -0.034      0.8
1.f1=~y5      0.022          0.70       -0.005      1.0
1.f1=~y6      0.028          0.70        0.027      0.8
1.y1~~y1      0.020          0.51       -0.006      1.0
1.y2~~y2      0.022          0.51        0.021      1.0
1.y3~~y3      0.025          0.51       -0.014      1.0
1.y4~~y4      0.051          0.51       -0.001      1.0
1.y5~~y5      0.031          0.51       -0.004      1.0
1.y6~~y6      0.040          0.51       -0.025      1.0
1.y1~1        0.029          0.00        0.018      1.0
1.y2~1        0.042          0.00        0.005      1.0
1.y3~1        0.020          0.00        0.021      1.0
1.y4~1        0.041          0.00        0.014      1.0
1.y5~1        0.033          0.00        0.007      1.0
1.y6~1        0.021          0.00        0.013      1.0
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.669 -0.669  0.996 -0.977 -0.998  1.000
AIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
BIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
RMSEA  0.996 -0.616 -0.616  1.000 -0.966 -0.990  0.997
CFI   -0.977  0.791  0.791 -0.966  1.000  0.985 -0.978
TLI   -0.998  0.710  0.710 -0.990  0.985  1.000 -0.997
SRMR   1.000 -0.667 -0.667  0.997 -0.978 -0.997  1.000
================== Replications =====================
Number of replications = 5 
Number of converged replications = 5 
Number of nonconverged replications: 
   1. Nonconvergent Results = 0 
   2. Nonconvergent results from multiple imputation = 0 
   3. At least one SE were negative or NA = 0 
   4. At least one variance estimates were negative = 0 
   5. At least one correlation estimates were greater than 1 or less than -1 = 0 
> 
> # Short summary of the simulation result
> summaryShort(Output)
RESULT OBJECT
[1] "CFA"
Model Type: CFA 
Convergence 5 / 5 
Sample size: 500 
Percent Completely Missing at Random: 0 
Percent Missing at Random: 0 
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices     0.05     Mean     SD
      Chi     17.314   11.619  5.626
      AIC   7510.452 7448.091 69.165
      BIC   7586.315 7523.954 69.165
      RMSEA    0.043    0.022  0.021
      CFI      0.992    0.996  0.004
      TLI      0.986    0.996  0.009
      SRMR     0.019    0.015  0.004
> 
> # Find the fit index cutoff
> getCutoff(Output, 0.05)
         Chi      AIC      BIC     RMSEA       CFI      TLI       SRMR
95% 17.31436 7510.452 7586.315 0.0429723 0.9915622 0.985937 0.01886139
> 
> # Summary of parameter estimates
> summaryParam(Output)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.f1=~y1      0.690756222  0.02810821 0.04149426                   1
1.f1=~y2      0.684804689  0.02263634 0.04211500                   1
1.f1=~y3      0.696132948  0.01555982 0.04135121                   1
1.f1=~y4      0.665635622  0.05563833 0.04117407                   1
1.f1=~y5      0.695344608  0.03075860 0.04160583                   1
1.f1=~y6      0.726805524  0.04988728 0.04168946                   1
1.y1~~y1      0.504025183  0.01390452 0.03830916                   1
1.y2~~y2      0.530959133  0.03432323 0.03978899                   1
1.y3~~y3      0.495700391  0.04352864 0.03793284                   1
1.y4~~y4      0.509197716  0.03774771 0.03808873                   1
1.y5~~y5      0.505610360  0.05558942 0.03852026                   1
1.y6~~y6      0.484795803  0.02083427 0.03801104                   1
1.y1~1        0.018166032  0.02869038 0.04430370                   0
1.y2~1        0.004590901  0.04278074 0.04471879                   0
1.y3~1        0.020747719  0.01949684 0.04427270                   0
1.y4~1        0.013662145  0.03941881 0.04367343                   0
1.y5~1        0.006917364  0.03267555 0.04446808                   0
1.y6~1        0.013019025  0.02085171 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.f1=~y1 0.697070159 0.01422193          0.70 -0.0092437783      1.0
1.f1=~y2 0.684851044 0.01632425          0.70 -0.0151953108      1.0
1.f1=~y3 0.703397048 0.01804011          0.70 -0.0038670517      1.0
1.f1=~y4 0.680861395 0.03863725          0.70 -0.0343643776      0.8
1.f1=~y5 0.699459947 0.02232974          0.70 -0.0046553920      1.0
1.f1=~y6 0.721071704 0.02764565          0.70  0.0268055239      0.8
1.y1~~y1 0.513931382 0.01991775          0.51 -0.0059748167      1.0
1.y2~~y2 0.530765863 0.02240771          0.51  0.0209591335      1.0
1.y3~~y3 0.504972236 0.02529070          0.51 -0.0142996089      1.0
1.y4~~y4 0.535233491 0.05128520          0.51 -0.0008022839      1.0
1.y5~~y5 0.510356889 0.03111061          0.51 -0.0043896404      1.0
1.y6~~y6 0.479444173 0.03996515          0.51 -0.0252041971      1.0
1.y1~1   0.018417694 0.02909934          0.00  0.0181660316      1.0
1.y2~1   0.004545719 0.04208763          0.00  0.0045909006      1.0
1.y3~1   0.021140083 0.02002118          0.00  0.0207477190      1.0
1.y4~1   0.014854828 0.04097595          0.00  0.0136621452      1.0
1.y5~1   0.007233837 0.03314308          0.00  0.0069173639      1.0
1.y6~1   0.013257580 0.02080364          0.00  0.0130190253      1.0
> 
> # Summary of population parameters
> summaryPopulation(Output)
                 1.f1=~y1 1.f1=~y2 1.f1=~y3 1.f1=~y4 1.f1=~y5 1.f1=~y6 1.y1~~y1
Population Value 0.7      0.7      0.7      0.7      0.7      0.7      0.51    
                 1.y2~~y2 1.y3~~y3 1.y4~~y4 1.y5~~y5 1.y6~~y6 1.y1~1 1.y2~1
Population Value 0.51     0.51     0.51     0.51     0.51     0      0     
                 1.y3~1 1.y4~1 1.y5~1 1.y6~1
Population Value 0      0      0      0     
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimSem-class")
> ### * SimSem-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimSem-class
> ### Title: Class '"SimSem"'
> ### Aliases: SimSem-class summary,SimSem-method
> 
> ### ** Examples
> 
> showClass("SimSem")
Class "SimSem" [package "simsem"]

Slots:
                                              
Name:         pt      dgen modelType  groupLab
Class:      list      list character character
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LY <- bind(loading, loadingValues)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> # Error Correlation Object
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTE <- binds(error.cor)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> summary(CFA.Model)
Model Type
[1] "CFA"
========================Lavaan Analysis Model========================
   id lhs op rhs user group free ustart exo eq.id label unco
1   1  f1 =~  y1    0     1    1     NA   0     0          1
2   2  f1 =~  y2    0     1    2     NA   0     0          2
3   3  f1 =~  y3    0     1    3     NA   0     0          3
4   4  f1 =~  y4    0     1    0      0   0     0          0
5   5  f1 =~  y5    0     1    0      0   0     0          0
6   6  f1 =~  y6    0     1    0      0   0     0          0
7   7  f2 =~  y1    0     1    0      0   0     0          0
8   8  f2 =~  y2    0     1    0      0   0     0          0
9   9  f2 =~  y3    0     1    0      0   0     0          0
10 10  f2 =~  y4    0     1    4     NA   0     0          4
11 11  f2 =~  y5    0     1    5     NA   0     0          5
12 12  f2 =~  y6    0     1    6     NA   0     0          6
13 13  f1 ~~  f1    0     1    0      1   0     0          0
14 14  f1 ~~  f2    0     1    7     NA   0     0          7
15 15  f2 ~~  f2    0     1    0      1   0     0          0
16 16  y1 ~~  y1    0     1    8     NA   0     0          8
17 17  y1 ~~  y2    0     1    0      0   0     0          0
18 18  y1 ~~  y3    0     1    0      0   0     0          0
19 19  y1 ~~  y4    0     1    0      0   0     0          0
20 20  y1 ~~  y5    0     1    0      0   0     0          0
21 21  y1 ~~  y6    0     1    0      0   0     0          0
22 22  y2 ~~  y2    0     1    9     NA   0     0          9
23 23  y2 ~~  y3    0     1    0      0   0     0          0
24 24  y2 ~~  y4    0     1    0      0   0     0          0
25 25  y2 ~~  y5    0     1    0      0   0     0          0
26 26  y2 ~~  y6    0     1    0      0   0     0          0
27 27  y3 ~~  y3    0     1   10     NA   0     0         10
28 28  y3 ~~  y4    0     1    0      0   0     0          0
29 29  y3 ~~  y5    0     1    0      0   0     0          0
30 30  y3 ~~  y6    0     1    0      0   0     0          0
31 31  y4 ~~  y4    0     1   11     NA   0     0         11
32 32  y4 ~~  y5    0     1    0      0   0     0          0
33 33  y4 ~~  y6    0     1    0      0   0     0          0
34 34  y5 ~~  y5    0     1   12     NA   0     0         12
35 35  y5 ~~  y6    0     1    0      0   0     0          0
36 36  y6 ~~  y6    0     1   13     NA   0     0         13
37 37  f1 ~1        0     1    0      0   0     0          0
38 38  f2 ~1        0     1    0      0   0     0          0
39 39  y1 ~1        0     1   14     NA   0     0         14
40 40  y2 ~1        0     1   15     NA   0     0         15
41 41  y3 ~1        0     1   16     NA   0     0         16
42 42  y4 ~1        0     1   17     NA   0     0         17
43 43  y5 ~1        0     1   18     NA   0     0         18
44 44  y6 ~1        0     1   19     NA   0     0         19
========================Data Generation Template========================
-------- Group 1 --------

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    0    0    0    0    0
[2,]    0    1    0    0    0    0
[3,]    0    0    1    0    0    0
[4,]    0    0    0    1    0    0
[5,]    0    0    0    0    1    0
[6,]    0    0    0    0    0    1

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("SimVector-class")
> ### * SimVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimVector-class
> ### Title: Vector object: Random parameters vector
> ### Aliases: SimVector-class summaryShort,SimVector-method
> ###   summary,SimVector-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimVector")
Class "SimVector" [package "simsem"]

Slots:
                                 
Name:      free popParam  misspec
Class:   vector   vector   vector
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- bind(factor.mean, factor.mean.starting)
> rawDraw(AL)
$param
[1] 5 2

$paramMis
[1] 5 2

> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Population Parameters/Starting Values:"
[1] "5" "2"
[1] "Model misspecification"
logical(0)
> summaryShort(AL)
[1] "NA:5" "NA:2"
> 
> 
> 
> cleanEx()
> nameEx("analyze")
> ### * analyze
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: analyze
> ### Title: Data analysis using the model specification
> ### Aliases: analyze
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> dat <- generate(CFA.Model,200)
> out <- analyze(CFA.Model,dat)
> 
> 
> 
> cleanEx()
> nameEx("anova")
> ### * anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova
> ### Title: Provide a comparison of nested models and nonnested models
> ###   across replications
> ### Aliases: anova,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading1 <- matrix(0, 6, 1)
> ##D loading1[1:6, 1] <- NA
> ##D loading2 <- loading1
> ##D loading2[6,1] <- 0
> ##D LY1 <- bind(loading1, 0.7)
> ##D LY2 <- bind(loading2, 0.7)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model1 <- model(LY = LY1, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D CFA.Model2 <- model(LY = LY2, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D # Need to make sure that both simResult calls have the same seed!
> ##D Output1 <- sim(5, n=500, model=CFA.Model1, generate=CFA.Model1, seed=123567)
> ##D Output2 <- sim(5, n=500, model=CFA.Model2, generate=CFA.Model1, seed=123567)
> ##D anova(Output1, Output2)
> ##D 
> ##D # The example when the sample size is varying
> ##D Output1b <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model1, generate=CFA.Model1, seed=123567)
> ##D Output2b <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model2, generate=CFA.Model1, seed=123567)
> ##D anova(Output1b, Output2b)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bind")
> ### * bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind
> ### Title: Specify matrices for Monte Carlo simulation of structural
> ###   equation models
> ### Aliases: bind binds
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LY <- bind(loading, loadingValues)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Population Parameters/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
[1] "Model misspecification"
     [,1]
[1,]  NaN
> 
> # Set both factor correlations to .05
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> # Misspecify all error covarainces
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- NA
> RTE <- binds(error.cor,1,"runif(1,-.05,.05)")
> 
> 
> 
> cleanEx()
> nameEx("bindDist")
> ### * bindDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bindDist
> ### Title: Create a data distribution object.
> ### Aliases: bindDist
> 
> ### ** Examples
> 
> # Create three-dimensional distribution by gaussian copula with 
> # the following marginal distributions
> #   1. t-distribution with df = 2
> # 	2. chi-square distribution with df = 3
> #	3. normal distribution with mean = 0 and sd = 1
> 
> # Setting the attribute of each marginal distribution
> d1 <- list(df=2)
> d2 <- list(df=3)
> d3 <- list(mean=0, sd=1)
> 
> # Create a data distribution object by setting the names of each distribution
> # and their arguments
> dist <- bindDist(c("t", "chisq", "norm"), d1, d2, d3)
> 
> 
> 
> cleanEx()
> nameEx("continuousPower")
> ### * continuousPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: continuousPower
> ### Title: Find power of model parameters when simulations have randomly
> ###   varying parameters
> ### Aliases: continuousPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, 0.7)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D dat <- generate(CFA.Model, 50)
> ##D out <- analyze(CFA.Model, dat)
> ##D 
> ##D # Specify both continuous sample size and percent missing completely at random. Note that more fine-grained 
> ##D # values of n and pmMCAR is needed, e.g., n=seq(50, 500, 1) and pmMCAR=seq(0, 0.2, 0.01)
> ##D Output <- sim(NULL, CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D # Find the power of all combinations of different sample size and percent MCAR missing
> ##D Cpow <- continuousPower(Output, contN = TRUE, contMCAR = TRUE)
> ##D Cpow
> ##D 
> ##D # Find the power of parameter estimates when sample size is 200 and percent MCAR missing is 0.3
> ##D Cpow2 <- continuousPower(Output, contN = TRUE, contMCAR = TRUE, pred=list(N = 200, pmMCAR = 0.3))
> ##D Cpow2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createData")
> ### * createData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createData
> ### Title: Create data from a set of drawn parameters.
> ### Aliases: createData
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> # Draw a parameter set for data generation.
> param <- draw(CFA.Model)
> 
> # Generate data from the first group in the paramList.
> dat <- createData(param[[1]], n = 200) 
> 
> 
> 
> cleanEx()
> nameEx("draw")
> ### * draw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw
> ### Title: Draw parameters from a 'SimSem' object.
> ### Aliases: draw
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> # Draw a parameter set for data generation.
> param <- draw(CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("estmodel")
> ### * estmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estmodel
> ### Title: Shortcut for data analysis template for simulation.
> ### Aliases: estmodel estmodel.cfa estmodel.path estmodel.sem
> 
> ### ** Examples
> 
> loading <- matrix(0, 12, 4)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading[10:12, 4] <- NA
> 
> CFA.Model <- estmodel(LY = loading, modelType = "CFA")
> 
> path <- matrix(0, 4, 4)
> path[3, 1:2] <- NA
> path[4, 3] <- NA
> Path.Model <- estmodel(BE = path, modelType = "Path")
> 
> SEM.Model <- estmodel(BE = path, LY = loading, modelType="SEM")
> 
> # Shortcut
> CFA.Model <- estmodel.cfa(LY = loading)
> Path.Model <- estmodel.path(BE = path)
> SEM.Model <- estmodel.sem(BE = path, LY = loading)
> 
> 
> 
> cleanEx()
> nameEx("exportData")
> ### * exportData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exportData
> ### Title: Export data sets for analysis with outside SEM program.
> ### Aliases: exportData
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> ## Export 20 replications to an external data file (not run).
> #exportData(20, CFA.Model, 200)
> 
> 
> 
> cleanEx()
> nameEx("findFactorIntercept")
> ### * findFactorIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorIntercept
> ### Title: Find factor intercept from regression coefficient matrix and
> ###   factor total means
> ### Aliases: findFactorIntercept
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> factorMean <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorIntercept(path, factorMean)
[1]  5.0  2.0  3.0 -3.0 -3.2 -2.6  0.0  0.0  0.0
> 
> 
> 
> cleanEx()
> nameEx("findFactorMean")
> ### * findFactorMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorMean
> ### Title: Find factor total means from regression coefficient matrix and
> ###   factor intercept
> ### Aliases: findFactorMean
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> intcept <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorMean(path, intcept)
[1] 5.00 2.00 3.00 3.00 3.20 2.60 1.80 3.12 2.84
> 
> 
> 
> cleanEx()
> nameEx("findFactorResidualVar")
> ### * findFactorResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorResidualVar
> ### Title: Find factor residual variances from regression coefficient
> ###   matrix, factor (residual) correlations, and total factor variances
> ### Aliases: findFactorResidualVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> totalVar <- rep(1, 9)
> findFactorResidualVar(path, facCor, totalVar)
[1] 1.00000 1.00000 1.00000 0.64000 0.28800 0.28800 0.64000 0.29568 0.21888
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalCov")
> ### * findFactorTotalCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalCov
> ### Title: Find factor total covariance from regression coefficient matrix,
> ###   factor residual covariance
> ### Aliases: findFactorTotalCov
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalCov(path, corPsi=facCor, errorVarPsi=residualVar)
       [,1]  [,2]  [,3]   [,4]   [,5]   [,6]    [,7]    [,8]    [,9]
 [1,] 1.000 0.400 0.400 0.6000 0.6400 0.4000 0.36000 0.62400 0.49600
 [2,] 0.400 1.000 0.400 0.2400 0.7600 0.6400 0.14400 0.55200 0.68800
 [3,] 0.400 0.400 1.000 0.2400 0.4000 0.7600 0.14400 0.33600 0.61600
 [4,] 0.600 0.240 0.240 1.0000 0.3840 0.2400 0.60000 0.63040 0.29760
 [5,] 0.640 0.760 0.400 0.3840 1.0000 0.5440 0.23040 0.75360 0.72640
 [6,] 0.400 0.640 0.760 0.2400 0.5440 1.0000 0.14400 0.42240 0.81760
 [7,] 0.360 0.144 0.144 0.6000 0.2304 0.1440 1.00000 0.37824 0.17856
 [8,] 0.624 0.552 0.336 0.6304 0.7536 0.4224 0.37824 1.00000 0.55488
 [9,] 0.496 0.688 0.616 0.2976 0.7264 0.8176 0.17856 0.55488 1.00000
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalVar")
> ### * findFactorTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalVar
> ### Title: Find factor total variances from regression coefficient matrix,
> ###   factor (residual) correlations, and factor residual variances
> ### Aliases: findFactorTotalVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalVar(path, facCor, residualVar)
[1] 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findIndIntercept")
> ### * findIndIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndIntercept
> ### Title: Find indicator intercepts from factor loading matrix, total
> ###   factor mean, and indicator mean.
> ### Aliases: findIndIntercept
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> indMean <- rep(1, 6)
> findIndIntercept(loading, facMean, indMean)
[1] 0.70 0.65 0.60 0.88 0.86 0.84
> 
> 
> 
> cleanEx()
> nameEx("findIndMean")
> ### * findIndMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndMean
> ### Title: Find indicator total means from factor loading matrix, total
> ###   factor mean, and indicator intercept.
> ### Aliases: findIndMean
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> intcept <- rep(0, 6)
> findIndMean(loading, facMean, intcept)
[1] 0.30 0.35 0.40 0.12 0.14 0.16
> 
> 
> 
> cleanEx()
> nameEx("findIndResidualVar")
> ### * findIndResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndResidualVar
> ### Title: Find indicator residual variances from factor loading matrix,
> ###   total factor covariance, and total indicator variances.
> ### Aliases: findIndResidualVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> totalVar <- rep(1, 6)
> findIndResidualVar(loading, facCov, totalVar)
[1] 0.64 0.51 0.36 0.64 0.51 0.36
> 
> 
> 
> cleanEx()
> nameEx("findIndTotalVar")
> ### * findIndTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndTotalVar
> ### Title: Find indicator total variances from factor loading matrix, total
> ###   factor covariance, and indicator residual variances.
> ### Aliases: findIndTotalVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> resVar <- c(0.64, 0.51, 0.36, 0.64, 0.51, 0.36)
> findIndTotalVar(loading, facCov, resVar)
[1] 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findPossibleFactorCor")
> ### * findPossibleFactorCor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPossibleFactorCor
> ### Title: Find the appropriate position for freely estimated correlation
> ###   (or covariance) given a regression coefficient matrix
> ### Aliases: findPossibleFactorCor
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findPossibleFactorCor(path)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1   NA   NA    0    0    0    0    0    0
 [2,]   NA    1   NA    0    0    0    0    0    0
 [3,]   NA   NA    1    0    0    0    0    0    0
 [4,]    0    0    0    1   NA   NA    0    0    0
 [5,]    0    0    0   NA    1   NA    0    0    0
 [6,]    0    0    0   NA   NA    1    0    0    0
 [7,]    0    0    0    0    0    0    1   NA   NA
 [8,]    0    0    0    0    0    0   NA    1   NA
 [9,]    0    0    0    0    0    0   NA   NA    1
> 
> 
> 
> cleanEx()
> nameEx("findPower")
> ### * findPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPower
> ### Title: Find a value of independent variables that provides a given
> ###   value of power.
> ### Aliases: findPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, 0.4)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Specify both sample size and percent missing completely at random. Note that more fine-grained 
> ##D # values of n and pmMCAR is needed, e.g., n=seq(50, 500, 1) and pmMCAR=seq(0, 0.2, 0.01)
> ##D Output <- sim(NULL, model=CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D 
> ##D # Find the power of all possible combination of N and pmMCAR
> ##D pow <- getPower(Output)
> ##D 
> ##D # Find the sample size that provides the power of 0.8
> ##D findPower(pow, "N", 0.80)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("findRecursiveSet")
> ### * findRecursiveSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRecursiveSet
> ### Title: Group variables regarding the position in mediation chain
> ### Aliases: findRecursiveSet
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findRecursiveSet(path)
[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

> 
> 
> 
> cleanEx()
> nameEx("generate")
> ### * generate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate
> ### Title: Generate data using SimSem template
> ### Aliases: generate
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> dat <- generate(CFA.Model,200)
> 
> 
> 
> cleanEx()
> nameEx("getCutoff")
> ### * getCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoff
> ### Title: Find fit indices cutoff given a priori alpha level
> ### Aliases: getCutoff getCutoff-methods getCutoff,data.frame-method
> ###   getCutoff,matrix-method getCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LY <- bind(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTE <- binds(error.cor)
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(5, n = 200, model=CFA.Model)
> ##D 
> ##D # Get the cutoff (critical value) when alpha is 0.05
> ##D getCutoff(Output, 0.05)
> ##D 
> ##D # Finding the cutoff when the sample size is varied. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output2 <- sim(NULL, model=CFA.Model, n=seq(50, 100, 10))
> ##D 
> ##D # Get the fit index cutoff when sample size is 75.
> ##D getCutoff(Output2, 0.05, nVal = 75)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNested")
> ### * getCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNested
> ### Title: Find fit indices cutoff for nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Nested Model
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D 
> ##D error.cor.mis <- matrix("rnorm(1, 0, 0.1)", 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTE <- binds(diag(6), misspec=error.cor.mis)
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Parent Model
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL)
> ##D 
> ##D # Find the fix index cutoff from the sampling distribution of the difference
> ##D # in fit index of nested models where the alpha is 0.05.
> ##D getCutoffNested(Output.NULL.NULL, Output.NULL.ALT, alpha=0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNonNested")
> ### * getCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNonNested
> ### Title: Find fit indices cutoff for non-nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A: Factor 1 with items 1-3 and Factor 2 with items 4-8
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LY.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTE <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LY.A, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Model B: Factor 1 with items 1-4 and Factor 2 with items 5-8
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LY.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LY.B, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D # Find the cutoffs from the sampling distribution to reject model A (model 1)
> ##D # and to reject model B (model 2)
> ##D getCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D 
> ##D # Find the cutoffs from the sampling distribution to reject model A (model 1)
> ##D getCutoffNonNested(Output.A.A, Output.A.B)
> ##D 
> ##D # Find the cutoffs from the sampling distribution to reject model B (model 1)
> ##D getCutoffNonNested(Output.B.B, Output.B.A)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getExtraOutput")
> ### * getExtraOutput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getExtraOutput
> ### Title: Get extra outputs from the result of simulation
> ### Aliases: getExtraOutput
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, 0.7)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Write a function to extract the modification index from lavaan object
> ##D outfun <- function(out) {
> ##D 	result <- inspect(out, "mi")
> ##D }
> ##D 
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(5, n=200, model=CFA.Model, outfun=outfun)
> ##D 
> ##D # Get the modification index of each replication
> ##D getExtraOutput(Output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPopulation")
> ### * getPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPopulation
> ### Title: Extract the data generation population model underlying a result
> ###   object
> ### Aliases: getPopulation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, "runif(1, 0.4, 0.9)")
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We will use only 10 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(10, n=200, model=CFA.Model)
> ##D 
> ##D # Get the population parameters
> ##D getPopulation(Output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPower")
> ### * getPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPower
> ### Title: Find power of model parameters
> ### Aliases: getPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, 0.7)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Specify both sample size and percent missing completely at random. Note that more fine-grained 
> ##D # values of n and pmMCAR is needed, e.g., n=seq(50, 500, 1) and pmMCAR=seq(0, 0.2, 0.01)
> ##D Output <- sim(NULL, model=CFA.Model, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D # Get the power of all possible combinations of n and pmMCAR
> ##D getPower(Output)
> ##D 
> ##D # Get the power of the combinations of n of 100 and 200 and pmMCAR of 0, 0.1, and 0.2
> ##D getPower(Output, nVal=c(100, 200), pmMCARval=c(0, 0.1, 0.2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFit")
> ### * getPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFit
> ### Title: Find power in rejecting alternative models based on fit indices
> ###   criteria
> ### Aliases: getPowerFit getPowerFit-methods
> ###   getPowerFit,data.frame,vector-method getPowerFit,matrix,vector-method
> ###   getPowerFit,SimResult,vector-method
> ###   getPowerFit,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Null model with one factor
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- sim(5, n=500, model=CFA.Model.NULL)
> ##D 
> ##D # Get the fit index cutoff from the null model
> ##D Cut.NULL <- getCutoff(Output.NULL, 0.05)
> ##D 
> ##D # Alternative model with two factor
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.ALT <- sim(5, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D # Get the power based on the derived cutoff
> ##D getPowerFit(Output.ALT, cutoff=Cut.NULL)
> ##D 
> ##D # Get the power based on the rule of thumb proposed by Hu & Bentler (1999)
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D getPowerFit(Output.ALT, cutoff=Rule.of.thumb, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D # The example of continous varying sample size. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D # Get the power based on the derived cutoff from the null model at the sample size of 250
> ##D getPowerFit(Output.ALT2, nullObject=Output.NULL2, nVal=250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNested")
> ### * getPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNested
> ### Title: Find power in rejecting nested models based on the differences
> ###   in fit indices
> ### Aliases: getPowerFitNested getPowerFitNested-methods
> ###   getPowerFitNested,SimResult,SimResult,vector-method
> ###   getPowerFitNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Null model (Nested model) with one factor
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Alternative model (Parent model) with two factors
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 10 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D # Find the power based on the derived cutoff from the models analyzed on the null datasets
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D 
> ##D # Find the power based on the chi-square value at df=1 and the CFI change (intentionally
> ##D # use a cutoff from Cheung and Rensvold (2002) in an appropriate situation).
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10))
> ##D 
> ##D # The example of continous varying sample size. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output.NULL.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT2 <- sim(NULL, n=seq(50, 500, 50), model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D # Get the power based on the derived cutoff from the null model at the sample size of 250
> ##D getPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, nVal = 250)
> ##D 
> ##D # Get the power based on the rule of thumb from the null model at the sample size of 250
> ##D getPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(Chi=3.84, CFI=-0.10), nVal = 250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNonNested")
> ### * getPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNonNested
> ### Title: Find power in rejecting non-nested models based on the
> ###   differences in fit indices
> ### Aliases: getPowerFitNonNested getPowerFitNonNested-methods
> ###   getPowerFitNonNested,SimResult,SimResult,vector-method
> ###   getPowerFitNonNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A: Factor 1 on Items 1-3 and Factor 2 on Items 4-8
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LY.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTE <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LY.A, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Model B: Factor 1 on Items 1-4 and Factor 2 on Items 5-8
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LY.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LY.B, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A) 
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A) 
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B) 
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B) 
> ##D 
> ##D # Find the power based on the derived cutoff for both models
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D 
> ##D # Find the power based on the AIC and BIC of 0 (select model B if Output.B.B has lower AIC or BIC)
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("imposeMissing")
> ### * imposeMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imposeMissing
> ### Title: Impose MAR, MCAR, planned missingness, or attrition on a data
> ###   set
> ### Aliases: imposeMissing impose
> 
> ### ** Examples
> 
>   data <- matrix(rep(rnorm(10,1,1),19),ncol=19)
>   datac <- cbind(data,rnorm(10,0,1),rnorm(10,5,5))
>  
>   # Imposing Missing with the following arguments produces no missing values
>   imposeMissing(data)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,cov=c(1,2))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMCAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,nforms=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
> 
>   #Some more usage examples
>   
>   # No missing at variables 1 and 2
>   imposeMissing(data,cov=c(1,2),pmMCAR=.1)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316        NA 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291        NA 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   
>   # 3-Form design
>   imposeMissing(data,nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA
 [8,]        NA        NA        NA        NA        NA
 [9,]        NA        NA        NA        NA        NA
[10,]        NA        NA        NA        NA        NA
>   
>   # 3-Form design with specified groups of items (XABC)
>   imposeMissing(data,nforms=3,itemGroups=list(c(1,2,3,4,5),c(6,7,8,9,10),c(11,12,13,14,15),c(16,17,18,19)))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078 1.3295078        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,]        NA 2.5952808 2.5952808 2.5952808 2.5952808
 [5,]        NA 1.3295078 1.3295078 1.3295078 1.3295078
 [6,]        NA 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291        NA        NA        NA        NA
 [8,] 1.7383247        NA        NA        NA        NA
 [9,] 1.5757814        NA        NA        NA        NA
[10,] 0.6946116        NA        NA        NA        NA
>   
>   # 3-Form design when variables 20 and 21 are not missing
>   imposeMissing(datac,cov=c(20,21),nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462  1.51178117  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078  1.12493092  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA -0.01619026  4.221022
 [8,]        NA        NA        NA        NA        NA  0.94383621 -2.353762
 [9,]        NA        NA        NA        NA        NA  0.82122120  2.609250
[10,]        NA        NA        NA        NA        NA  0.59390132  7.089708
>   
>   # 2 method design where the expensive measure is on Variable 19
>   imposeMissing(data,twoMethod=c(19,.8))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808        NA
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247        NA
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   
>   # Impose missing data with percent attrition of 0.1 in 5 time points
>   imposeMissing(datac,cov=21,prAttr=.1,timePoints=5)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA        NA        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462        NA        NA        NA        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA        NA        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,]        NA        NA        NA        NA        NA          NA  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,]        NA        NA        NA        NA        NA          NA  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA          NA  4.221022
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247  0.94383621 -2.353762
 [9,] 1.5757814 1.5757814        NA        NA        NA          NA  2.609250
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116  0.59390132  7.089708
> 
>   # Logistic-regression MAR
>   colnames(data) <- paste("y", 1:ncol(data), sep="")
>   script <- 'y1 ~ 0.05 + 0.1*y2 + 0.3*y3
+ 			y4 ~ -2 + 0.1*y4
+ 			y5 ~ -0.5'
>   imposeMissing(data, logit=script)
             y1        y2        y3        y4        y5        y6        y7
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA 1.1836433 1.1836433 1.1836433        NA 1.1836433 1.1836433
 [3,]        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,]        NA 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,]        NA 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA 1.4874291 1.4874291        NA 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,]        NA 1.5757814 1.5757814 1.5757814        NA 1.5757814 1.5757814
[10,]        NA 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
             y8        y9       y10       y11       y12       y13       y14
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
            y15       y16       y17       y18       y19
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
> 
> 
> 
> cleanEx()
> nameEx("likRatioFit")
> ### * likRatioFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: likRatioFit
> ### Title: Find the likelihood ratio (or Bayes factor) based on the
> ###   bivariate distribution of fit indices
> ### Aliases: likRatioFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A; Factor 1 --> Factor 2; Factor 2 --> Factor 3
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D model.A <- estmodel(LY=loading, BE=path.A, modelType="SEM", indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D 
> ##D out.A <- analyze(model.A, PoliticalDemocracy)
> ##D 
> ##D # Model A; Factor 1 --> Factor 3; Factor 3 --> Factor 2
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[3, 1] <- NA
> ##D path.B[2, 3] <- NA
> ##D model.B <- estmodel(LY=loading, BE=path.B, modelType="SEM", indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D 
> ##D out.B <- analyze(model.B, PoliticalDemocracy)
> ##D 
> ##D loading.mis <- matrix("runif(1, -0.2, 0.2)", 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D 
> ##D # Create SimSem object for data generation and data analysis template
> ##D datamodel.A <- model.lavaan(out.A, std=TRUE, LY=loading.mis)
> ##D datamodel.B <- model.lavaan(out.B, std=TRUE, LY=loading.mis)
> ##D 
> ##D # Get sample size
> ##D n <- nrow(PoliticalDemocracy)
> ##D 
> ##D # The actual number of replications should be greater than 20.
> ##D output.A.A <- sim(20, n=n, model.A, generate=datamodel.A) 
> ##D output.A.B <- sim(20, n=n, model.B, generate=datamodel.A)
> ##D output.B.A <- sim(20, n=n, model.A, generate=datamodel.B)
> ##D output.B.B <- sim(20, n=n, model.B, generate=datamodel.B)
> ##D 
> ##D # Find the likelihood ratio ;The output may contain some warnings here. 
> ##D # When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D likRatioFit(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("miss")
> ### * miss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miss
> ### Title: Specifying the missing template to impose on a dataset
> ### Aliases: miss
> 
> ### ** Examples
> 
> #Example of imposing 10% MCAR missing in all variables with no imputations (FIML method)
> Missing <- miss(pmMCAR=0.1, ignoreCols="group")
> summary(Missing)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates: none 
Ignored Variables: group 
Proportion of MCAR: 0.1 
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LY <- bind(loading, 0.7)
> RPS <- binds(diag(1))
> RTE <- binds(diag(6))
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> 
> #Create data
> dat <- generate(CFA.Model, n = 20)
> 
> #Impose missing
> datmiss <- impose(Missing, dat)
> 
> #Analyze data
> out <- analyze(CFA.Model, datmiss)
> summary(out)
lavaan (0.5-9) converged normally after  29 iterations

  Number of observations                            20

  Number of missing patterns                         7

  Estimator                                         ML
  Minimum Function Chi-square                    3.302
  Degrees of freedom                                 9
  P-value                                        0.951

Parameter estimates:

  Information                                 Observed
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  f1 =~
    y1                0.685    0.188    3.649    0.000
    y2                0.577    0.168    3.427    0.001
    y3                0.624    0.179    3.483    0.000
    y4                0.450    0.211    2.130    0.033
    y5                0.380    0.126    3.025    0.002
    y6                1.054    0.154    6.858    0.000

Covariances:
  y1 ~~
    y2                0.000
    y3                0.000
    y4                0.000
    y5                0.000
    y6                0.000
  y2 ~~
    y3                0.000
    y4                0.000
    y5                0.000
    y6                0.000
  y3 ~~
    y4                0.000
    y5                0.000
    y6                0.000
  y4 ~~
    y5                0.000
    y6                0.000
  y5 ~~
    y6                0.000

Intercepts:
    f1                0.000
    y1               -0.149    0.215   -0.691    0.489
    y2               -0.030    0.197   -0.150    0.880
    y3                0.015    0.207    0.075    0.940
    y4               -0.212    0.248   -0.858    0.391
    y5               -0.192    0.144   -1.334    0.182
    y6               -0.238    0.223   -1.068    0.286

Variances:
    f1                1.000
    y1                0.456    0.149
    y2                0.398    0.123
    y3                0.386    0.131
    y4                0.874    0.293
    y5                0.258    0.079
    y6               -0.132    0.096

> 
> #Missing using logistic regression
>   script <- 'y1 ~ 0.05 + 0.1*y2 + 0.3*y3
+ 			y4 ~ -2 + 0.1*y4
+ 			y5 ~ -0.5' 
> Missing2 <- miss(logit=script, pmMCAR=0.1, ignoreCols="group")
> summary(Missing2)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates: none 
Ignored Variables: group 
Proportion of MCAR: 0.1 
Logistic-regression MAR:
y1 ~ 0.05 + 0.1*y2 + 0.3*y3
			y4 ~ -2 + 0.1*y4
			y5 ~ -0.5 
> datmiss2 <- impose(Missing2, dat)
> 
> #Example to create simMissing object for 3 forms design at 3 timepoints with 10 imputations
> Missing <- miss(nforms=3, timePoints=3, numImps=10)
> 
> #Missing template for data analysis with multiple imputation
> Missing <- miss(package="mice", m=10, chi="all", convergentCutoff=0.6)
> 
> 
> 
> cleanEx()
> nameEx("model")
> ### * model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model
> ### Title: Data generation template and analysis template for simulation.
> ### Aliases: model model.cfa model.path model.sem
> 
> ### ** Examples
> 
> # Example 1: Confirmatory factor analysis
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> # Example 2: Multiple-group CFA with weak invariance
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- paste0("con", 1:3)
> loading[4:6, 2] <- paste0("con", 4:6)
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VTE <- bind(rep(NA, 6), 0.51)
> 
> CFA.Model <- model(LY = LY, RPS = list(RPS, RPS), RTE = list(RTE, RTE), VTE=list(VTE, VTE), ngroups=2, modelType = "CFA")
> 
> # Example 3: Linear growth curve model with model misspecification
> factor.loading <- matrix(NA, 4, 2)
> factor.loading[,1] <- 1
> factor.loading[,2] <- 0:3
> LY <- bind(factor.loading)
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- bind(factor.mean, factor.mean.starting)
> 
> factor.var <- rep(NA, 2)
> factor.var.starting <- c(1, 0.25)
> VPS <- bind(factor.var, factor.var.starting)
> 
> factor.cor <- matrix(NA, 2, 2)
> diag(factor.cor) <- 1
> RPS <- binds(factor.cor, 0.5)
> 
> VTE <- bind(rep(NA, 4), 1.2)
> 
> RTE <- binds(diag(4))
> 
> TY <- bind(rep(0, 4))
> 
> LCA.Model <- model(LY=LY, RPS=RPS, VPS=VPS, AL=AL, VTE=VTE, RTE=RTE, TY=TY, modelType="CFA")
> 
> # Example 4: Path analysis model with misspecified direct effect
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "runif(1, 0.3, 0.5)"
> starting.BE[4, 3] <- "runif(1,0.5,0.7)"
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- "runif(1,-0.1,0.1)"
> BE <- bind(path.BE, starting.BE, misspec=mis.path.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- binds(residual.error, "rnorm(1,0.3,0.1)")
> 
> ME <- bind(rep(NA, 4), 0)
> 
> Path.Model <- model(RPS = RPS, BE = BE, ME = ME, modelType="Path")
> 
> # Example 5: Full SEM model 
> loading <- matrix(0, 8, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:8, 3] <- "con1"
> loading.start <- matrix("", 8, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:8, 3] <- "rnorm(1,0.6,0.05)"
> LY <- bind(loading, loading.start)
> 
> RTE <- binds(diag(8))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- binds(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "rnorm(1,0.6,0.05)"
> path.start[3, 2] <- "runif(1,0.3,0.5)"
> BE <- bind(path, path.start)
> 
> SEM.model <- model(BE=BE, LY=LY, RPS=RPS, RTE=RTE, modelType="SEM")
> 
> # Shortcut example
> SEM.model <- model.sem(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> 
> 
> cleanEx()
> nameEx("modelLavaan")
> ### * modelLavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.lavaan
> ### Title: Build the data generation template and analysis template from
> ###   the lavaan result
> ### Aliases: model.lavaan
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+              textual =~ x4 + x5 + x6
+              speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939)
> 
> # Create data generation and data analysis model from lavaan
> # Data generation is based on standardized parameters
> datamodel1 <- model.lavaan(fit, std=TRUE)
> 
> # Data generation is based on unstandardized parameters
> datamodel2 <- model.lavaan(fit, std=FALSE)
> 
> # Data generation model with misspecification on cross-loadings
> crossload <- matrix("runif(1, -0.1, 0.1)", 9, 3)
> crossload[1:3, 1] <- 0
> crossload[4:6, 2] <- 0
> crossload[7:9, 3] <- 0
> datamodel3 <- model.lavaan(fit, std=TRUE, LY=crossload)
> 
> 
> 
> cleanEx()
> nameEx("multipleAllEqual")
> ### * multipleAllEqual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multipleAllEqual
> ### Title: Test whether all objects are equal
> ### Aliases: multipleAllEqual
> 
> ### ** Examples
> 
> multipleAllEqual(1:5, 1:5, seq(2, 10, 2)/2) # Should be TRUE
[1] TRUE
> multipleAllEqual(1:5, 1:6, seq(2, 10, 2)/2) # Should be FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("pValue")
> ### * pValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValue
> ### Title: Find p-values (1 - percentile)
> ### Aliases: pValue pValue-methods pValue,ANY-method
> ###   pValue,numeric,vector-method pValue,numeric,data.frame-method
> ###   pValue,lavaan,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Compare number with a vector
> ##D pValue(0.5, rnorm(1000, 0, 1))
> ##D 
> ##D # Compare numbers with a data frame
> ##D pValue(c(0.5, 0.2), data.frame(rnorm(1000, 0, 1), runif(1000, 0, 1)))
> ##D 
> ##D # Compare an analysis result with a result of simulation study
> ##D library(lavaan)
> ##D loading <- matrix(0, 9, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D targetmodel <- estmodel(LY=loading, modelType="CFA", indLab=paste("x", 1:9, sep=""))
> ##D out <- analyze(targetmodel, HolzingerSwineford1939)
> ##D 
> ##D loading.trivial <- matrix("runif(1, -0.2, 0.2)", 9, 3)
> ##D loading.trivial[is.na(loading)] <- 0
> ##D mismodel <- model.lavaan(out, std=TRUE, LY=loading.trivial)
> ##D 
> ##D # The actual number of replications should be much greater than 20.
> ##D simout <- sim(20, n=nrow(HolzingerSwineford1939), mismodel)
> ##D 
> ##D # Find the p-value comparing the observed fit indices against the simulated 
> ##D # sampling distribution of fit indices
> ##D pValue(out, simout)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueNested")
> ### * pValueNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNested
> ### Title: Find p-values (1 - percentile) for a nested model comparison
> ### Aliases: pValueNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D 
> ##D # Nested Model: Linear growth curve model
> ##D LY <- matrix(1, 4, 2)
> ##D LY[,2] <- 0:3
> ##D PS <- matrix(NA, 2, 2)
> ##D TY <- rep(0, 4)
> ##D AL <- rep(NA, 2)
> ##D TE <- diag(NA, 4)
> ##D nested <- estmodel(LY=LY, PS=PS, TY=TY, AL=AL, TE=TE, modelType="CFA", indLab=paste("t", 1:4, sep=""))
> ##D 
> ##D # Parent Model: Unconditional growth curve model
> ##D LY2 <- matrix(1, 4, 2)
> ##D LY2[,2] <- c(0, NA, NA, 3)
> ##D parent <- estmodel(LY=LY2, PS=PS, TY=TY, AL=AL, TE=TE, modelType="CFA", indLab=paste("t", 1:4, sep=""))
> ##D 
> ##D # Analyze the output
> ##D outNested <- analyze(nested, Demo.growth)
> ##D outParent <- analyze(parent, Demo.growth)
> ##D 
> ##D # Create data template from the nested model with small misfit on the linear curve
> ##D loadingMis <- matrix(0, 4, 2)
> ##D loadingMis[2:3, 2] <- "runif(1, -0.1, 0.1)"
> ##D datamodel <- model.lavaan(outNested, LY=loadingMis)
> ##D 
> ##D # Get the sample size
> ##D n <- nrow(Demo.growth)
> ##D 
> ##D # The actual replications should be much greater than 30.
> ##D simNestedNested <- sim(30, n=n, nested, generate=datamodel) 
> ##D simNestedParent <- sim(30, n=n, parent, generate=datamodel)
> ##D 
> ##D # Find the p-value comparing the observed fit indices against the simulated 
> ##D # sampling distribution of fit indices
> ##D pValueNested(outNested, outParent, simNestedNested, simNestedParent)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueNonNested")
> ### * pValueNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNonNested
> ### Title: Find p-values (1 - percentile) for a non-nested model comparison
> ### Aliases: pValueNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A; Factor 1 --> Factor 2; Factor 2 --> Factor 3
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D model.A <- estmodel(LY=loading, BE=path.A, modelType="SEM", indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D 
> ##D out.A <- analyze(model.A, PoliticalDemocracy)
> ##D 
> ##D # Model A; Factor 1 --> Factor 3; Factor 3 --> Factor 2
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[3, 1] <- NA
> ##D path.B[2, 3] <- NA
> ##D model.B <- estmodel(LY=loading, BE=path.B, modelType="SEM", indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D 
> ##D out.B <- analyze(model.B, PoliticalDemocracy)
> ##D 
> ##D loading.mis <- matrix("runif(1, -0.2, 0.2)", 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D 
> ##D # Create SimSem object for data generation and data analysis template
> ##D datamodel.A <- model.lavaan(out.A, std=TRUE, LY=loading.mis)
> ##D datamodel.B <- model.lavaan(out.B, std=TRUE, LY=loading.mis)
> ##D 
> ##D # Get sample size
> ##D n <- nrow(PoliticalDemocracy)
> ##D 
> ##D # The actual number of replications should be greater than 20.
> ##D output.A.A <- sim(20, n=n, model.A, generate=datamodel.A) 
> ##D output.A.B <- sim(20, n=n, model.B, generate=datamodel.A)
> ##D output.B.A <- sim(20, n=n, model.A, generate=datamodel.B)
> ##D output.B.B <- sim(20, n=n, model.B, generate=datamodel.B)
> ##D 
> ##D # Find the p-value comparing the observed fit indices against the simulated 
> ##D # sampling distribution of fit indices
> ##D 
> ##D pValueNonNested(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ##D 
> ##D # If the p-value for model A is significant but the p-value for model B is not
> ##D # significant, model B is preferred.
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoff")
> ### * plotCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoff
> ### Title: Plot sampling distributions of fit indices with fit indices
> ###   cutoffs
> ### Aliases: plotCutoff plotCutoff-methods plotCutoff,data.frame-method
> ###   plotCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LY <- bind(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTE <- binds(error.cor)
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(5, n=200, model=CFA.Model) 
> ##D 
> ##D # Plot the cutoffs with desired fit indices
> ##D plotCutoff(Output, 0.05, usedFit=c("RMSEA", "SRMR", "CFI", "TLI"))
> ##D 
> ##D # The example of continous varying sample size. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output2 <- sim(NULL, n=seq(450, 500, 10), model=CFA.Model)
> ##D 
> ##D # Plot the cutoffs along sample size value
> ##D plotCutoff(Output2, 0.05)
> ##D 
> ##D # Specify both continuoussample size and percent missing completely at random. Note that more fine-grained 
> ##D # values of n and pmMCAR is needed, e.g., n=seq(50, 500, 1) and pmMCAR=seq(0, 0.2, 0.01)
> ##D Output3 <- sim(NULL, n=seq(450, 500, 10), pmMCAR=c(0, 0.05, 0.1, 0.15), model=CFA.Model)
> ##D 
> ##D # Plot the contours that each contour represents the value of cutoff at each level
> ##D # of sample size and percent missing completely at random
> ##D plotCutoff(Output3, 0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNested")
> ### * plotCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between nested models with fit indices cutoffs
> ### Aliases: plotCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Nested model: One factor
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Parent model: two factors
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, "runif(1, 0.7, 0.9)")
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL)
> ##D 
> ##D # Plot the cutoffs in nested model comparison
> ##D plotCutoffNested(Output.NULL.NULL, Output.NULL.ALT, alpha=0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNonNested")
> ### * plotCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNonNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between non-nested models with fit indices cutoffs
> ### Aliases: plotCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A: Factor 1 on Items 1-3 and Factor 2 on Items 4-8
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LY.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTE <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LY.A, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Model B: Factor 1 on Items 1-4 and Factor 2 on Items 5-8
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LY.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LY.B, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D # Plot cutoffs for both model A and model B
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D 
> ##D # Plot cutoffs for the model A only
> ##D plotCutoffNonNested(Output.A.A, Output.A.B)
> ##D 
> ##D # Plot cutoffs for the model A with one-tailed test
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, onetailed=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotDist")
> ### * plotDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotDist
> ### Title: Plot a distribution of a data distribution object
> ### Aliases: plotDist
> 
> ### ** Examples
> 
> datadist <- bindDist(c("chisq", "t", "f"), list(df=5), list(df=3), list(df1=3, df2=5))
> 
> # Plot the joint distribution of Variables 1 and 2 with correlation of 0.5
> plotDist(datadist, r=0.5, var=1:2)
> 
> # Plot the marginal distribution of the variable 3
> plotDist(datadist, var=3)
> 
> 
> 
> cleanEx()

detaching 'package:copula'

> nameEx("plotMisfit")
> ### * plotMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMisfit
> ### Title: Plot the population misfit in the result object
> ### Aliases: plotMisfit
> 
> ### ** Examples
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "runif(1, 0.3, 0.5)"
> starting.BE[4, 3] <- "runif(1, 0.5, 0.7)"
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- "runif(1, -0.1, 0.1)"
> BE <- bind(path.BE, starting.BE, misspec=mis.path.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- binds(residual.error, "rnorm(1, 0.3, 0.1)")
> 
> ME <- bind(rep(NA, 4), 0)
> 
> Path.Model <- model(RPS = RPS, BE = BE, ME = ME, modelType="Path")
> 
> # The number of replications in actual analysis should be much more than 20
> Output <- sim(20, n=500, Path.Model)
Loading required package: parallel
> 
> # Plot the distribution of population misfit
> plotMisfit(Output)
> 
> # Plot the relationship between population RMSEA and all misspecified direct effects
> plotMisfit(Output, misParam=1:2)
> 
> # Plot the relationship between sample CFI and all misspecified direct effects 
> plotMisfit(Output, usedFit="CFI", misParam=1:2)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("plotPower")
> ### * plotPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPower
> ### Title: Make a power plot of a parameter given varying parameters
> ### Aliases: plotPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, 0.4)
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Specify both continuous sample size and percent missing completely at random. Note that more fine-grained 
> ##D # values of n and pmMCAR is needed, e.g., n=seq(50, 500, 1) and pmMCAR=seq(0, 0.2, 0.01)
> ##D 
> ##D Output <- sim(NULL, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2), model=CFA.Model)
> ##D 
> ##D # Plot the power of the first factor loading along the sample size value
> ##D plotPower(Output, "1.f1=~y1", contMCAR=FALSE)
> ##D 
> ##D # Plot the power of the correlation along the sample size and percent missing completely at random
> ##D plotPower(Output, "1.f1=~y1")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFit")
> ### * plotPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFit
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Null model: One factor model
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- sim(50, n=50, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D 
> ##D # Alternative model: Two-factor model
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, 0.5)
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D Output.ALT <- sim(50, n=50, model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D # Plot the power based on derived cutoff from the null model using four fit indices
> ##D plotPowerFit(Output.ALT, nullObject=Output.NULL, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D # Plot the power of rejecting null model when the rule of thumb from Hu & Bentler (1999) is used
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D plotPowerFit(Output.ALT, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D # The example of continous varying sample size. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output.NULL2 <- sim(NULL, n=seq(50, 250, 25), model=CFA.Model.NULL, generate=CFA.Model.NULL)
> ##D Output.ALT2 <- sim(NULL, n=seq(50, 250, 25), model=CFA.Model.NULL, generate=CFA.Model.ALT)
> ##D 
> ##D # Plot the power based on derived cutoff from the null model using four fit indices along sample size
> ##D plotPowerFit(Output.ALT2, nullObject=Output.NULL2, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D # Plot the power based on rule of thumb along sample size
> ##D plotPowerFit(Output.ALT2, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNested")
> ### * plotPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNested
> ### Title: Plot power of rejecting a nested model in a nested model
> ###   comparison by each fit index
> ### Aliases: plotPowerFitNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Null model: One-factor model
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LY.NULL <- bind(loading.null, 0.7)
> ##D RPS.NULL <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model.NULL <- model(LY = LY.NULL, RPS = RPS.NULL, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Alternative model: Two-factor model
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LY.ALT <- bind(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPS.ALT <- binds(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- model(LY = LY.ALT, RPS = RPS.ALT, RTE = RTE, modelType="CFA")
> ##D 
> ##D # In reality, more than 10 replications are needed
> ##D Output.NULL.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL <- sim(10, n=500, model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT <- sim(10, n=500, model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D # Plot the power based on the derived cutoff from the models analyzed on the null datasets
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D 
> ##D # Plot the power by only CFI
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, usedFit="CFI")
> ##D 
> ##D # The example of continous varying sample size. Note that more fine-grained 
> ##D # values of n is needed, e.g., n=seq(50, 500, 1)
> ##D Output.NULL.NULL2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.NULL, generate=CFA.Model.NULL) 
> ##D Output.ALT.NULL2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.NULL, generate=CFA.Model.ALT) 
> ##D Output.NULL.ALT2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.ALT, generate=CFA.Model.NULL) 
> ##D Output.ALT.ALT2 <- sim(NULL, n=seq(50, 500, 25), model=CFA.Model.ALT, generate=CFA.Model.ALT) 
> ##D 
> ##D # Plot logistic line for the power based on the derived cutoff from the null model along sample size values
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2)
> ##D 
> ##D # Plot scatterplot for the power based on the derived cutoff from the null model along sample size values
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, logistic=FALSE)
> ##D 
> ##D # Plot scatterplot for the power based on the advanced CFI value
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(CFI=-0.1), logistic=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNonNested")
> ### * plotPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNonNested
> ### Title: Plot power of rejecting a non-nested model based on a difference
> ###   in fit index
> ### Aliases: plotPowerFitNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Model A: Factor 1 on Items 1-3 and Factor 2 on Items 4-8
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LY.A <- bind(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPS <- binds(latent.cor, "runif(1, 0.7, 0.9)")
> ##D RTE <- binds(diag(8))
> ##D CFA.Model.A <- model(LY = LY.A, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # Model B: Factor 1 on Items 1-4 and Factor 2 on Items 5-8
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LY.B <- bind(loading.B, 0.7)
> ##D CFA.Model.B <- model(LY = LY.B, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.A)
> ##D Output.A.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.A)
> ##D Output.B.A <- sim(10, n=500, model=CFA.Model.A, generate=CFA.Model.B)
> ##D Output.B.B <- sim(10, n=500, model=CFA.Model.B, generate=CFA.Model.B)
> ##D 
> ##D # Plot the power based on the derived cutoff for both models
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D 
> ##D # Plot the power based on AIC and BIC cutoffs
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("popDiscrepancy")
> ### * popDiscrepancy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popDiscrepancy
> ### Title: Find the discrepancy value between two means and covariance
> ###   matrices
> ### Aliases: popDiscrepancy
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popDiscrepancy(m1, S1, m2, S2)
         [,1]
[1,] 0.116864
> 
> 
> 
> cleanEx()
> nameEx("popMisfitMACS")
> ### * popMisfitMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfitMACS
> ### Title: Find population misfit by sufficient statistics
> ### Aliases: popMisfitMACS
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popMisfitMACS(m1, S1, m2, S2)
        f0       srmr 
0.11686397 0.03191424 
> 
> 
> 
> cleanEx()
> nameEx("rawDraw")
> ### * rawDraw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rawDraw
> ### Title: Draw values from vector or matrix objects
> ### Aliases: rawDraw
> 
> ### ** Examples
> 
> loading <- matrix(0, 7, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[1:7, 3] <- NA
> loadingVal <- matrix(0, 7, 3)
> loadingVal[1:3, 1] <- "runif(1, 0.5, 0.7)"
> loadingVal[4:6, 2] <- "runif(1, 0.5, 0.7)"
> loadingVal[1:6, 3] <- "runif(1, 0.3, 0.5)"
> loadingVal[7, 3] <- 1
> loading.mis <- matrix("runif(1, -0.2, 0.2)", 7, 3)
> loading.mis[is.na(loading)] <- 0
> loading.mis[,3] <- 0
> loading.mis[7,] <- 0
> loading[1:3, 1] <- "con1"
> LY <- bind(loading, loadingVal, misspec=loading.mis)
> 
> # Draw values
> rawDraw(LY)
$param
         [,1]      [,2]      [,3]
[1,] 0.576007 0.0000000 0.4739382
[2,] 0.576007 0.0000000 0.3680698
[3,] 0.576007 0.0000000 0.3964160
[4,] 0.000000 0.5772228 0.4199132
[5,] 0.000000 0.5026781 0.3987083
[6,] 0.000000 0.5764776 0.3372435
[7,] 0.000000 0.0000000 1.0000000

$paramMis
           [,1]        [,2]      [,3]
[1,]  0.5760070  0.06066951 0.4739382
[2,]  0.5760070 -0.14977796 0.3680698
[3,]  0.5760070 -0.09311173 0.3964160
[4,]  0.1109781  0.57722282 0.4199132
[5,]  0.1738821  0.50267807 0.3987083
[6,] -0.1151430  0.57647759 0.3372435
[7,]  0.0000000  0.00000000 1.0000000

> 
> # Draw only model parameters containing misspecification
> rawDraw(LY, parMisOnly=TRUE)
           [,1]        [,2]      [,3]
[1,]  0.6654747  0.08948438 0.4059439
[2,]  0.6654747 -0.03549023 0.4578712
[3,]  0.6654747  0.12837852 0.3046662
[4,]  0.0673867  0.62941204 0.3954460
[5,]  0.1176959  0.65658655 0.4464627
[6,] -0.1568225  0.61060726 0.4385463
[7,]  0.0000000  0.00000000 1.0000000
> 
> # Draw only misspecification.
> rawDraw(LY, misOnly=TRUE)
            [,1]        [,2] [,3]
[1,]  0.00000000 -0.17172838    0
[2,]  0.00000000 -0.16021354    0
[3,]  0.00000000 -0.07349132    0
[4,]  0.14448379  0.00000000    0
[5,] -0.02476116  0.00000000    0
[6,] -0.10208109  0.00000000    0
[7,]  0.00000000  0.00000000    0
> 
> 
> 
> cleanEx()
> nameEx("setPopulation")
> ### * setPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPopulation
> ### Title: Set the data generation population model underlying an object
> ### Aliases: setPopulation
> 
> ### ** Examples
> 
> # See each class for an example.
> ## Not run: 
> ##D # Data generation model
> ##D loading <- matrix(0, 7, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[1:7, 3] <- NA
> ##D loadingVal <- matrix(0, 7, 3)
> ##D loadingVal[1:3, 1] <- "runif(1, 0.5, 0.7)"
> ##D loadingVal[4:6, 2] <- "runif(1, 0.5, 0.7)"
> ##D loadingVal[1:6, 3] <- "runif(1, 0.3, 0.5)"
> ##D loadingVal[7, 3] <- 1
> ##D loading.mis <- matrix("runif(1, -0.2, 0.2)", 7, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D loading.mis[,3] <- 0
> ##D loading.mis[7,] <- 0
> ##D LY <- bind(loading, loadingVal, misspec=loading.mis)
> ##D 
> ##D RPS <- binds(diag(3))
> ##D 
> ##D path <- matrix(0, 3, 3)
> ##D path[2, 1] <- NA
> ##D BE <- bind(path, "runif(1, 0.3, 0.5)")
> ##D 
> ##D RTE <- binds(diag(7))
> ##D 
> ##D VY <- bind(c(rep(NA, 6), 0), c(rep(1, 6), ""))
> ##D 
> ##D datamodel <- model(LY=LY, RPS=RPS, BE=BE, RTE=RTE, VY=VY, modelType="SEM")
> ##D 
> ##D # Data analysis model
> ##D loading <- matrix(0, 7, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7, 3] <- NA
> ##D path <- matrix(0, 3, 3)
> ##D path[2, 1] <- NA
> ##D path[1, 3] <- NA
> ##D path[2, 3] <- NA
> ##D errorCov <- diag(NA, 7)
> ##D errorCov[7, 7] <- 0
> ##D facCov <- diag(3)
> ##D analysis <- estmodel(LY=loading, BE=path, TE=errorCov, PS=facCov, modelType="SEM", indLab=paste("y", 1:7, sep=""))
> ##D 
> ##D # In reality, more than 10 replications are needed.
> ##D Output <- sim(10, n=200, analysis, generate=datamodel)
> ##D 
> ##D # Population 
> ##D loadingVal <- matrix(0, 7, 3)
> ##D loadingVal[1:3, 1] <- 0.6
> ##D loadingVal[4:6, 2] <- 0.6
> ##D loadingVal[7, 3] <- 1
> ##D LY <- bind(loading, loadingVal)
> ##D pathVal <- matrix(0, 3, 3)
> ##D pathVal[2, 1] <- 0.4
> ##D pathVal[1, 3] <- 0.4
> ##D pathVal[2, 3] <- 0.4
> ##D BE <- bind(path, pathVal)
> ##D PS <- binds(facCov)
> ##D errorCovVal <- diag(0.64, 7)
> ##D errorCovVal[7, 7] <- 0
> ##D TE <- binds(errorCov, errorCovVal)
> ##D population <- model(LY=LY, PS=PS, BE=BE, TE=TE, modelType="SEM")
> ##D 
> ##D # Set up the new population
> ##D Output <- setPopulation(Output, population) 
> ##D 
> ##D # This summary will contain the bias information
> ##D summary(Output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sim")
> ### * sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim
> ### Title: Run a monte carlo simulation with a structural equation model.
> ### Aliases: sim
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LY <- bind(loading, 0.7)
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPS <- binds(latent.cor, 0.5)
> 
> RTE <- binds(diag(6))
> 
> VY <- bind(rep(NA,6),2)
> 
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType = "CFA")
> 
> # In reality, more than 5 replications are needed.
> Output <- sim(5, CFA.Model,n=200)
Loading required package: parallel
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean     SD
      Chi     17.106   18.649   19.884   20.162   10.783  5.766
      AIC   3146.715 3157.195 3165.578 3167.465 3110.139 39.649
      BIC   3209.384 3219.863 3228.246 3230.133 3172.807 39.649
      RMSEA    0.074    0.080    0.086    0.087    0.028  0.040
      CFI      0.971    0.965    0.961    0.960    0.989  0.017
      TLI      0.945    0.935    0.927    0.925    0.984  0.036
      SRMR     0.038    0.039    0.039    0.039    0.030  0.008
========= Parameter Estimates and Standard Errors ============
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
1.f1=~y1            0.649       0.107      0.073                 1.0   0.671
1.f1=~y2            0.649       0.071      0.073                 1.0   0.669
1.f1=~y3            0.711       0.076      0.076                 1.0   0.710
1.f2=~y4            0.720       0.100      0.072                 1.0   0.731
1.f2=~y5            0.802       0.107      0.075                 1.0   0.776
1.f2=~y6            0.614       0.084      0.071                 1.0   0.629
1.y1~~y1            0.503       0.085      0.076                 1.0   0.546
1.y2~~y2            0.517       0.090      0.075                 1.0   0.550
1.y3~~y3            0.490       0.044      0.082                 1.0   0.494
1.y4~~y4            0.444       0.118      0.074                 1.0   0.461
1.y5~~y5            0.414       0.059      0.082                 1.0   0.395
1.y6~~y6            0.565       0.047      0.071                 1.0   0.601
1.f2~~f1            0.459       0.101      0.079                 1.0   0.459
1.y1~1              0.001       0.063      0.068                 0.0   0.001
1.y2~1              0.025       0.065      0.069                 0.0   0.027
1.y3~1              0.019       0.053      0.071                 0.0   0.019
1.y4~1              0.071       0.094      0.070                 0.2   0.068
1.y5~1              0.050       0.039      0.073                 0.0   0.047
1.y6~1              0.058       0.087      0.069                 0.2   0.059
         Std.Est.SD Average.Param Average.Bias Coverage
1.f1=~y1      0.074          0.70       -0.051      0.8
1.f1=~y2      0.060          0.70       -0.051      1.0
1.f1=~y3      0.051          0.70        0.011      1.0
1.f2=~y4      0.079          0.70        0.020      0.8
1.f2=~y5      0.059          0.70        0.102      0.6
1.f2=~y6      0.061          0.70       -0.086      0.8
1.y1~~y1      0.100          0.51       -0.007      1.0
1.y2~~y2      0.082          0.51        0.007      1.0
1.y3~~y3      0.070          0.51       -0.020      1.0
1.y4~~y4      0.117          0.51       -0.066      0.8
1.y5~~y5      0.088          0.51       -0.096      1.0
1.y6~~y6      0.079          0.51        0.055      1.0
1.f2~~f1      0.101          0.50       -0.041      1.0
1.y1~1        0.067          0.00        0.001      1.0
1.y2~1        0.068          0.00        0.025      1.0
1.y3~1        0.053          0.00        0.019      1.0
1.y4~1        0.094          0.00        0.071      0.8
1.y5~1        0.033          0.00        0.050      1.0
1.y6~1        0.090          0.00        0.058      0.8
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.057 -0.057  0.981 -0.994 -0.999  0.881
AIC   -0.057  1.000  1.000 -0.082  0.108  0.055  0.072
BIC   -0.057  1.000  1.000 -0.082  0.108  0.055  0.072
RMSEA  0.981 -0.082 -0.082  1.000 -0.961 -0.973  0.893
CFI   -0.994  0.108  0.108 -0.961  1.000  0.996 -0.831
TLI   -0.999  0.055  0.055 -0.973  0.996  1.000 -0.873
SRMR   0.881  0.072  0.072  0.893 -0.831 -0.873  1.000
================== Replications =====================
Number of replications = 5 
Number of converged replications = 5 
Number of nonconverged replications: 
   1. Nonconvergent Results = 0 
   2. Nonconvergent results from multiple imputation = 0 
   3. At least one SE were negative or NA = 0 
   4. At least one variance estimates were negative = 0 
   5. At least one correlation estimates were greater than 1 or less than -1 = 0 
> 
> # Example of data transformation: Transforming to standard score
> fun1 <- function(data) {
+ 	temp <- scale(data)
+ 	temp[,"group"] <- data[,"group"]
+ 	as.data.frame(temp)
+ }
> 
> # Example of additional output: Extract modification indices from lavaan
> fun2 <- function(out) {
+ 	inspect(out, "mi")
+ }
> 
> # In reality, more than 5 replications are needed.
> Output <- sim(5, CFA.Model,n=200,datafun=fun1, outfun=fun2)
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean     SD
      Chi     17.106   18.649   19.884   20.162   10.783  5.766
      AIC   3160.829 3161.240 3161.569 3161.643 3140.326 31.776
      BIC   3223.497 3223.908 3224.237 3224.311 3202.994 31.776
      RMSEA    0.074    0.080    0.086    0.087    0.028  0.040
      CFI      0.971    0.965    0.961    0.960    0.989  0.017
      TLI      0.945    0.935    0.927    0.925    0.984  0.036
      SRMR     0.038    0.039    0.039    0.039    0.030  0.008
========= Parameter Estimates and Standard Errors ============
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
1.f1=~y1            0.669       0.074      0.076                   1   0.671
1.f1=~y2            0.667       0.060      0.075                   1   0.669
1.f1=~y3            0.708       0.051      0.076                   1   0.710
1.f2=~y4            0.729       0.079      0.073                   1   0.731
1.f2=~y5            0.774       0.058      0.072                   1   0.776
1.f2=~y6            0.628       0.061      0.072                   1   0.629
1.y1~~y1            0.543       0.099      0.080                   1   0.546
1.y2~~y2            0.547       0.082      0.079                   1   0.550
1.y3~~y3            0.491       0.070      0.081                   1   0.494
1.y4~~y4            0.459       0.117      0.076                   1   0.461
1.y5~~y5            0.393       0.087      0.077                   1   0.395
1.y6~~y6            0.598       0.079      0.075                   1   0.601
1.f2~~f1            0.459       0.101      0.079                   1   0.459
1.y1~1              0.000       0.000      0.071                   0   0.000
1.y2~1              0.000       0.000      0.071                   0   0.000
1.y3~1              0.000       0.000      0.071                   0   0.000
1.y4~1              0.000       0.000      0.071                   0   0.000
1.y5~1              0.000       0.000      0.071                   0   0.000
1.y6~1              0.000       0.000      0.071                   0   0.000
         Std.Est.SD Average.Param Average.Bias Coverage
1.f1=~y1      0.074          0.70       -0.031      1.0
1.f1=~y2      0.060          0.70       -0.033      1.0
1.f1=~y3      0.051          0.70        0.008      1.0
1.f2=~y4      0.079          0.70        0.029      1.0
1.f2=~y5      0.059          0.70        0.074      1.0
1.f2=~y6      0.061          0.70       -0.072      1.0
1.y1~~y1      0.100          0.51        0.033      1.0
1.y2~~y2      0.082          0.51        0.037      1.0
1.y3~~y3      0.070          0.51       -0.019      1.0
1.y4~~y4      0.117          0.51       -0.051      0.8
1.y5~~y5      0.088          0.51       -0.117      0.8
1.y6~~y6      0.079          0.51        0.088      0.8
1.f2~~f1      0.101          0.50       -0.041      1.0
1.y1~1        0.000          0.00        0.000      1.0
1.y2~1        0.000          0.00        0.000      1.0
1.y3~1        0.000          0.00        0.000      1.0
1.y4~1        0.000          0.00        0.000      1.0
1.y5~1        0.000          0.00        0.000      1.0
1.y6~1        0.000          0.00        0.000      1.0
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.443 -0.443  0.981 -0.994 -0.999  0.881
AIC   -0.443  1.000  1.000 -0.606  0.363  0.409 -0.595
BIC   -0.443  1.000  1.000 -0.606  0.363  0.409 -0.595
RMSEA  0.981 -0.606 -0.606  1.000 -0.961 -0.973  0.893
CFI   -0.994  0.363  0.363 -0.961  1.000  0.996 -0.831
TLI   -0.999  0.409  0.409 -0.973  0.996  1.000 -0.873
SRMR   0.881 -0.595 -0.595  0.893 -0.831 -0.873  1.000
================== Replications =====================
Number of replications = 5 
Number of converged replications = 5 
Number of nonconverged replications: 
   1. Nonconvergent Results = 0 
   2. Nonconvergent results from multiple imputation = 0 
   3. At least one SE were negative or NA = 0 
   4. At least one variance estimates were negative = 0 
   5. At least one correlation estimates were greater than 1 or less than -1 = 0 
> 
> # Get modification indices
> getExtraOutput(Output)
[[1]]
   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox
1   f1 =~  y1 0.000  0.000   0.000    0.000    0.000
2   f1 =~  y2 0.000  0.000   0.000    0.000    0.000
3   f1 =~  y3 0.000  0.000   0.000    0.000    0.000
4   f1 =~  y4 2.756  0.155   0.155    0.155    0.155
5   f1 =~  y5 0.991 -0.084  -0.084   -0.084   -0.084
6   f1 =~  y6 0.876 -0.079  -0.079   -0.080   -0.080
7   f2 =~  y1 0.049  0.019   0.019    0.019    0.019
8   f2 =~  y2 0.117  0.030   0.030    0.030    0.030
9   f2 =~  y3 0.259 -0.050  -0.050   -0.050   -0.050
10  f2 =~  y4 0.000  0.000   0.000    0.000    0.000
11  f2 =~  y5 0.000  0.000   0.000    0.000    0.000
12  f2 =~  y6 0.000  0.000   0.000    0.000    0.000
13  y1 ~~  y1 0.000  0.000   0.000    0.000    0.000
14  y1 ~~  y2 0.259 -0.048  -0.048   -0.048   -0.048
15  y1 ~~  y3 0.117  0.043   0.043    0.043    0.043
16  y1 ~~  y4 0.283  0.025   0.025    0.025    0.025
17  y1 ~~  y5 0.052  0.011   0.011    0.011    0.011
18  y1 ~~  y6 0.602 -0.040  -0.040   -0.040   -0.040
19  y2 ~~  y2 0.000  0.000   0.000    0.000    0.000
20  y2 ~~  y3 0.049  0.030   0.030    0.030    0.030
21  y2 ~~  y4 0.620 -0.037  -0.037   -0.037   -0.037
22  y2 ~~  y5 0.007 -0.004  -0.004   -0.004   -0.004
23  y2 ~~  y6 2.604  0.082   0.082    0.082    0.082
24  y3 ~~  y3 0.000  0.000   0.000    0.000    0.000
25  y3 ~~  y4 2.421  0.073   0.073    0.073    0.073
26  y3 ~~  y5 1.001 -0.048  -0.048   -0.048   -0.048
27  y3 ~~  y6 2.403 -0.076  -0.076   -0.076   -0.076
28  y4 ~~  y4 0.000  0.000   0.000    0.000    0.000
29  y4 ~~  y5 0.876 -0.140  -0.140   -0.141   -0.141
30  y4 ~~  y6 0.991 -0.127  -0.127   -0.128   -0.128
31  y5 ~~  y5 0.000  0.000   0.000    0.000    0.000
32  y5 ~~  y6 2.756  0.153   0.153    0.154    0.154
33  y6 ~~  y6 0.000  0.000   0.000    0.000    0.000
34  f1 ~~  f1    NA     NA      NA       NA       NA
35  f1 ~~  f2 0.000  0.000   0.000    0.000    0.000
36  f2 ~~  f2    NA     NA      NA       NA       NA
37  y1 ~1     0.000  0.000   0.000    0.000    0.000
38  y2 ~1     0.000  0.000   0.000    0.000    0.000
39  y3 ~1     0.000  0.000   0.000    0.000    0.000
40  y4 ~1     0.000  0.000   0.000    0.000    0.000
41  y5 ~1     0.000  0.000   0.000    0.000    0.000
42  y6 ~1     0.000  0.000   0.000    0.000    0.000
43  f1 ~1        NA     NA      NA       NA       NA
44  f2 ~1        NA     NA      NA       NA       NA

[[2]]
   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox
1   f1 =~  y1 0.000  0.000   0.000    0.000    0.000
2   f1 =~  y2 0.000  0.000   0.000    0.000    0.000
3   f1 =~  y3 0.000  0.000   0.000    0.000    0.000
4   f1 =~  y4 2.106  0.146   0.146    0.147    0.147
5   f1 =~  y5 0.478 -0.077  -0.077   -0.077   -0.077
6   f1 =~  y6 0.384 -0.064  -0.064   -0.064   -0.064
7   f2 =~  y1 4.172  0.214   0.214    0.214    0.214
8   f2 =~  y2 0.426  0.077   0.077    0.077    0.077
9   f2 =~  y3 6.410 -0.290  -0.290   -0.291   -0.291
10  f2 =~  y4 0.000  0.000   0.000    0.000    0.000
11  f2 =~  y5 0.000  0.000   0.000    0.000    0.000
12  f2 =~  y6 0.000  0.000   0.000    0.000    0.000
13  y1 ~~  y1 0.000  0.000   0.000    0.000    0.000
14  y1 ~~  y2 6.410 -0.190  -0.190   -0.191   -0.191
15  y1 ~~  y3 0.426  0.047   0.047    0.048    0.048
16  y1 ~~  y4 1.027  0.050   0.050    0.050    0.050
17  y1 ~~  y5 0.433  0.030   0.030    0.030    0.030
18  y1 ~~  y6 0.105  0.015   0.015    0.015    0.015
19  y2 ~~  y2 0.000  0.000   0.000    0.000    0.000
20  y2 ~~  y3 4.172  0.199   0.199    0.200    0.200
21  y2 ~~  y4 0.460 -0.031  -0.031   -0.031   -0.031
22  y2 ~~  y5 0.278  0.023   0.023    0.023    0.023
23  y2 ~~  y6 0.267  0.023   0.023    0.023    0.023
24  y3 ~~  y3 0.000  0.000   0.000    0.000    0.000
25  y3 ~~  y4 1.849  0.063   0.063    0.063    0.063
26  y3 ~~  y5 2.784 -0.073  -0.073   -0.073   -0.073
27  y3 ~~  y6 1.911 -0.062  -0.062   -0.062   -0.062
28  y4 ~~  y4 0.000  0.000   0.000    0.000    0.000
29  y4 ~~  y5 0.384 -0.050  -0.050   -0.050   -0.050
30  y4 ~~  y6 0.478 -0.047  -0.047   -0.047   -0.047
31  y5 ~~  y5 0.000  0.000   0.000    0.000    0.000
32  y5 ~~  y6 2.106  0.140   0.140    0.140    0.140
33  y6 ~~  y6 0.000  0.000   0.000    0.000    0.000
34  f1 ~~  f1    NA     NA      NA       NA       NA
35  f1 ~~  f2 0.000  0.000   0.000    0.000    0.000
36  f2 ~~  f2    NA     NA      NA       NA       NA
37  y1 ~1     0.000  0.000   0.000    0.000    0.000
38  y2 ~1     0.000  0.000   0.000    0.000    0.000
39  y3 ~1     0.000  0.000   0.000    0.000    0.000
40  y4 ~1     0.000  0.000   0.000    0.000    0.000
41  y5 ~1     0.000  0.000   0.000    0.000    0.000
42  y6 ~1     0.000  0.000   0.000    0.000    0.000
43  f1 ~1        NA     NA      NA       NA       NA
44  f2 ~1        NA     NA      NA       NA       NA

[[3]]
   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox
1   f1 =~  y1 0.000  0.000   0.000    0.000    0.000
2   f1 =~  y2 0.000  0.000   0.000    0.000    0.000
3   f1 =~  y3 0.000  0.000   0.000    0.000    0.000
4   f1 =~  y4 0.307 -0.043  -0.043   -0.043   -0.043
5   f1 =~  y5 0.810 -0.072  -0.072   -0.073   -0.073
6   f1 =~  y6 3.229  0.140   0.140    0.141    0.141
7   f2 =~  y1 0.151  0.031   0.031    0.031    0.031
8   f2 =~  y2 1.380  0.092   0.092    0.092    0.092
9   f2 =~  y3 2.017 -0.113  -0.113   -0.113   -0.113
10  f2 =~  y4 0.000  0.000   0.000    0.000    0.000
11  f2 =~  y5 0.000  0.000   0.000    0.000    0.000
12  f2 =~  y6 0.000  0.000   0.000    0.000    0.000
13  y1 ~~  y1 0.000  0.000   0.000    0.000    0.000
14  y1 ~~  y2 2.017 -0.187  -0.187   -0.188   -0.188
15  y1 ~~  y3 1.380  0.205   0.205    0.206    0.206
16  y1 ~~  y4 0.041  0.009   0.009    0.009    0.009
17  y1 ~~  y5 2.998 -0.077  -0.077   -0.077   -0.077
18  y1 ~~  y6 6.794  0.125   0.125    0.125    0.125
19  y2 ~~  y2 0.000  0.000   0.000    0.000    0.000
20  y2 ~~  y3 0.151  0.050   0.050    0.050    0.050
21  y2 ~~  y4 0.015  0.006   0.006    0.006    0.006
22  y2 ~~  y5 7.348  0.125   0.125    0.126    0.126
23  y2 ~~  y6 6.835 -0.132  -0.132   -0.133   -0.133
24  y3 ~~  y3 0.000  0.000   0.000    0.000    0.000
25  y3 ~~  y4 0.655 -0.037  -0.037   -0.037   -0.037
26  y3 ~~  y5 1.592 -0.056  -0.056   -0.056   -0.056
27  y3 ~~  y6 1.456  0.058   0.058    0.058    0.058
28  y4 ~~  y4 0.000  0.000   0.000    0.000    0.000
29  y4 ~~  y5 3.229  0.346   0.346    0.348    0.348
30  y4 ~~  y6 0.810 -0.106  -0.106   -0.106   -0.106
31  y5 ~~  y5 0.000  0.000   0.000    0.000    0.000
32  y5 ~~  y6 0.307 -0.075  -0.075   -0.076   -0.076
33  y6 ~~  y6 0.000  0.000   0.000    0.000    0.000
34  f1 ~~  f1    NA     NA      NA       NA       NA
35  f1 ~~  f2 0.000  0.000   0.000    0.000    0.000
36  f2 ~~  f2    NA     NA      NA       NA       NA
37  y1 ~1     0.000  0.000   0.000    0.000    0.000
38  y2 ~1     0.000  0.000   0.000    0.000    0.000
39  y3 ~1     0.000  0.000   0.000    0.000    0.000
40  y4 ~1     0.000  0.000   0.000    0.000    0.000
41  y5 ~1     0.000  0.000   0.000    0.000    0.000
42  y6 ~1     0.000  0.000   0.000    0.000    0.000
43  f1 ~1        NA     NA      NA       NA       NA
44  f2 ~1        NA     NA      NA       NA       NA

[[4]]
   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox
1   f1 =~  y1 0.000  0.000   0.000    0.000    0.000
2   f1 =~  y2 0.000  0.000   0.000    0.000    0.000
3   f1 =~  y3 0.000  0.000   0.000    0.000    0.000
4   f1 =~  y4 0.705  0.086   0.086    0.086    0.086
5   f1 =~  y5 1.067 -0.106  -0.106   -0.106   -0.106
6   f1 =~  y6 0.059  0.023   0.023    0.023    0.023
7   f2 =~  y1 0.806  0.090   0.090    0.090    0.090
8   f2 =~  y2 0.438 -0.071  -0.071   -0.071   -0.071
9   f2 =~  y3 0.045 -0.021  -0.021   -0.021   -0.021
10  f2 =~  y4 0.000  0.000   0.000    0.000    0.000
11  f2 =~  y5 0.000  0.000   0.000    0.000    0.000
12  f2 =~  y6 0.000  0.000   0.000    0.000    0.000
13  y1 ~~  y1 0.000  0.000   0.000    0.000    0.000
14  y1 ~~  y2 0.045 -0.023  -0.023   -0.023   -0.023
15  y1 ~~  y3 0.438 -0.058  -0.058   -0.059   -0.059
16  y1 ~~  y4 3.585  0.090   0.090    0.091    0.091
17  y1 ~~  y5 0.619 -0.038  -0.038   -0.038   -0.038
18  y1 ~~  y6 0.302 -0.029  -0.029   -0.029   -0.029
19  y2 ~~  y2 0.000  0.000   0.000    0.000    0.000
20  y2 ~~  y3 0.806  0.091   0.091    0.092    0.092
21  y2 ~~  y4 0.143  0.018   0.018    0.018    0.018
22  y2 ~~  y5 0.548 -0.035  -0.035   -0.035   -0.035
23  y2 ~~  y6 0.053 -0.012  -0.012   -0.012   -0.012
24  y3 ~~  y3 0.000  0.000   0.000    0.000    0.000
25  y3 ~~  y4 2.463 -0.075  -0.075   -0.076   -0.076
26  y3 ~~  y5 0.408  0.031   0.031    0.031    0.031
27  y3 ~~  y6 1.298  0.060   0.060    0.061    0.061
28  y4 ~~  y4 0.000  0.000   0.000    0.000    0.000
29  y4 ~~  y5 0.059  0.036   0.036    0.036    0.036
30  y4 ~~  y6 1.067 -0.088  -0.088   -0.088   -0.088
31  y5 ~~  y5 0.000  0.000   0.000    0.000    0.000
32  y5 ~~  y6 0.705  0.071   0.071    0.071    0.071
33  y6 ~~  y6 0.000  0.000   0.000    0.000    0.000
34  f1 ~~  f1    NA     NA      NA       NA       NA
35  f1 ~~  f2 0.000  0.000   0.000    0.000    0.000
36  f2 ~~  f2    NA     NA      NA       NA       NA
37  y1 ~1     0.000  0.000   0.000    0.000    0.000
38  y2 ~1     0.000  0.000   0.000    0.000    0.000
39  y3 ~1     0.000  0.000   0.000    0.000    0.000
40  y4 ~1     0.000  0.000   0.000    0.000    0.000
41  y5 ~1     0.000  0.000   0.000    0.000    0.000
42  y6 ~1     0.000  0.000   0.000    0.000    0.000
43  f1 ~1        NA     NA      NA       NA       NA
44  f2 ~1        NA     NA      NA       NA       NA

[[5]]
   lhs op rhs    mi    epc sepc.lv sepc.all sepc.nox
1   f1 =~  y1 0.000  0.000   0.000    0.000    0.000
2   f1 =~  y2 0.000  0.000   0.000    0.000    0.000
3   f1 =~  y3 0.000  0.000   0.000    0.000    0.000
4   f1 =~  y4 0.027  0.014   0.014    0.014    0.014
5   f1 =~  y5 1.496 -0.120  -0.120   -0.120   -0.120
6   f1 =~  y6 1.594  0.110   0.110    0.110    0.110
7   f2 =~  y1 3.098  0.160   0.160    0.160    0.160
8   f2 =~  y2 0.096  0.027   0.027    0.027    0.027
9   f2 =~  y3 4.422 -0.184  -0.184   -0.185   -0.185
10  f2 =~  y4 0.000  0.000   0.000    0.000    0.000
11  f2 =~  y5 0.000  0.000   0.000    0.000    0.000
12  f2 =~  y6 0.000  0.000   0.000    0.000    0.000
13  y1 ~~  y1 0.000  0.000   0.000    0.000    0.000
14  y1 ~~  y2 4.422 -0.238  -0.238   -0.239   -0.239
15  y1 ~~  y3 0.096  0.044   0.044    0.044    0.044
16  y1 ~~  y4 0.065  0.012   0.012    0.012    0.012
17  y1 ~~  y5 0.132  0.017   0.017    0.017    0.017
18  y1 ~~  y6 1.260  0.055   0.055    0.055    0.055
19  y2 ~~  y2 0.000  0.000   0.000    0.000    0.000
20  y2 ~~  y3 3.098  0.179   0.179    0.180    0.180
21  y2 ~~  y4 0.307  0.028   0.028    0.028    0.028
22  y2 ~~  y5 0.000  0.000   0.000    0.000    0.000
23  y2 ~~  y6 0.049 -0.011  -0.011   -0.012   -0.012
24  y3 ~~  y3 0.000  0.000   0.000    0.000    0.000
25  y3 ~~  y4 0.347 -0.029  -0.029   -0.029   -0.029
26  y3 ~~  y5 1.975 -0.066  -0.066   -0.066   -0.066
27  y3 ~~  y6 0.045  0.011   0.011    0.011    0.011
28  y4 ~~  y4 0.000  0.000   0.000    0.000    0.000
29  y4 ~~  y5 1.594  0.183   0.183    0.184    0.184
30  y4 ~~  y6 1.496 -0.114  -0.114   -0.115   -0.115
31  y5 ~~  y5 0.000  0.000   0.000    0.000    0.000
32  y5 ~~  y6 0.027  0.021   0.021    0.021    0.021
33  y6 ~~  y6 0.000  0.000   0.000    0.000    0.000
34  f1 ~~  f1    NA     NA      NA       NA       NA
35  f1 ~~  f2 0.000  0.000   0.000    0.000    0.000
36  f2 ~~  f2    NA     NA      NA       NA       NA
37  y1 ~1     0.000  0.000   0.000    0.000    0.000
38  y2 ~1     0.000  0.000   0.000    0.000    0.000
39  y3 ~1     0.000  0.000   0.000    0.000    0.000
40  y4 ~1     0.000  0.000   0.000    0.000    0.000
41  y5 ~1     0.000  0.000   0.000    0.000    0.000
42  y6 ~1     0.000  0.000   0.000    0.000    0.000
43  f1 ~1        NA     NA      NA       NA       NA
44  f2 ~1        NA     NA      NA       NA       NA

> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryConverge")
> ### * summaryConverge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryConverge
> ### Title: Provide a comparison between the characteristics of convergent
> ###   replications and nonconvergent replications
> ### Aliases: summaryConverge
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path.BE <- matrix(0, 4, 4)
> ##D path.BE[3, 1:2] <- NA
> ##D path.BE[4, 3] <- NA
> ##D starting.BE <- matrix("", 4, 4)
> ##D starting.BE[3, 1:2] <- "runif(1, 0.3, 0.5)"
> ##D starting.BE[4, 3] <- "runif(1, 0.5, 0.7)"
> ##D mis.path.BE <- matrix(0, 4, 4)
> ##D mis.path.BE[4, 1:2] <- "runif(1, -0.1, 0.1)"
> ##D BE <- bind(path.BE, starting.BE, misspec=mis.path.BE)
> ##D 
> ##D residual.error <- diag(4)
> ##D residual.error[1,2] <- residual.error[2,1] <- NA
> ##D RPS <- binds(residual.error, "rnorm(1, 0.3, 0.1)")
> ##D 
> ##D loading <- matrix(0, 12, 4)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D loading[10:12, 4] <- NA
> ##D mis.loading <- matrix("runif(1, -0.3, 0.3)", 12, 4)
> ##D mis.loading[is.na(loading)] <- 0
> ##D LY <- bind(loading, "runif(1, 0.7, 0.9)", misspec=mis.loading)
> ##D 
> ##D mis.error.cor <- matrix("rnorm(1, 0, 0.1)", 12, 12)
> ##D diag(mis.error.cor) <- 0
> ##D RTE <- binds(diag(12), misspec=mis.error.cor)
> ##D 
> ##D SEM.Model <- model(RPS = RPS, BE = BE, LY=LY, RTE=RTE, modelType="SEM")
> ##D 
> ##D n1 <- list(mean = 0, sd = 0.1)
> ##D chi5 <- list(df = 5)
> ##D 
> ##D facDist <- bindDist(c("chisq", "chisq", "norm", "norm"), chi5, chi5, n1, n1)
> ##D 
> ##D # In reality, more than 50 replications are needed.
> ##D simOut <- sim(50, n=500, SEM.Model, sequential=TRUE, facDist=facDist, estimator="mlr")
> ##D 
> ##D # Summary the convergent and nonconvergent replications
> ##D summaryConverge(simOut)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summaryFit")
> ### * summaryFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryFit
> ### Title: Provide summary of model fit across replications
> ### Aliases: summaryFit
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LY <- bind(loading, 0.7)
> RPS <- binds(diag(1))
> RTE <- binds(diag(6))
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> 
> # Summarize the sample fit indices
> summaryFit(Output)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.712285e+01 1.731436e+01 1.746756e+01 1.750203e+01 1.161908e+01
      AIC   7.506931e+03 7.510452e+03 7.513269e+03 7.513903e+03 7.448091e+03
      BIC   7.582794e+03 7.586315e+03 7.589132e+03 7.589766e+03 7.523954e+03
      RMSEA 4.246827e-02 4.297230e-02 4.337552e-02 4.346625e-02 2.233445e-02
      CFI   9.919334e-01 9.915622e-01 9.912652e-01 9.911984e-01 9.962455e-01
      TLI   9.865557e-01 9.859370e-01 9.854420e-01 9.853307e-01 9.957462e-01
      SRMR  1.872347e-02 1.886139e-02 1.897172e-02 1.899654e-02 1.474084e-02
           Alpha
Fit Indices           SD
      Chi    5.626151104
      AIC   69.164702758
      BIC   69.164702758
      RMSEA  0.021304138
      CFI    0.004016351
      TLI    0.009177143
      SRMR   0.004065561
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryMisspec")
> ### * summaryMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryMisspec
> ### Title: Provide summary of the population misfit and
> ###   misspecified-parameter values across replications
> ### Aliases: summaryMisspec
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- matrix(0, 4, 4)
> ##D path[3, 1:2] <- NA
> ##D path[4, 3] <- NA
> ##D pathVal <- matrix("", 4, 4)
> ##D pathVal[3, 1:2] <- "runif(1, 0.3, 0.5)"
> ##D pathVal[4, 3] <- "runif(1, 0.5, 0.7)"
> ##D pathMis <- matrix(0, 4, 4)
> ##D pathMis[4, 1:2] <- "runif(1, -0.1, 0.1)"
> ##D BE <- bind(path, pathVal, pathMis)
> ##D 
> ##D residual.error <- diag(4)
> ##D residual.error[1,2] <- residual.error[2,1] <- NA
> ##D RPS <- binds(residual.error, "rnorm(1, 0.3, 0.1)")
> ##D 
> ##D Path.Model <- model(RPS = RPS, BE = BE, modelType="Path")
> ##D 
> ##D # The number of replications in actual analysis should be much more than 5
> ##D ParamObject <- sim(5, n=200, Path.Model)
> ##D 
> ##D # Summarize the model misspecification that is specified in the 'pathMis' object
> ##D summaryMisspec(ParamObject)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summaryParam")
> ### * summaryParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryParam
> ### Title: Provide summary of parameter estimates and standard error across
> ###   replications
> ### Aliases: summaryParam
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsem"]

Slots:
                                                                       
Name:     modelType         nRep         coef           se          fit
Class:    character      numeric   data.frame   data.frame   data.frame
                                                                       
Name:     converged   paramValue misspecValue       popFit         FMI1
Class:       vector   data.frame   data.frame   data.frame   data.frame
                                                                       
Name:          FMI2      stdCoef         seed            n         nobs
Class:   data.frame   data.frame      numeric       vector   data.frame
                                                                       
Name:        pmMCAR        pmMAR     extraOut    paramOnly       timing
Class:       vector       vector         list      logical         list
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LY <- bind(loading, 0.7)
> RPS <- binds(diag(1))
> RTE <- binds(diag(6))
> CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> 
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- sim(5, n=500, CFA.Model)
Loading required package: parallel
> 
> # Summary of the parameter estimates
> summaryParam(Output)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.f1=~y1      0.690756222  0.02810821 0.04149426                   1
1.f1=~y2      0.684804689  0.02263634 0.04211500                   1
1.f1=~y3      0.696132948  0.01555982 0.04135121                   1
1.f1=~y4      0.665635622  0.05563833 0.04117407                   1
1.f1=~y5      0.695344608  0.03075860 0.04160583                   1
1.f1=~y6      0.726805524  0.04988728 0.04168946                   1
1.y1~~y1      0.504025183  0.01390452 0.03830916                   1
1.y2~~y2      0.530959133  0.03432323 0.03978899                   1
1.y3~~y3      0.495700391  0.04352864 0.03793284                   1
1.y4~~y4      0.509197716  0.03774771 0.03808873                   1
1.y5~~y5      0.505610360  0.05558942 0.03852026                   1
1.y6~~y6      0.484795803  0.02083427 0.03801104                   1
1.y1~1        0.018166032  0.02869038 0.04430370                   0
1.y2~1        0.004590901  0.04278074 0.04471879                   0
1.y3~1        0.020747719  0.01949684 0.04427270                   0
1.y4~1        0.013662145  0.03941881 0.04367343                   0
1.y5~1        0.006917364  0.03267555 0.04446808                   0
1.y6~1        0.013019025  0.02085171 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.f1=~y1 0.697070159 0.01422193          0.70 -0.0092437783      1.0
1.f1=~y2 0.684851044 0.01632425          0.70 -0.0151953108      1.0
1.f1=~y3 0.703397048 0.01804011          0.70 -0.0038670517      1.0
1.f1=~y4 0.680861395 0.03863725          0.70 -0.0343643776      0.8
1.f1=~y5 0.699459947 0.02232974          0.70 -0.0046553920      1.0
1.f1=~y6 0.721071704 0.02764565          0.70  0.0268055239      0.8
1.y1~~y1 0.513931382 0.01991775          0.51 -0.0059748167      1.0
1.y2~~y2 0.530765863 0.02240771          0.51  0.0209591335      1.0
1.y3~~y3 0.504972236 0.02529070          0.51 -0.0142996089      1.0
1.y4~~y4 0.535233491 0.05128520          0.51 -0.0008022839      1.0
1.y5~~y5 0.510356889 0.03111061          0.51 -0.0043896404      1.0
1.y6~~y6 0.479444173 0.03996515          0.51 -0.0252041971      1.0
1.y1~1   0.018417694 0.02909934          0.00  0.0181660316      1.0
1.y2~1   0.004545719 0.04208763          0.00  0.0045909006      1.0
1.y3~1   0.021140083 0.02002118          0.00  0.0207477190      1.0
1.y4~1   0.014854828 0.04097595          0.00  0.0136621452      1.0
1.y5~1   0.007233837 0.03314308          0.00  0.0069173639      1.0
1.y6~1   0.013257580 0.02080364          0.00  0.0130190253      1.0
> 
> # Summary of the parameter estimates with additional details
> summaryParam(Output, detail=TRUE)
         Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.
1.f1=~y1      0.690756222  0.02810821 0.04149426                   1
1.f1=~y2      0.684804689  0.02263634 0.04211500                   1
1.f1=~y3      0.696132948  0.01555982 0.04135121                   1
1.f1=~y4      0.665635622  0.05563833 0.04117407                   1
1.f1=~y5      0.695344608  0.03075860 0.04160583                   1
1.f1=~y6      0.726805524  0.04988728 0.04168946                   1
1.y1~~y1      0.504025183  0.01390452 0.03830916                   1
1.y2~~y2      0.530959133  0.03432323 0.03978899                   1
1.y3~~y3      0.495700391  0.04352864 0.03793284                   1
1.y4~~y4      0.509197716  0.03774771 0.03808873                   1
1.y5~~y5      0.505610360  0.05558942 0.03852026                   1
1.y6~~y6      0.484795803  0.02083427 0.03801104                   1
1.y1~1        0.018166032  0.02869038 0.04430370                   0
1.y2~1        0.004590901  0.04278074 0.04471879                   0
1.y3~1        0.020747719  0.01949684 0.04427270                   0
1.y4~1        0.013662145  0.03941881 0.04367343                   0
1.y5~1        0.006917364  0.03267555 0.04446808                   0
1.y6~1        0.013019025  0.02085171 0.04503690                   0
             Std.Est Std.Est.SD Average.Param  Average.Bias Coverage
1.f1=~y1 0.697070159 0.01422193          0.70 -0.0092437783      1.0
1.f1=~y2 0.684851044 0.01632425          0.70 -0.0151953108      1.0
1.f1=~y3 0.703397048 0.01804011          0.70 -0.0038670517      1.0
1.f1=~y4 0.680861395 0.03863725          0.70 -0.0343643776      0.8
1.f1=~y5 0.699459947 0.02232974          0.70 -0.0046553920      1.0
1.f1=~y6 0.721071704 0.02764565          0.70  0.0268055239      0.8
1.y1~~y1 0.513931382 0.01991775          0.51 -0.0059748167      1.0
1.y2~~y2 0.530765863 0.02240771          0.51  0.0209591335      1.0
1.y3~~y3 0.504972236 0.02529070          0.51 -0.0142996089      1.0
1.y4~~y4 0.535233491 0.05128520          0.51 -0.0008022839      1.0
1.y5~~y5 0.510356889 0.03111061          0.51 -0.0043896404      1.0
1.y6~~y6 0.479444173 0.03996515          0.51 -0.0252041971      1.0
1.y1~1   0.018417694 0.02909934          0.00  0.0181660316      1.0
1.y2~1   0.004545719 0.04208763          0.00  0.0045909006      1.0
1.y3~1   0.021140083 0.02002118          0.00  0.0207477190      1.0
1.y4~1   0.014854828 0.04097595          0.00  0.0136621452      1.0
1.y5~1   0.007233837 0.03314308          0.00  0.0069173639      1.0
1.y6~1   0.013257580 0.02080364          0.00  0.0130190253      1.0
             Rel.Bias    Std.Bias  Rel.SE.Bias
1.f1=~y1 -0.013205398 -0.32886396  0.476232740
1.f1=~y2 -0.021707587 -0.67127946  0.860503687
1.f1=~y3 -0.005524360 -0.24852811  1.657564453
1.f1=~y4 -0.049091968 -0.61763854 -0.259969301
1.f1=~y5 -0.006650560 -0.15135254  0.352656767
1.f1=~y6  0.038293606  0.53732181 -0.164326860
1.y1~~y1 -0.011715327 -0.42970314  1.755158285
1.y2~~y2  0.041096340  0.61063984  0.159243649
1.y3~~y3 -0.028038449 -0.32851038 -0.128554290
1.y4~~y4 -0.001573106 -0.02125384  0.009034115
1.y5~~y5 -0.008607138 -0.07896540 -0.307057691
1.y6~~y6 -0.049419994 -1.20974729  0.824448344
1.y1~1             NA  0.63317496  0.544200491
1.y2~1             NA  0.10731232  0.045301862
1.y3~1            Inf  1.06415821  1.270762971
1.y4~1             NA  0.34658949  0.107933666
1.y5~1             NA  0.21169845  0.360897472
1.y6~1             NA  0.62436249  1.159865888
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryPopulation")
> ### * summaryPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryPopulation
> ### Title: Summarize the population model used for data generation
> ###   underlying a result object
> ### Aliases: summaryPopulation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LY <- bind(loading, "runif(1, 0.4, 0.9)")
> ##D RPS <- binds(diag(1))
> ##D RTE <- binds(diag(6))
> ##D CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")
> ##D 
> ##D # We will use only 10 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- sim(10, n=200, model=CFA.Model)
> ##D 
> ##D # Get the summary of population model
> ##D summaryPopulation(Output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summaryShort")
> ### * summaryShort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryShort
> ### Title: Provide short summary of an object.
> ### Aliases: summaryShort summaryShort-methods summaryShort,ANY-method
> ###   summaryShort,vector-method summaryShort,matrix-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> LY <- bind(loading, "runif(1, 0.8, 0.9)")
> summaryShort(LY)
     [,1]                    [,2]                   
[1,] "NA:runif(1, 0.8, 0.9)" "0"                    
[2,] "NA:runif(1, 0.8, 0.9)" "0"                    
[3,] "NA:runif(1, 0.8, 0.9)" "0"                    
[4,] "0"                     "NA:runif(1, 0.8, 0.9)"
[5,] "0"                     "NA:runif(1, 0.8, 0.9)"
[6,] "0"                     "NA:runif(1, 0.8, 0.9)"
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.46 0.06 6.8 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
