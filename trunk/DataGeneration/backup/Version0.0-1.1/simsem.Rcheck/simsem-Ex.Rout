
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simsem"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('simsem')
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Rnorm-class")
> ### * Rnorm-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rnorm-class
> ### Title: Class "Rnorm"
> ### Aliases: Rnorm-class run,Rnorm-method summary,Rnorm-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("Rnorm")
Class "Rnorm" [package "simsem"]

Slots:
                      
Name:     Mean      SD
Class: numeric numeric

Extends: "simDist"
> n2 <- rnorm.object(0, 0.2)
> run(n2)
[1] -0.1252908
> summary(n2)
[1] "Random Normal Distribution Object."
[1] "Mean is 0."
[1] "Standard deviation is 0.2."
> 
> 
> 
> cleanEx()
> nameEx("Runif-class")
> ### * Runif-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Runif-class
> ### Title: Class "Runif"
> ### Aliases: Runif-class run,Runif-method summary,Runif-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("Runif")
Class "Runif" [package "simsem"]

Slots:
                      
Name:    Lower   Upper
Class: numeric numeric

Extends: "simDist"
> u1 <- runif.object(-0.1, 0.1)
> run(u1)
[1] -0.04689827
> summary(u1)
[1] "Random Uniform Distribution Object."
[1] "Lower bound is -0.1."
[1] "Upper bound is 0.1."
> 
> 
> 
> cleanEx()
> nameEx("loading.from.alpha")
> ### * loading.from.alpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loading.from.alpha
> ### Title: Find standardized factor loading from coefficient alpha
> ### Aliases: loading.from.alpha
> 
> ### ** Examples
> 
>     loading.from.alpha(0.8, 4)
[1] 0.7071068
> 
> 
> 
> cleanEx()
> nameEx("rnorm.object")
> ### * rnorm.object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rnorm.object
> ### Title: Create random normal distribution object
> ### Aliases: rnorm.object
> 
> ### ** Examples
> 
>     n02 <- rnorm.object(0, 0.2)
>     run(n02)
[1] -0.1252908
> 
> 
> 
> cleanEx()
> nameEx("run")
> ### * run
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run
> ### Title: Run a particular object in simsem package.
> ### Aliases: run
> ### Keywords: run
> 
> ### ** Examples
> 
> n02 <- rnorm.object(0, 0.2)
> run(n02)
[1] -0.1252908
> 
> 
> 
> cleanEx()
> nameEx("runif.object")
> ### * runif.object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runif.object
> ### Title: Create random uniform distribution object
> ### Aliases: runif.object
> 
> ### ** Examples
> 
> u1 <- runif.object(-0.1, 0.1)
> run(u1)
[1] -0.04689827
> 
> 
> 
> cleanEx()
> nameEx("simDist-class")
> ### * simDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simDist-class
> ### Title: Class "simDist"
> ### Aliases: simDist-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("simDist")
Virtual Class "simDist" [package "simsem"]

No Slots, prototype of class "NULL"

Known Subclasses: "Runif", "Rnorm"
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.13 0.01 0.14 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
