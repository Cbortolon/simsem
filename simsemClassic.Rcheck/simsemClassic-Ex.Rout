
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simsemClassic"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('simsemClassic')
Loading required package: lavaan
Loading required package: MASS
Loading required package: boot
Loading required package: mvtnorm
Loading required package: quadprog
This is lavaan 0.5-9
lavaan is BETA software! Please report any bugs.
 
###############################################################################################
This is simsemClassic 0.2-9
simsemClassic is BETA software! Please report any bugs.
simsemClassic was developed at the University of Kansas Center for Research Methods and Data Analysis.
###############################################################################################
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MatrixSet-class")
> ### * MatrixSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatrixSet-class
> ### Title: Class '"MatrixSet"'
> ### Aliases: MatrixSet-class MisspecSet-class summary,MatrixSet-method
> ###   summary,MisspecSet-method
> 
> ### ** Examples
> 
> showClass("SimSet")
Class "SimSet" [package "simsemClassic"]

Slots:
                                                                            
Name:  modelType        LY        TE       RTE       VTE        PS       RPS
Class: character SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPS        BE        TY        AL        ME        MY        VE
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimVector
                                                                            
Name:         VY        LX        TD       RTD       VTD        PH       RPH
Class: SimVector SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPH        GA        TX        KA        MX        VX        TH
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimMatrix
                
Name:        RTH
Class: SimMatrix

Known Subclasses: 
Class "NullSimSet", directly
Class "SimMisspec", directly
Class "NullSimMisspec", by class "SimMisspec", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> MatrixSet <- run(CFA.Model)
> summary(MatrixSet)
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

VTE: Variance of Measurement.Error.EPSILON 
[1] 0.51 0.51 0.51 0.51 0.51 0.51

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    0    0    0    0    0
[2,]    0    1    0    0    0    0
[3,]    0    0    1    0    0    0
[4,]    0    0    0    1    0    0
[5,]    0    0    0    0    1    0
[6,]    0    0    0    0    0    1

VY: Variance of Indicator.Y 
[1] 1 1 1 1 1 1

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

MY: mean of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2]
[1,]  1.0  0.5
[2,]  0.5  1.0

VPS: Variance of Regression.Residual.PSI 
[1] 1 1

RPS: Correlation of Regression.Residual.PSI 
     [,1] [,2]
[1,]  1.0  0.5
[2,]  0.5  1.0

VE: Variance of Factor.ETA 
[1] 1 1

AL: Regression Intercept of Factor.ETA 
[1] 0 0

ME: mean of Factor.ETA 
[1] 0 0
------------------------------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("Null-class")
> ### * Null-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Nullclass
> ### Title: Null Objects
> ### Aliases: NullDataFrame-class NullVector-class NullMatrix-class
> ###   NullSimMatrix-class NullSymMatrix-class NullSimVector-class
> ###   NullSimSet-class NullSimEqualCon-class NullSimREqualCon-class
> ###   NullRSet-class NullSimMisspec-class NullSimDataDist-class
> ###   NullSimMissing-class NullSimFunction-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimData-class")
> ### * SimData-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimData-class
> ### Title: Class '"SimData"'
> ### Aliases: SimData-class run,SimData-method summary,SimData-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimData")
Class "SimData" [package "simsemClassic"]

Slots:
                                                                              
Name:    modelType           n       param     misspec    equalCon     maxDraw
Class:   character     numeric      SimSet  SimMisspec SimEqualCon     numeric
                                                                              
Name:   sequential     facDist   errorDist     indDist      indLab   modelBoot
Class:     logical SimDataDist SimDataDist SimDataDist      vector     logical
                  
Name:     realData
Class:  data.frame
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 200)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "No"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
              y1            y2           y3            y4           y5
1    0.861413643  0.3543112677 -0.510988043  0.3505152466  1.386601202
2    0.212495373 -1.0926970622 -1.798353732 -0.7370809787  1.764391805
3   -0.512218594 -0.2962942528  0.326671545  1.4051457532  0.584956511
4   -1.150292877 -0.7016111752 -0.915235141 -1.5033545683 -1.211857492
5    0.576623579  0.9058263804  0.975511971 -1.3930148512 -0.908102473
6   -0.804869378 -1.3239206663  0.371314019  2.2907373701  1.619471995
7   -0.845528202 -0.1864033874 -0.863310794  0.5094926904  0.385290484
8   -0.915651588 -1.4870664302  0.172987556  0.3020181685 -1.056237051
9    0.459505027 -1.3162218944 -0.286923688 -1.0458305036 -1.051621032
10  -0.433667640  0.4739885111 -0.121130124 -0.2871526148  1.537906381
11  -1.168408625 -1.0536928154 -0.604108618 -1.0227121698 -1.369734006
12  -0.073384881 -0.6655942673 -0.622648093  0.0154539591 -0.524537499
13   1.256067332 -0.4533345578  0.997921014  0.7417301182 -0.339771423
14   1.663732281  1.3392013866  3.338905460  0.8606534876  2.106966483
15  -1.502964257 -0.8905192865 -1.226621342 -1.6975326476 -0.237637385
16  -0.356730164 -0.6800339975 -0.949388273  1.5720083415 -0.404740609
17   0.744976502 -0.3484906632  0.058100886  0.3081838186 -0.646471503
18  -0.210453086 -0.8553978741  0.873850291 -0.7995296260 -0.338126142
19  -1.678797199 -1.1583323826  0.302204885 -0.6004899076  0.549350151
20   0.617439978  0.1780023263 -1.932863126 -0.2766737469 -0.421192279
21   1.008121920 -0.4295057581 -0.064596895 -1.3185759969 -1.341314911
22  -0.941313493  0.1549561688 -0.794941162  0.5948796282 -0.894857145
23   0.199016415  0.6901389729 -0.178284376 -1.1567597245 -0.474457058
24   0.467580315  2.4057303807  1.607243516  0.3069045522  1.164321143
25   0.442101379  0.1153223859 -0.227727800 -1.2374451428 -1.037652935
26   0.156538181 -1.8601654610 -0.647213163  1.5260772163  0.646169745
27  -0.699051939  0.0984364516  1.367531077 -0.7312632727  0.511708171
28   1.266130997  2.5815876268  1.314362317  1.0795820927 -0.964811148
29  -0.142050518 -0.3874779716  1.224978493  0.1998662568  1.053372438
30  -0.798188083  0.0664339917 -0.471316840 -0.8594646697 -0.138670245
31  -1.650491810 -0.2063365105  0.462150039 -0.9091104616 -1.073881672
32   1.677218808  1.2425562504  1.235553042 -0.3978106464 -2.298056018
33  -0.862210232  0.1975061728  0.757625743  0.1760198577 -1.199031582
34  -0.238260960 -0.3932780724 -0.039515838  0.1212401260  0.584552677
35   1.299293864  1.2225769922  0.338711120  1.6671356868  0.962456572
36   0.208314791  0.7310457922  0.032284181  0.9173558580 -0.337579983
37   0.529891243 -0.1056890277 -0.394905894  0.9056440440 -0.806555013
38   0.565362304  1.0539869197  0.121720691 -0.6855628749 -0.577018500
39  -1.617219804 -0.3618988651 -1.739597663 -0.2119829811  0.607531880
40  -0.134050594 -0.8092316245 -0.589536760 -1.1002154182  0.017674171
41  -0.464489196  0.3534529661 -0.523534007  2.2188703938 -0.541859375
42   0.732974203 -0.9176727078 -0.717182051  0.1252231262  1.865338724
43  -0.581281485 -0.6947862975 -0.435835223  0.3303357476 -2.256196708
44   0.523085818 -0.7137612466  0.268115921 -0.4793002597 -0.720880471
45   0.053186944  0.7666578068 -1.019172425  0.7394875192  1.503618039
46  -0.366941481  2.7023886307  1.825664410  0.3271022463 -0.343360535
47  -0.793656736  0.8789680069 -0.076561592 -0.6528994813 -0.960046253
48  -0.647806089 -0.1852071785 -0.368529036  0.3476022781 -0.709467959
49   0.289323996  0.0969885950  0.067422165 -0.5014595106  1.185361369
50  -2.423578620 -0.2618983608 -0.487167133  0.0986046906 -0.297789962
51   0.230910313 -0.5380852158 -0.682376200 -0.0938058985 -0.458002557
52  -0.126212758  0.5802509622  0.224636735  1.1913491129  0.286621479
53  -0.636734647 -0.5771221108  0.620650177 -1.4088487809  0.115500499
54  -0.034551834  2.2274822868  0.424622954  0.4216359700  2.364066086
55  -2.128565023 -0.4969576695 -1.216897042 -0.9262828800 -0.368585893
56  -1.821462828 -2.1254090590 -1.616057065  0.3243084176 -0.186708733
57   1.638696258  1.7033320487  0.683027914 -1.1733271835 -0.254792722
58  -0.781791010  0.6407058235  1.465508543  0.4529950007  1.400566656
59  -1.139573414  0.5269050377 -1.049135949  0.0719667467  0.281911000
60   0.596973274 -0.0951136558  0.351842462 -0.5170752198 -0.007225724
61  -2.312893818 -2.9661367230 -0.867159679 -0.9353763518 -1.951277923
62   1.466317944  0.3632991872 -1.218511171 -0.3962684505 -0.571391046
63   0.391932969 -0.2373896486 -1.157911090 -0.5145244482  0.039864176
64  -0.062173228 -1.0069700752 -0.159072499  0.7924837368  0.485267330
65  -0.280493500 -0.9524256152  0.382894319  2.3470910105  0.966679198
66  -0.087118965 -1.0784984129  0.415578699  0.7195395033 -1.023750646
67   0.994865244  1.4625466822  1.762015203  1.6682305587  1.073537719
68  -0.077990541 -1.7162963273  0.461733903 -2.2833537805 -0.833449210
69   0.910807698 -0.7577905774 -0.009910945 -0.1607698518 -0.494929331
70  -0.401619629 -1.2642046138 -1.434262951 -2.9961539849 -1.890895791
71  -0.676115731  0.6472295525 -0.576864572  0.6324906522 -1.282458779
72  -0.646039945  0.4150205104  1.124777509  0.2500128726  0.306470824
73  -0.086724476 -0.1264904637  0.144860645 -0.7353772976 -0.440255857
74  -0.321322556 -0.6432249805 -0.770661546  2.3813826777  2.177600330
75   1.559987013  1.1716912287 -0.414991474  0.3633004344  1.402332128
76  -1.479759163 -0.7888484634  0.135954678  1.1334913324  0.146822231
77   1.553410612  0.4565705830  2.012837932 -0.0732962339 -1.011262192
78  -0.202133010 -1.2168913918  0.404167480  1.1048785559 -0.393825731
79   1.245759763  0.5129040778 -0.109953259 -0.6854282063 -0.766896874
80  -0.038705027 -0.0935975506  0.065010008  1.1846841146  1.056629444
81  -0.007163393  0.5876715539  0.023019390 -0.3083042698  1.153676127
82  -0.392131590  0.6035874049  0.618254833  0.6967597178 -0.423434093
83  -1.697410887 -1.0567165694 -1.432989020 -0.3396415067 -0.111255743
84   1.133148345  1.5820770483  1.317677530  0.6801429221  0.625320826
85   1.235542887 -0.6926307889 -0.948074197  0.2023674408 -1.242437759
86   1.658601301 -0.5930097193 -0.369469708  0.1284662890 -1.736799914
87  -0.507961316  0.1454775326 -0.869788524 -1.0904027132 -0.286581571
88  -0.834490893  0.0726494937  0.084041111  0.7243732400 -0.389207011
89  -1.596874299  0.3715367629 -0.114058752 -1.1239917731  0.463072150
90  -0.337441597 -0.6850029632 -0.890187891  0.8553857279  0.191720270
91  -0.093257675  1.7700469878 -0.048837706 -0.3078389588  0.256313925
92   0.348219067 -1.3320427239 -1.968040729 -0.7398181099 -0.387844525
93  -1.408202789 -0.6581578224 -0.609049717  0.7491165886 -1.422652458
94   0.243456204  0.0609808144  0.231574720 -0.9658062389 -0.717367580
95   0.344207872 -2.9715300379 -3.005316227 -0.2605189793 -0.667054703
96  -1.083527230 -1.1427547878  0.915500584 -0.2517897792 -0.586874440
97   0.689333259  1.1300197998 -0.289375139  1.9779819140  2.058390969
98  -0.694885437  0.9389971327 -0.392493480  0.8593468102  0.247853775
99   1.049522830  0.1372647986  1.353635350 -0.1336462379  1.856730364
100 -0.051443087  0.8382671240  0.586435751  0.1328556755  0.539907711
101  0.055296336 -0.0735650600  0.048932495  0.6571415239  1.758738984
102  0.275633778  0.0161200553  1.054455532 -1.3213624709 -0.845182468
103 -0.975169905  0.8220543481 -0.702565582  1.5412129655  1.559836156
104  0.075034469 -0.1837268561  0.314041657 -0.6159755251  0.320964874
105  0.265025534 -0.4475086556 -0.757033658  1.9327578722  0.895287184
106 -0.948231836 -2.2711263641 -2.413641572 -0.2077186584  0.193790281
107 -1.320329676 -0.5467938886  0.307398553  0.5674788384 -0.885383843
108 -1.016185453 -1.3085167627 -0.287213340 -0.0028369956 -0.613489038
109  0.884324639 -0.0614902520 -0.198025062 -1.1504808282 -1.192912269
110 -1.928402384 -0.7621703652 -1.145541330 -2.1696139874 -0.449385886
111 -1.522096725  0.7494659035  0.629410411  0.1711208841  0.794050312
112 -0.280312946  0.8439254433  0.232609504 -0.4650530796  0.657014210
113 -1.320592806 -0.4779742477 -0.471233339 -1.5475051331 -0.284260689
114  0.764124426  0.9981591158  0.447018626  0.7434283246  0.174367172
115 -0.079552412 -0.2186871242  0.765833247  0.9409381738 -1.052346451
116 -0.087807435 -0.0503333026 -0.530234403  1.6648612990  1.306633545
117  0.189430941  0.1450294597  0.972682380  0.1341778017  0.017466506
118  0.461023638 -0.0036956528  0.271303019 -0.4181157867 -0.387373421
119  0.043661420  0.3173607807  0.410210679 -0.9667612896 -0.961558043
120  0.588059098 -1.0347115424  0.129002452  0.5449175857 -1.017994357
121 -0.685361555 -0.0019779816 -0.078948730  0.9421558000  0.485151304
122 -1.415885283 -1.6302366130 -1.709992921  0.9263058055 -1.562509872
123 -0.742722748 -0.2685087596  0.330917844 -0.1680438355  0.151745349
124  1.093801209  0.5099948460  1.313744840 -1.0195579946 -0.157810644
125 -0.180009695  0.5142502151 -0.790775903  0.8114185930  0.251602994
126 -1.669412770 -0.9195818253  0.527463942 -0.5190944970  0.084444863
127  0.126369072  0.0200590289  0.484972549  0.3139405988  0.493543167
128  0.635831061 -1.6271235774  0.834254966 -0.2129370993 -0.149147976
129  1.249448316  0.4315617209  0.875371860  0.1656623917 -0.573288998
130 -0.007746821 -0.3437021005  0.077627444  0.8417913419  0.281578685
131 -0.586701177  1.3031763921 -0.390876797  0.2058719884 -0.428544538
132  1.792660805  0.4079346672  1.132072135 -0.4149794825 -1.001958360
133 -0.143963577 -0.6705942794  0.244120719 -0.0095649052 -0.498030201
134  0.136438365 -0.4361149960  1.499273032  1.4410926331  2.861639075
135  0.903515450 -0.3506271367 -0.714718219 -0.3205368119 -0.803438047
136  0.251011805  1.7337952166  0.114465134  2.2037557054  0.307936515
137 -0.051840980 -0.8927031770  0.258356266  0.2839990507  0.405402021
138  1.100735181 -0.3847904543  0.344136042  0.0476781136  1.077579062
139  0.950295564  1.0641056202 -0.216974137 -0.5061212558  0.616243761
140  0.100537975 -0.0693315369  0.807477104 -0.6965633938  0.216479792
141  0.706877091  1.3869676352  0.758719297  2.6509231851  1.830583942
142 -0.099959750 -0.1533855522 -0.667767406 -0.4400385711 -1.552975336
143  1.307249651  0.3244222521  1.391851947  0.9752667828  0.517247900
144  0.454531311  1.0693398311 -0.192826866 -0.1582274132  0.177651728
145  2.551145934  1.6755838986  1.120364209 -0.1648480186  0.392260715
146  1.108437431  1.0067593784  1.325274451  0.8055728278 -0.606075529
147 -2.229603639 -1.9008069391 -1.333382514 -0.9953967793 -1.911848018
148  0.388742285 -0.0251517535 -0.137300524  1.0393895821 -1.392651604
149 -0.784491412  1.5008060109  0.781757206  0.1495867100  1.543357529
150  0.472376971 -0.0798688070  0.338948737  1.2963185922  1.547797785
151 -0.684441690 -1.9181976724 -0.320012330  1.5759598907 -0.493536226
152 -0.427148995 -0.3209142900 -0.140013606  0.7016030986  0.403074919
153 -0.610523430  0.7955126621 -0.062357105  1.1084393217  0.242279826
154  0.482668857  0.2875517789  1.368744294  0.3595594992  0.236454009
155  1.185521287 -0.3129343557 -0.027118921  2.3154163159  1.817552511
156  0.018124368  0.0693662860  1.267501599  2.1118438865  0.823073004
157 -1.497720959  0.7249910875  0.358397352 -1.8826612577 -1.821974512
158  0.962429386  0.2413504429  0.262659099  0.0005625601  0.056554058
159  1.513071107  1.8888977205  2.014179991 -0.4845696254  0.283413611
160 -1.466387525 -1.5847250359 -0.454363517 -1.7015236827 -0.131313259
161  0.186231494  0.8101148807  1.688366884 -1.6692860533 -1.108751920
162 -0.451176882  0.0001983117 -0.863090593  0.3962804794  0.859051704
163 -0.013628772 -0.8703504409 -0.383574892 -1.1940451270  0.489933352
164 -0.742973115 -0.0719105423 -0.386361859 -0.0124488191 -2.064433978
165  0.139901185 -1.0775591075  2.418701910 -0.0113008231  0.754813589
166 -1.123436675 -2.8277272787 -1.337482973 -2.3106332089 -0.784240631
167 -0.281768469  0.4803782893 -0.610950122  0.5868137757 -0.272022831
168  0.606278418  0.3086636257  1.183606970 -0.0764571540  2.351776865
169 -0.006947822  0.0306222677  1.050146952  0.0840765876 -0.746606455
170  1.006440687 -0.0453805734  0.483144634 -0.3045167299 -0.577395846
171 -1.955171798 -1.2216157685 -0.949599259 -1.3950557869 -2.023160730
172  0.297426638 -0.6064208538 -0.284307313  1.1733940017 -0.439296661
173  0.537317917 -0.0238539731 -0.310913579 -1.4702312749 -0.112398936
174 -0.189397989  0.8997237300 -0.460552139 -0.9893346880  0.561436997
175  1.251281395  0.6557115463  0.362721833 -1.3005740247  1.523165191
176  0.602525243  0.2357786330 -0.756870428  0.1042498150  0.767889073
177 -0.252885365 -0.8666863633 -0.646008630 -0.8530163721 -0.774600177
178 -0.148853140 -1.4460892020 -2.393644047 -1.4234434606 -1.643747242
179 -1.760681293 -0.3008314993  0.212185032  0.1336744680 -2.027112438
180 -2.295133234 -1.3281880136 -1.224299082 -0.5221418727 -0.110363884
181 -0.321728301  2.0038236896 -0.239355095  1.5478740236  1.230585545
182 -1.070355644 -1.2054093135 -1.228622064 -0.6857971917 -0.246966425
183  1.196591093 -0.4016559163  0.022869323 -0.2972950401 -0.297888051
184  1.890499221  0.2234592133  0.622432297  1.1506829875  0.544776917
185 -0.591806657 -0.5795047775 -1.458278905 -0.1570001209 -0.023177628
186  0.644888125  0.9163934684 -1.163667676  0.6294529751  0.338700960
187 -0.099706259  0.1407974003 -0.086782391 -2.4354019958 -1.455459174
188  0.631699417  0.0874962263  0.355537076  0.7305852581  0.665530233
189  1.376524960  2.1618794847 -0.066972856 -0.7906073885 -0.777282987
190  0.548723117  0.9012003883  1.527522616  0.9018640409 -0.199422941
191 -0.654997031  0.1029714709 -0.899908937  0.5357004769  1.147610689
192 -0.629486991 -0.7832298020 -0.239868302 -0.8441800729  0.277020853
193  0.807699156 -0.8547544499  0.031918390  1.1391427904  0.558090724
194 -1.302904699  0.3290573517 -1.120877400 -0.5607532007 -0.887596082
195 -0.370024368  0.6055568293  2.352970396  1.0258238460  0.467148675
196  1.573983254  0.7064076057  1.097620903  0.7011084384  0.463478813
197 -2.170945778 -1.5492250059 -1.364968555 -0.5213547266  0.257713824
198  0.408546342  0.5148022056  1.065166026  1.1903906634  0.933966472
199  0.576157997 -1.2103133253  0.780041864  0.2840384971  0.129711042
200 -0.582737113 -0.3002170722  0.469598637 -0.0953607960  0.913413383
              y6
1    0.086568899
2    0.910044122
3    1.864408996
4   -0.956341195
5   -1.486766711
6    1.158748615
7   -0.966846957
8    0.004006442
9    0.917188340
10   0.062629652
11  -0.883024411
12   0.297269479
13   0.304768681
14  -0.370737200
15   1.014955623
16   1.000240667
17  -0.050953726
18  -2.479748825
19  -0.728455913
20  -0.561750682
21  -1.563201178
22  -1.275494320
23   0.619394995
24   2.077417037
25  -0.556268663
26   0.405133970
27   0.081443764
28   0.659233006
29  -0.018833374
30   0.514357257
31  -2.106078750
32  -1.044601204
33  -0.634586394
34   0.182423904
35   0.067758235
36   0.123533611
37   1.463003289
38  -0.239094497
39  -1.116630906
40  -0.464883655
41  -0.378409199
42  -0.066091457
43   0.824758998
44  -1.124000980
45   0.736100170
46  -1.289341114
47   0.132711459
48  -1.538457926
49  -0.684197503
50  -0.184398244
51  -0.065430495
52   0.313546369
53   0.509766038
54  -0.845047510
55  -0.646520134
56  -2.567737442
57  -1.114798409
58   1.036233402
59  -0.991511526
60   0.215691024
61  -0.660294240
62   0.514929610
63  -1.305820180
64  -0.162554419
65   0.536170082
66   0.292267635
67   0.323775037
68  -1.465751283
69  -0.105950832
70  -0.781713214
71  -0.663479053
72   1.415163942
73  -1.220957377
74   0.946325583
75   0.977454408
76  -0.323963039
77  -1.149096039
78   0.299342801
79  -0.496433570
80   0.205336965
81   0.846297194
82  -0.557443593
83  -0.116848139
84   0.810881811
85  -0.951986197
86  -0.431604985
87  -1.681507069
88   1.570346904
89   0.506887724
90  -0.212507562
91   0.613231588
92  -0.795532788
93  -1.334539962
94  -1.678961278
95   0.155613858
96  -0.104654269
97  -0.413913313
98   1.354930408
99   0.679136213
100 -0.135336919
101  0.057309735
102  0.650352237
103  1.431191236
104 -0.548156526
105  0.753432436
106 -1.485997403
107 -1.015063864
108 -0.445300981
109  0.167978161
110 -0.334295418
111  1.743936988
112  0.875055263
113 -1.679249815
114 -0.500830432
115  0.480821334
116 -0.717712642
117 -0.167267964
118  1.203383837
119 -0.837500752
120  1.506448056
121  1.381069607
122 -0.028302946
123  1.562673358
124 -1.015466441
125 -0.202107635
126 -0.380203083
127 -1.141972064
128  0.671017425
129  0.602485852
130  0.459234551
131 -0.345738653
132  0.461099741
133 -1.067132743
134  0.626042831
135  0.048510503
136  1.590281112
137  1.211552717
138 -0.053154176
139  0.724361854
140 -0.128959582
141  0.392450451
142 -1.834666246
143  2.203935428
144  0.520380536
145 -1.070555869
146 -0.609597589
147 -0.052948319
148  0.056761777
149  2.000605081
150  3.046053743
151  0.023233624
152 -0.141692023
153 -0.189599575
154  1.016008243
155  1.025082701
156  0.049660737
157  0.082764820
158  0.983931018
159  0.372674694
160 -2.206306961
161 -1.622417483
162  1.021937493
163 -2.300464019
164 -0.299550815
165  0.274762196
166 -0.520501184
167  1.126860692
168  1.375515919
169  0.171517856
170 -1.399935009
171 -1.770598764
172 -0.567823397
173 -0.464407190
174  0.489520065
175 -1.144249411
176 -0.813415056
177  0.214214765
178 -1.320092754
179 -0.403879756
180  0.604902443
181  0.748528856
182  0.466062307
183 -1.110257097
184  1.490098447
185  0.706874858
186 -0.725020422
187 -1.974649704
188  0.621125552
189 -0.167169053
190  0.057971480
191  0.483430365
192  0.597189712
193  1.271302835
194  0.191615504
195  0.794452109
196 -0.312842525
197 -0.467857952
198 -0.012822742
199 -2.222401943
200  1.133359139
> 
> 
> 
> cleanEx()
> nameEx("SimDataDist-class")
> ### * SimDataDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataDist-class
> ### Title: Class '"SimDataDist"'
> ### Aliases: SimDataDist-class summary,SimDataDist-method
> ###   run,SimDataDist-method plotDist,SimDataDist-method
> ###   extract,SimDataDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimDataDist")
Class "SimDataDist" [package "simsemClassic"]

Slots:
                                              
Name:          p      dist keepScale   reverse
Class:   numeric      list    vector    vector

Known Subclasses: "NullSimDataDist"
> 
> chisq3 <- simChisq(3)
> chisq8 <- simChisq(8)
> dist <- simDataDist(chisq3, chisq8)
> dist2 <- extract(dist, 2)
> 
> m <- c(0, 0)
> cm <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> n <- 20
> dat <- run(dist, n, m, cm)
> 
> plotDist(dist, r=0.2)
> 
> 
> 
> 
> cleanEx()

detaching 'package:copula'

> nameEx("SimDataOut-class")
> ### * SimDataOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDataOut-class
> ### Title: Class '"SimDataOut"'
> ### Aliases: SimDataOut-class summary,SimDataOut-method
> ###   createImpliedMACS,SimDataOut-method
> ###   summaryPopulation,SimDataOut-method getPopulation,SimDataOut-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimDataOut")
Class "SimDataOut" [package "simsemClassic"]

Slots:
                                                                              
Name:    modelType        data       param    paramOut  misspecOut    equalCon
Class:   character  data.frame    SimParam     SimRSet     SimRSet SimEqualCon
                  
Name:            n
Class:     numeric
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> Data <- run(SimData, dataOnly=FALSE)
> Result <- run(SimModel, Data)
> summary(Data)
DATA RESULT OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 500
Data Summary       y1                   y2                  y3           
 Min.   :-2.9782138   Min.   :-3.440371   Min.   :-3.236773  
 1st Qu.:-0.7907196   1st Qu.:-0.668559   1st Qu.:-0.662487  
 Median :-0.0003833   Median :-0.017077   Median :-0.005744  
 Mean   :-0.0471202   Mean   :-0.002737   Mean   :-0.016654  
 3rd Qu.: 0.6906666   3rd Qu.: 0.656803   3rd Qu.: 0.668327  
 Max.   : 3.1399949   Max.   : 3.488928   Max.   : 2.996841  
       y4                  y5                 y6           
 Min.   :-3.499333   Min.   :-3.84492   Min.   :-2.917694  
 1st Qu.:-0.733658   1st Qu.:-0.64802   1st Qu.:-0.671821  
 Median : 0.025139   Median :-0.05529   Median :-0.002239  
 Mean   : 0.008184   Mean   :-0.02130   Mean   :-0.023397  
 3rd Qu.: 0.746974   3rd Qu.: 0.65861   3rd Qu.: 0.629089  
 Max.   : 2.841695   Max.   : 2.75081   Max.   : 2.845111  
============Parameter Values================
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]
[1,]  0.7
[2,]  0.7
[3,]  0.7
[4,]  0.7
[5,]  0.7
[6,]  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1]
[1,]    1

AL: Regression Intercept of Factor.ETA 
[1] 0
------------------------------------------------- 
============================================
> summaryPopulation(Data)
======== Real Parameters =========
RANDOM NUMBERS OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]
[1,]  0.7
[2,]  0.7
[3,]  0.7
[4,]  0.7
[5,]  0.7
[6,]  0.7

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] 0.51 0.00 0.00 0.00 0.00 0.00
[2,] 0.00 0.51 0.00 0.00 0.00 0.00
[3,] 0.00 0.00 0.51 0.00 0.00 0.00
[4,] 0.00 0.00 0.00 0.51 0.00 0.00
[5,] 0.00 0.00 0.00 0.00 0.51 0.00
[6,] 0.00 0.00 0.00 0.00 0.00 0.51

TY: Measurement Intercept of Indicator.Y 
[1] 0 0 0 0 0 0

PS: Covariance of Regression.Residual.PSI 
     [,1]
[1,]    1

AL: Regression Intercept of Factor.ETA 
[1] 0
------------------------------------------------- 
> mis <- getPopulation(Data, misspec=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("SimEqualCon-class")
> ### * SimEqualCon-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimEqualCon-class
> ### Title: Class '"SimEqualCon"'
> ### Aliases: SimEqualCon-class summary,SimEqualCon-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimEqualCon")
Class "SimEqualCon" [package "simsemClassic"]

Slots:
                                                
Name:            con     modelType conBeforeFill
Class:          list     character       logical

Known Subclasses: "NullSimEqualCon"
> constraint1 <- matrix(1, 3, 2)
> constraint1[,1] <- 1:3
> rownames(constraint1) <- rep("LY", 3)
> constraint2 <- matrix(2, 3, 2)
> constraint2[,1] <- 4:6
> rownames(constraint2) <- rep("LY", 3)
> constraint3 <- matrix(3, 2, 2)
> constraint3[,1] <- 7:8
> rownames(constraint3) <- rep("LY", 2)
> equal.loading <- simEqualCon(constraint1, constraint2, constraint3, modelType="SEM")
> summary(equal.loading)
CONSTRAINT OBJECT
Model Type
[1] "SEM"
-------------Constraint----------------
1.
   Group Row Column
LY    NA   1      1
LY    NA   2      1
LY    NA   3      1
---------------------------------------
2.
   Group Row Column
LY    NA   4      2
LY    NA   5      2
LY    NA   6      2
---------------------------------------
3.
   Group Row Column
LY    NA   7      3
LY    NA   8      3
---------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("SimFunction-class")
> ### * SimFunction-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimFunction-class
> ### Title: Class '"SimFunction"'
> ### Aliases: SimFunction-class summary,SimFunction-method
> ###   run,SimFunction-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimFunction")
Class "SimFunction" [package "simsemClassic"]

Slots:
                                    
Name:        fun attribute   callfun
Class:  function      list      call

Known Subclasses: "NullSimFunction"
> 
> n65 <- simNorm(0.6, 0.05)
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> 
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading.start <- matrix("", 9, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:9, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(9))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> datGen <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> 
> error.cor.trivial <- matrix(NA, 9, 9)
> diag(error.cor.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.trivial, "n1")
> 
> misGen <- simMisspecSEM(LY = LY.trivial, RTE = RTE.trivial)
> 
> Data.Mis <- simData(datGen, 300, misspec=misGen)
> 
> loading <- matrix(0, 12, 4)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 4] <- NA
> loading[10:12, 3] <- NA
> 
> path <- matrix(0, 4, 4)
> path[4, 1:3] <- NA
> 
> analysis <- simParamSEM(BE=path, LY=loading)
> 
> Model <- simModel(analysis)
> 
> # Find the products of indicators
> newFUN <- function(data, var1, var2, namesProd) {
+ 	prod <- data[,var1] * data[,var2]
+ 	colnames(prod) <- namesProd
+ 	return(data.frame(data, prod))
+ }
> 
> fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> Output <- simResult(10, Data.Mis, Model, objFunction=fun)
Error in solve.default(E) : 
  system is computationally singular: reciprocal condition number = 3.45248e-23
Warning in estimateVCOV(lavaanModel, samplestats = lavaanSampleStats, options = lavaanOptions,  :
  lavaan WARNING: could not compute standard errors!

> summary(Output)
RESULT OBJECT
Model Type
[1] "SEM"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.62e+02 1.80e+02 1.95e+02 1.98e+02 1.32e+02
      AIC   9.27e+03 9.32e+03 9.35e+03 9.36e+03 9.03e+03
      BIC   9.43e+03 9.47e+03 9.51e+03 9.52e+03 9.18e+03
      RMSEA 8.86e-02 9.54e-02 1.01e-01 1.02e-01 7.55e-02
      CFI   9.03e-01 8.89e-01 8.77e-01 8.75e-01 9.38e-01
      TLI   8.67e-01 8.47e-01 8.31e-01 8.28e-01 9.14e-01
      SRMR  5.69e-02 5.81e-02 5.91e-02 5.94e-02 4.66e-02
========= Parameter Estimates and Standard Errors ============
        Estimate Average Estimate SD Average SE Power (Not equal 0) Std Est
LY1_1              0.713       0.101      0.054               1.000   0.710
LY2_1              0.734       0.198      0.054               1.000   0.727
LY3_1              0.709       0.217      0.052               1.000   0.726
LY4_2              0.680       0.109      0.055               1.000   0.682
LY5_2              0.720       0.156      0.055               1.000   0.717
LY6_2              0.728       0.129      0.055               1.000   0.733
LY10_3             0.660       0.198      0.131               1.000   0.640
LY11_3             0.590       0.271      0.087               0.889   0.545
LY12_3             0.550       0.275      0.084               0.889   0.528
LY7_4              0.317       0.103      0.049               1.000   0.758
LY8_4              0.316       0.092      0.049               1.000   0.761
LY9_4              0.319       0.120      0.049               1.000   0.760
BE4_1              1.405       0.804      0.389               0.889   0.505
BE4_2              1.294       0.705      0.351               0.889   0.482
BE4_3             -0.023       0.177      0.148               0.000   0.000
PS2_1              0.601       0.109      0.052               1.000   0.601
PS3_1             -0.006       0.157      0.076               0.333  -0.006
PS3_2             -0.035       0.148      0.081               0.333  -0.035
TE1_1              0.488       0.116      0.050               1.000   0.489
TE2_2              0.435       0.219      0.052               0.889   0.445
TE3_3              0.408       0.290      0.049               1.000   0.431
TE4_4              0.522       0.148      0.053               1.000   0.524
TE5_5              0.466       0.216      0.053               1.000   0.466
TE6_6              0.441       0.207      0.053               0.889   0.448
TE7_7              0.424       0.186      0.044               1.000   0.414
TE8_8              0.422       0.131      0.043               1.000   0.413
TE9_9              0.405       0.151      0.043               1.000   0.411
TE10_10            0.596       0.254      0.207               0.778   0.565
TE11_11            0.706       0.205      0.103               1.000   0.661
TE12_12            0.668       0.156      0.095               1.000   0.677
TY1                0.014       0.056      0.058               0.000   0.013
TY2                0.019       0.037      0.058               0.000   0.019
TY3                0.005       0.060      0.056               0.111   0.005
TY4               -0.018       0.072      0.058               0.111  -0.018
TY5                0.008       0.080      0.058               0.111   0.008
TY6                0.032       0.084      0.057               0.222   0.032
TY7                0.039       0.062      0.059               0.111   0.039
TY8                0.030       0.053      0.059               0.000   0.030
TY9                0.033       0.057      0.058               0.111   0.033
TY10               0.266       0.106      0.059               0.889   0.262
TY11               0.330       0.188      0.061               0.889   0.305
TY12               0.255       0.154      0.058               0.889   0.244
        Std Est SD
LY1_1        0.086
LY2_1        0.174
LY3_1        0.220
LY4_2        0.109
LY5_2        0.147
LY6_2        0.128
LY10_3       0.169
LY11_3       0.217
LY12_3       0.222
LY7_4        0.116
LY8_4        0.093
LY9_4        0.113
BE4_1        0.213
BE4_2        0.209
BE4_3        0.060
PS2_1        0.109
PS3_1        0.157
PS3_2        0.148
TE1_1        0.123
TE2_2        0.244
TE3_3        0.328
TE4_4        0.145
TE5_5        0.213
TE6_6        0.211
TE7_7        0.182
TE8_8        0.138
TE9_9        0.169
TE10_10      0.215
TE11_11      0.229
TE12_12      0.217
TY1          0.058
TY2          0.037
TY3          0.063
TY4          0.074
TY5          0.082
TY6          0.085
TY7          0.062
TY8          0.052
TY9          0.056
TY10         0.112
TY11         0.163
TY12         0.129
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.012 -0.012  0.995 -0.945 -0.945  0.793
AIC   -0.012  1.000  1.000 -0.078 -0.168 -0.168  0.291
BIC   -0.012  1.000  1.000 -0.078 -0.168 -0.168  0.291
RMSEA  0.995 -0.078 -0.078  1.000 -0.920 -0.920  0.768
CFI   -0.945 -0.168 -0.168 -0.920  1.000  1.000 -0.886
TLI   -0.945 -0.168 -0.168 -0.920  1.000  1.000 -0.886
SRMR   0.793  0.291  0.291  0.768 -0.886 -0.886  1.000
================== Replications =====================
Number of Replications
[1] 10
Number of Converged Replications
[1] 9
NOTE: The data generation model is not the same as the analysis model. See the summary of the population underlying data generation by the summaryPopulation function.
> 
> # Example of using the simfunction
> mc <- simFunction(newFUN, var1=1:3, var2=4:6, namesProd=paste("y", 10:12, sep=""))
> run(mc, attitude[,-1])
   complaints privileges learning raises critical advance  y10  y11  y12
1          51         30       39     61       92      45 3111 2760 1755
2          64         51       54     63       73      47 4032 3723 2538
3          70         68       69     76       86      48 5320 5848 3312
4          63         45       47     54       84      35 3402 3780 1645
5          78         56       66     71       83      47 5538 4648 3102
6          55         49       44     54       49      34 2970 2401 1496
7          67         42       56     66       68      35 4422 2856 1960
8          75         50       55     70       66      41 5250 3300 2255
9          82         72       67     71       83      31 5822 5976 2077
10         61         45       47     62       80      41 3782 3600 1927
11         53         53       58     58       67      34 3074 3551 1972
12         60         47       39     59       74      41 3540 3478 1599
13         62         57       42     55       63      25 3410 3591 1050
14         83         83       45     59       77      35 4897 6391 1575
15         77         54       72     79       77      46 6083 4158 3312
16         90         50       72     60       54      36 5400 2700 2592
17         85         64       69     79       79      63 6715 5056 4347
18         60         65       75     55       80      60 3300 5200 4500
19         70         46       57     75       85      46 5250 3910 2622
20         58         68       54     64       78      52 3712 5304 2808
21         40         33       34     43       64      33 1720 2112 1122
22         61         52       62     66       80      41 4026 4160 2542
23         66         52       50     63       80      37 4158 4160 1850
24         37         42       58     50       57      49 1850 2394 2842
25         54         42       48     66       75      33 3564 3150 1584
26         77         66       63     88       76      72 6776 5016 4536
27         75         58       74     80       78      49 6000 4524 3626
28         57         44       45     51       83      38 2907 3652 1710
29         85         71       71     77       74      55 6545 5254 3905
30         82         39       59     64       78      39 5248 3042 2301
> summary(mc)
FUNCTION OBJECT
Function Name =  newFUN 
Addition attributes =  var1, var2, namesProd 
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimGenLabels-class")
> ### * SimGenLabels-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimGenLabels-class
> ### Title: Class '"SimGenLabels"'
> ### Aliases: SimGenLabels-class run,SimGenLabels-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimMatrix-class")
> ### * SimMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMatrix-class
> ### Title: Matrix object: Random parameters matrix
> ### Aliases: SimMatrix-class run,SimMatrix-method
> ###   summaryShort,SimMatrix-method summary,SimMatrix-method
> ###   extract,SimMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMatrix")
Class "SimMatrix" [package "simsemClassic"]

Slots:
                    
Name:    free  value
Class: matrix matrix

Known Subclasses: 
Class "SymMatrix", directly
Class "NullSimMatrix", directly
Class "NullSymMatrix", by class "SymMatrix", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> n65 <- simNorm(0.6, 0.05)
> LY <- simMatrix(loading, "n65")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.5686773 0.0000000
[2,] 0.6091822 0.0000000
[3,] 0.5582186 0.0000000
[4,] 0.0000000 0.6797640
[5,] 0.0000000 0.6164754
[6,] 0.0000000 0.5589766
> 
> u34 <- simUnif(0.3, 0.4)
> LY <- adjust(LY, "u34", c(2, 1))
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "runif(1, 0.3, 0.4)"  ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.6243715 0.0000000
[2,] 0.3769841 0.0000000
[3,] 0.5997116 0.0000000
[4,] 0.0000000 0.7202327
[5,] 0.0000000 0.6381797
[6,] 0.0000000 0.5600495
> summaryShort(LY)
     [,1]                     [,2]                    
[1,] "NA:rnorm(1, 0.6, 0.05)" "0"                     
[2,] "NA:runif(1, 0.3, 0.4)"  "0"                     
[3,] "NA:rnorm(1, 0.6, 0.05)" "0"                     
[4,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
[5,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
[6,] "0"                      "NA:rnorm(1, 0.6, 0.05)"
> 
> LY <- extract(LY, 1:3, 1)
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1]
[1,]   NA
[2,]   NA
[3,]   NA
[1] "Parameter/Starting Values:"
     [,1]                 
[1,] "rnorm(1, 0.6, 0.05)"
[2,] "runif(1, 0.3, 0.4)" 
[3,] "rnorm(1, 0.6, 0.05)"
> 
> 
> 
> cleanEx()
> nameEx("SimMissing-class")
> ### * SimMissing-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMissing-class
> ### Title: Class '"SimMissing"'
> ### Aliases: SimMissing-class summary,SimMissing-method
> ###   run,SimMissing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("SimMisspec-class")
> ### * SimMisspec-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimMisspec-class
> ### Title: Class '"SimMisspec"'
> ### Aliases: SimMisspec-class run,SimMisspec-method
> ###   summary,SimMisspec-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimMisspec")
Class "SimMisspec" [package "simsemClassic"]

Slots:
                                                                              
Name:       conBeforeMis     misBeforeFill        misfitType       misfitBound
Class:           logical           logical         character            vector
                                                                              
Name:  averageNumMisspec         optMisfit           numIter         modelType
Class:           logical         character           numeric         character
                                                                              
Name:                 LY                TE               RTE               VTE
Class:         SimMatrix         SymMatrix         SymMatrix         SimVector
                                                                              
Name:                 PS               RPS               VPS                BE
Class:         SymMatrix         SymMatrix         SimVector         SimMatrix
                                                                              
Name:                 TY                AL                ME                MY
Class:         SimVector         SimVector         SimVector         SimVector
                                                                              
Name:                 VE                VY                LX                TD
Class:         SimVector         SimVector         SimMatrix         SymMatrix
                                                                              
Name:                RTD               VTD                PH               RPH
Class:         SymMatrix         SimVector         SymMatrix         SymMatrix
                                                                              
Name:                VPH                GA                TX                KA
Class:         SimVector         SimMatrix         SimVector         SimVector
                                                                              
Name:                 MX                VX                TH               RTH
Class:         SimVector         SimVector         SimMatrix         SimMatrix

Extends: "SimSet"

Known Subclasses: "NullSimMisspec"
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> 
> 
> 
> cleanEx()
> nameEx("SimModel-class")
> ### * SimModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModel-class
> ### Title: Class '"SimModel"'
> ### Aliases: SimModel-class run,SimModel-method summary,SimModel-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModel")
Class "SimModel" [package "simsemClassic"]

Slots:
                                                                              
Name:    modelType       param       start    equalCon     package   estimator
Class:   character    SimParam     SimRSet SimEqualCon   character   character
                                          
Name:    auxiliary      indLab   factorLab
Class:      vector      vector      vector
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> SimModel <- simModel(CFA.Model)
> summary(SimModel)
MODEL OBJECT
Model Type
[1] "CFA"
========= Parameters Set ============
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]   NA    0    0    0    0    0
[2,]    0   NA    0    0    0    0
[3,]    0    0   NA    0    0    0
[4,]    0    0    0   NA    0    0
[5,]    0    0    0    0   NA    0
[6,]    0    0    0    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 0 0
------------------------------------------------- 
Number of free parameters =  19 
=====================================
Adding Constraint?
[1] "No"
Analysis Package
[1] "lavaan"
> 
> 
> 
> cleanEx()
> nameEx("SimModelMIOut-class")
> ### * SimModelMIOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModelMIOut-class
> ### Title: Class '"SimModelMIOut"'
> ### Aliases: SimModelMIOut-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModelMIOut")
Class "SimModelMIOut" [package "simsemClassic"]

Slots:
                                                                              
Name:         FMI1        FMI2       param       start    equalCon     package
Class:     SimRSet     SimRSet    SimParam     SimRSet SimEqualCon   character
                                                                              
Name:         coef         fit          se   converged  paramValue           n
Class:     SimRSet      vector     SimRSet     logical     SimRSet     numeric
                                          
Name:        pMiss      indLab   factorLab
Class:      vector      vector      vector

Extends: "SimModelOut"
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> SimMissing <- simMissing(pmMCAR=0.05, numImps=5)
> Data <- run(SimData)
> Data <- run(SimMissing, Data)
> Result <- run(SimModel, Data, SimMissing)
Loading required package: Amelia
Loading required package: foreign
## 
## Amelia II: Multiple Imputation
## (Version 1.6.3, built: 2012-06-21)
## Copyright (C) 2005-2012 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
-- Imputation 1 --

 1  2  3  4 

-- Imputation 2 --

 1  2  3  4  5 

-- Imputation 3 --

 1  2  3  4  5 

-- Imputation 4 --

 1  2  3  4 

-- Imputation 5 --

 1  2  3  4 

> summary(Result)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          9.967           9.000           0.359         974.033          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           0.999           0.998        7635.702        7711.565 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR               F 
          0.015           0.000           0.054           0.015           1.107 
            df1             df2             p.F      baseline.F    baseline.df1 
          9.000         204.759           0.359          64.936          15.000 
   baseline.df2    baseline.p.F 
       1026.745           0.000 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p Std Est  FMI1        FMI2
LY1_1    0.723 0.046 15.692 0.000   0.696 0.094 0.097856458
LY2_1    0.723 0.043 16.739 0.000   0.705 0.006 0.006293212
LY3_1    0.664 0.045 14.618 0.000   0.677 0.157 0.167521907
LY4_1    0.715 0.045 15.712 0.000   0.683 0.048 0.048971529
LY5_1    0.706 0.046 15.431 0.000   0.691 0.110 0.115221616
LY6_1    0.646 0.043 14.887 0.000   0.668 0.095 0.098728792
TE1_1    0.559 0.045 12.545 0.000   0.516 0.069 0.071461019
TE2_2    0.528 0.042 12.588 0.000   0.503 0.039 0.040074402
TE3_3    0.520 0.040 13.164 0.000   0.541 0.017 0.016643046
TE4_4    0.584 0.046 12.596 0.000   0.533 0.088 0.091749859
TE5_5    0.544 0.043 12.623 0.000   0.522 0.067 0.068867124
TE6_6    0.518 0.042 12.472 0.000   0.554 0.133 0.141025730
TY1     -0.042 0.047 -0.891 0.373  -0.040 0.012 0.012078777
TY2     -0.005 0.046 -0.101 0.920  -0.005 0.025 0.025678631
TY3     -0.009 0.046 -0.192 0.847  -0.009 0.076 0.078951748
TY4      0.006 0.048  0.121 0.904   0.006 0.046 0.047477581
TY5     -0.032 0.048 -0.665 0.506  -0.031 0.082 0.084667008
TY6     -0.013 0.044 -0.302 0.763  -0.014 0.021 0.021271359
Converged
[1] TRUE
> 
> 
> 
> cleanEx()

detaching 'package:Amelia', 'package:foreign'

> nameEx("SimModelOut-class")
> ### * SimModelOut-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimModelOut-class
> ### Title: Class '"SimModelOut"'
> ### Aliases: SimModelOut-class summary,SimModelOut-method
> ###   createImpliedMACS,SimModelOut-method
> ###   summaryPopulation,SimModelOut-method getPopulation,SimModelOut-method
> ###   setPopulation,SimModelOut,SimRSet-method
> ###   setPopulation,SimModelOut,SimSet-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimModelOut")
Class "SimModelOut" [package "simsemClassic"]

Slots:
                                                                              
Name:        param       start    equalCon     package        coef         fit
Class:    SimParam     SimRSet SimEqualCon   character     SimRSet      vector
                                                                              
Name:           se   converged  paramValue           n       pMiss      indLab
Class:     SimRSet     logical     SimRSet     numeric      vector      vector
                  
Name:    factorLab
Class:      vector

Known Subclasses: "SimModelMIOut"
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> Data <- run(SimData)
> Result <- run(SimModel, Data)
> summary(Result)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          8.664           9.000           0.469        1008.650          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           1.000           1.001        7682.016        7757.879 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.000           0.000           0.049           0.013 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p      Std Est
LY1_1    0.730 0.044 16.458 0.000  0.694088736
LY2_1    0.737 0.043 17.039 0.000  0.712616531
LY3_1    0.697 0.043 16.399 0.000  0.692190733
LY4_1    0.715 0.044 16.145 0.000  0.683965037
LY5_1    0.706 0.044 16.198 0.000  0.685664623
LY6_1    0.641 0.041 15.471 0.000  0.661723627
TE1_1    0.573 0.044 13.054 0.000  0.518240826
TE2_2    0.526 0.041 12.747 0.000  0.492177680
TE3_3    0.528 0.040 13.084 0.000  0.520871990
TE4_4    0.582 0.044 13.206 0.000  0.532191828
TE5_5    0.561 0.043 13.181 0.000  0.529864024
TE6_6    0.528 0.039 13.507 0.000  0.562121841
TY1     -0.047 0.047 -1.002 0.316 -0.044819460
TY2     -0.003 0.046 -0.059 0.953 -0.002647364
TY3     -0.017 0.045 -0.370 0.712 -0.016535704
TY4      0.008 0.047  0.175 0.861  0.007826785
TY5     -0.021 0.046 -0.463 0.643 -0.020698424
TY6     -0.023 0.043 -0.540 0.589 -0.024137764
Converged
[1] TRUE
> summaryParam(Result)
          Estimate         SE           z         p      Std Est
LY1_1  0.729718569 0.04433834 16.45795906 0.0000000  0.694088736
LY2_1  0.736616081 0.04323040 17.03930559 0.0000000  0.712616531
LY3_1  0.697134306 0.04251056 16.39908590 0.0000000  0.692190733
LY4_1  0.715139953 0.04429375 16.14539152 0.0000000  0.683965037
LY5_1  0.705618858 0.04356313 16.19761636 0.0000000  0.685664623
LY6_1  0.641405244 0.04145814 15.47115173 0.0000000  0.661723627
TE1_1  0.572812418 0.04387941 13.05424014 0.0000000  0.518240826
TE2_2  0.525887104 0.04125514 12.74718968 0.0000000  0.492177680
TE3_3  0.528338614 0.04038193 13.08353943 0.0000000  0.520871990
TE4_4  0.581811742 0.04405572 13.20627159 0.0000000  0.532191828
TE5_5  0.561153023 0.04257137 13.18146435 0.0000000  0.529864024
TE6_6  0.528131644 0.03910148 13.50669233 0.0000000  0.562121841
TY1   -0.047120189 0.04701705 -1.00219360 0.3162501 -0.044819460
TY2   -0.002736522 0.04622749 -0.05919685 0.9527953 -0.002647364
TY3   -0.016653800 0.04504076 -0.36974958 0.7115691 -0.016535704
TY4    0.008183528 0.04675975  0.17501224 0.8610700  0.007826785
TY5   -0.021300790 0.04602284 -0.46283084 0.6434856 -0.020698424
TY6   -0.023396609 0.04334818 -0.53973682 0.5893785 -0.024137764
> summaryPopulation(Result)
[1] "There is no parameter value underlying the data."
[1] "There is no parameter value underlying the data."
> param <- getPopulation(Result)
> Result2 <- setPopulation(Result, param)
> Result3 <- setPopulation(Result, CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("SimParam-class")
> ### * SimParam-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimParam-class
> ### Title: Class '"SimParam"'
> ### Aliases: SimParam-class summary,SimParam-method
> 
> ### ** Examples
> 
> showClass("SimParam")
Class "SimParam" [package "simsemClassic"]

Slots:
                                                                            
Name:  modelType        LY        TE        PS        BE        TY        AL
Class: character    matrix    matrix    matrix    matrix    vector    vector
                                                                            
Name:         LX        TD        PH        GA        TX        KA        TH
Class:    matrix    matrix    matrix    matrix    vector    vector    matrix

Extends: "VirtualRSet"
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> HS.Model <- simParamCFA(LX = loading)
> summary(HS.Model)
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
      [,1] [,2] [,3]
 [1,]   NA    0    0
 [2,]   NA    0    0
 [3,]   NA    0    0
 [4,]    0   NA    0
 [5,]    0   NA    0
 [6,]    0   NA    0
 [7,]    0    0   NA
 [8,]    0    0   NA
 [9,]    0    0   NA

TE: Covariance of Measurement.Error.EPSILON 
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]   NA    0    0    0    0    0    0    0    0
 [2,]    0   NA    0    0    0    0    0    0    0
 [3,]    0    0   NA    0    0    0    0    0    0
 [4,]    0    0    0   NA    0    0    0    0    0
 [5,]    0    0    0    0   NA    0    0    0    0
 [6,]    0    0    0    0    0   NA    0    0    0
 [7,]    0    0    0    0    0    0   NA    0    0
 [8,]    0    0    0    0    0    0    0   NA    0
 [9,]    0    0    0    0    0    0    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA NA NA NA NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 1 1 1
------------------------------------------------- 
> SimModel <- simModel(HS.Model, indLab=paste("x", 1:9, sep=""))
> out <- run(SimModel, HolzingerSwineford1939)
> summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
         85.306          24.000           0.000         918.852          36.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           0.931           0.896        7535.490        7646.703 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.092           0.071           0.114           0.060 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z p   Std Est
LY1_1    0.900 0.081 11.127 0 0.7718808
LY2_1    0.498 0.077  6.429 0 0.4235991
LY3_1    0.656 0.074  8.817 0 0.5811320
LY4_2    0.990 0.057 17.474 0 0.8515822
LY5_2    1.102 0.063 17.576 0 0.8550653
LY6_2    0.917 0.054 17.082 0 0.8380100
LY7_3    0.619 0.070  8.903 0 0.5695144
LY8_3    0.731 0.066 11.090 0 0.7230441
LY9_3    0.670 0.065 10.305 0 0.6650091
PS2_1    0.459 0.064  7.189 0 0.4585082
PS3_1    0.471 0.073  6.461 0 0.4705332
PS3_2    0.283 0.069  4.117 0 0.2829833
TE1_1    0.549 0.114  4.833 0 0.4042000
TE2_2    1.134 0.102 11.146 0 0.8205638
TE3_3    0.844 0.091  9.317 0 0.6622856
TE4_4    0.371 0.048  7.778 0 0.2748077
TE5_5    0.446 0.058  7.642 0 0.2688633
TE6_6    0.356 0.043  8.277 0 0.2977393
TE7_7    0.799 0.081  9.823 0 0.6756533
TE8_8    0.488 0.074  6.573 0 0.4772072
TE9_9    0.566 0.071  8.003 0 0.5577629
TY1      4.036 0.105 38.398 0 3.4630482
TY2      5.590 0.103 54.322 0 4.7555391
TY3      1.594 0.099 16.126 0 1.4119762
TY4      2.071 0.088 23.611 0 1.7821807
TY5      3.239 0.097 33.332 0 2.5140601
TY6      1.269 0.083 15.328 0 1.1601697
TY7      3.566 0.094 38.078 0 3.2788058
TY8      4.796 0.088 54.518 0 4.7442674
TY9      4.704 0.087 53.963 0 4.6692496
Converged
[1] TRUE
> 
> HS.Model2 <- extract(HS.Model, y=1:3)
> summary(HS.Model2)
SET OF ESTIMATED PARAMETERS
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1] [,2] [,3]
[1,]   NA    0    0
[2,]   NA    0    0
[3,]   NA    0    0

TE: Covariance of Measurement.Error.EPSILON 
     [,1] [,2] [,3]
[1,]   NA    0    0
[2,]    0   NA    0
[3,]    0    0   NA

TY: Measurement Intercept of Indicator.Y 
[1] NA NA NA

PS: Covariance of Regression.Residual.PSI 
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1

AL: Regression Intercept of Factor.ETA 
[1] 1 1 1
------------------------------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("SimREqualCon-class")
> ### * SimREqualCon-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimREqualCon-class
> ### Title: Class '"SimREqualCon"'
> ### Aliases: SimREqualCon-class summary,SimREqualCon-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("SimResult-class")
> ### * SimResult-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResult-class
> ### Title: Class '"SimResult"'
> ### Aliases: SimResult-class summary,SimResult-method
> ###   summaryPopulation,SimResult-method getPopulation,SimResult-method
> ###   setPopulation,SimResult,data.frame-method
> ###   setPopulation,SimResult,SimSet-method
> ###   setPopulation,SimResult,VirtualRSet-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsemClassic"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                            
Name:      pmMCAR      pmMAR
Class:     vector     vector
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summary(Output)
RESULT OBJECT
Model Type
[1] "CFA"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.71e+01 1.73e+01 1.75e+01 1.75e+01 1.16e+01
      AIC   7.51e+03 7.51e+03 7.51e+03 7.51e+03 7.45e+03
      BIC   7.58e+03 7.59e+03 7.59e+03 7.59e+03 7.52e+03
      RMSEA 4.25e-02 4.30e-02 4.34e-02 4.35e-02 2.23e-02
      CFI   9.92e-01 9.92e-01 9.91e-01 9.91e-01 9.96e-01
      TLI   9.87e-01 9.86e-01 9.85e-01 9.85e-01 9.96e-01
      SRMR  1.87e-02 1.89e-02 1.90e-02 1.90e-02 1.47e-02
========= Parameter Estimates and Standard Errors ============
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0. Std.Est
LY1_1            0.691       0.028      0.041                   1   0.697
LY2_1            0.685       0.023      0.042                   1   0.685
LY3_1            0.696       0.016      0.041                   1   0.703
LY4_1            0.666       0.056      0.041                   1   0.681
LY5_1            0.695       0.031      0.042                   1   0.699
LY6_1            0.727       0.050      0.042                   1   0.721
TE1_1            0.504       0.014      0.038                   1   0.514
TE2_2            0.531       0.034      0.040                   1   0.531
TE3_3            0.496       0.044      0.038                   1   0.505
TE4_4            0.509       0.038      0.038                   1   0.535
TE5_5            0.506       0.056      0.039                   1   0.510
TE6_6            0.485       0.021      0.038                   1   0.479
TY1              0.018       0.029      0.044                   0   0.018
TY2              0.005       0.043      0.045                   0   0.005
TY3              0.021       0.019      0.044                   0   0.021
TY4              0.014       0.039      0.044                   0   0.015
TY5              0.007       0.033      0.044                   0   0.007
TY6              0.013       0.021      0.045                   0   0.013
      Std.Est.SD Average.Param Average.Bias Coverage
LY1_1      0.014          0.70       -0.009      1.0
LY2_1      0.016          0.70       -0.015      1.0
LY3_1      0.018          0.70       -0.004      1.0
LY4_1      0.039          0.70       -0.034      0.8
LY5_1      0.022          0.70       -0.005      1.0
LY6_1      0.028          0.70        0.027      0.8
TE1_1      0.020          0.51       -0.006      1.0
TE2_2      0.022          0.51        0.021      1.0
TE3_3      0.025          0.51       -0.014      1.0
TE4_4      0.051          0.51       -0.001      1.0
TE5_5      0.031          0.51       -0.004      1.0
TE6_6      0.040          0.51       -0.025      1.0
TY1        0.029          0.00        0.018      1.0
TY2        0.042          0.00        0.005      1.0
TY3        0.020          0.00        0.021      1.0
TY4        0.041          0.00        0.014      1.0
TY5        0.033          0.00        0.007      1.0
TY6        0.021          0.00        0.013      1.0
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.669 -0.669  0.996 -0.977 -0.998  1.000
AIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
BIC   -0.669  1.000  1.000 -0.616  0.791  0.710 -0.667
RMSEA  0.996 -0.616 -0.616  1.000 -0.966 -0.990  0.997
CFI   -0.977  0.791  0.791 -0.966  1.000  0.985 -0.978
TLI   -0.998  0.710  0.710 -0.990  0.985  1.000 -0.997
SRMR   1.000 -0.667 -0.667  0.997 -0.978 -0.997  1.000
================== Replications =====================
Number of Replications
[1] 5
Number of Converged Replications
[1] 5
> getCutoff(Output, 0.05)
         Chi      AIC      BIC     RMSEA       CFI      TLI       SRMR
95% 17.31436 7510.452 7586.315 0.0429723 0.9915622 0.985937 0.01886138
> summaryParam(Output)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.     Std.Est
LY1_1      0.690756163  0.02810832 0.04149426                   1 0.697070143
LY2_1      0.684804704  0.02263611 0.04211500                   1 0.684851049
LY3_1      0.696133056  0.01555979 0.04135122                   1 0.703397090
LY4_1      0.665635686  0.05563836 0.04117407                   1 0.680861422
LY5_1      0.695344619  0.03075857 0.04160583                   1 0.699459966
LY6_1      0.726805518  0.04988726 0.04168946                   1 0.721071711
TE1_1      0.504025134  0.01390450 0.03830915                   1 0.513931403
TE2_2      0.530959147  0.03432316 0.03978899                   1 0.530765856
TE3_3      0.495700428  0.04352867 0.03793285                   1 0.504972176
TE4_4      0.509197735  0.03774777 0.03808873                   1 0.535233452
TE5_5      0.505610323  0.05558941 0.03852026                   1 0.510356863
TE6_6      0.484795772  0.02083424 0.03801104                   1 0.479444161
TY1        0.018166032  0.02869038 0.04430370                   0 0.018417690
TY2        0.004590901  0.04278074 0.04471879                   0 0.004545716
TY3        0.020747719  0.01949684 0.04427270                   0 0.021140080
TY4        0.013662145  0.03941881 0.04367343                   0 0.014854827
TY5        0.006917364  0.03267555 0.04446808                   0 0.007233836
TY6        0.013019025  0.02085171 0.04503689                   0 0.013257578
      Std.Est.SD Average.Param  Average.Bias Coverage
LY1_1 0.01422200          0.70 -0.0092438371      1.0
LY2_1 0.01632422          0.70 -0.0151952957      1.0
LY3_1 0.01804012          0.70 -0.0038669437      1.0
LY4_1 0.03863729          0.70 -0.0343643142      0.8
LY5_1 0.02232973          0.70 -0.0046553813      1.0
LY6_1 0.02764566          0.70  0.0268055178      0.8
TE1_1 0.01991785          0.51 -0.0059748662      1.0
TE2_2 0.02240767          0.51  0.0209591474      1.0
TE3_3 0.02529073          0.51 -0.0142995716      1.0
TE4_4 0.05128525          0.51 -0.0008022647      1.0
TE5_5 0.03111061          0.51 -0.0043896774      1.0
TE6_6 0.03996516          0.51 -0.0252042276      1.0
TY1   0.02909934          0.00  0.0181660316      1.0
TY2   0.04208763          0.00  0.0045909006      1.0
TY3   0.02002118          0.00  0.0207477190      1.0
TY4   0.04097595          0.00  0.0136621452      1.0
TY5   0.03314308          0.00  0.0069173639      1.0
TY6   0.02080364          0.00  0.0130190253      1.0
> summaryPopulation(Output)
                 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
Population Value 0.7  0.7  0.7  0.7  0.7  0.7  0.51 0.51 0.51 0.51  0.51  0.51 
                 [,13] [,14] [,15] [,16] [,17] [,18]
Population Value 0     0     0     0     0     0    
> param <- getPopulation(Output)
> Output <- setPopulation(Output, param)
> Output2 <- setPopulation(Output, CFA.Model)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("SimResultParam-class")
> ### * SimResultParam-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimResultParam-class
> ### Title: Class '"SimResultParam"'
> ### Aliases: SimResultParam-class summary,SimResultParam-method
> ###   summaryParam,SimResultParam-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimResultParam")
Class "SimResultParam" [package "simsemClassic"]

Slots:
                                                                        
Name:   modelType       nRep      param    misspec        fit       seed
Class:  character    numeric data.frame data.frame data.frame    numeric
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> summary(ParamObject)
PARAMETER RESULT OBJECT
Model Type
[1] "Path"
========= Parameter Values ============
       mean    sd
BE3_1 0.391 0.056
BE3_2 0.410 0.059
BE4_3 0.593 0.052
PS1_1 1.000 0.000
PS2_1 0.266 0.146
PS2_2 1.000 0.000
PS3_3 0.588 0.114
PS4_4 0.646 0.061
AL1   0.000 0.000
AL2   0.000 0.000
AL3   0.000 0.000
AL4   0.000 0.000
========= Misspecification Values ============
       mean    sd
BE4_1 0.023 0.023
BE4_2 0.043 0.079
========= Fit Indices Distributions ============
              f0 rmsea  srmr
5%         0.005 0.044 0.016
10%        0.007 0.055 0.020
25%        0.015 0.086 0.029
50%        0.019 0.097 0.036
75%        0.025 0.111 0.038
90%        0.031 0.124 0.041
95%        0.033 0.128 0.042
fitAverage 0.019 0.092 0.032
fitSE      0.012 0.037 0.012
========= Correlation between Fit Indices and Parameter Misspecification ============
       BE4_1  BE4_2     f0  rmsea   srmr
BE4_1  1.000 -0.838 -0.229 -0.135 -0.100
BE4_2 -0.838  1.000  0.510  0.423  0.464
f0    -0.229  0.510  1.000  0.981  0.942
rmsea -0.135  0.423  0.981  1.000  0.976
srmr  -0.100  0.464  0.942  0.976  1.000
> 
> 
> 
> cleanEx()
> nameEx("SimSet-class")
> ### * SimSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimSet-class
> ### Title: Class '"SimSet"'
> ### Aliases: SimSet-class run,SimSet-method summary,SimSet-method
> ###   extract,SimSet-method
> 
> ### ** Examples
> 
> showClass("SimSet")
Class "SimSet" [package "simsemClassic"]

Slots:
                                                                            
Name:  modelType        LY        TE       RTE       VTE        PS       RPS
Class: character SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPS        BE        TY        AL        ME        MY        VE
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimVector
                                                                            
Name:         VY        LX        TD       RTD       VTD        PH       RPH
Class: SimVector SimMatrix SymMatrix SymMatrix SimVector SymMatrix SymMatrix
                                                                            
Name:        VPH        GA        TX        KA        MX        VX        TH
Class: SimVector SimMatrix SimVector SimVector SimVector SimVector SimMatrix
                
Name:        RTH
Class: SimMatrix

Known Subclasses: 
Class "NullSimSet", directly
Class "SimMisspec", directly
Class "NullSimMisspec", by class "SimMisspec", distance 2
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> # Error Correlation Object
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> 
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> summary(CFA.Model)
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
> #run(CFA.Model)
> 
> CFA.Model2 <- extract(CFA.Model, y=1:3, e=1)
> summary(CFA.Model2)
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]    
[1,] "NA:0.7"
[2,] "NA:0.7"
[3,] "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3]
[1,] "1"  "0"  "0" 
[2,] "0"  "1"  "0" 
[3,] "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]
[1,] "1" 

VE: Variance of Factor.ETA 
[1] "1"

AL: Regression Intercept of Factor.ETA 
[1] "0"

ME: mean of Factor.ETA 
[1] "0"
-------------------------- 
> 
> 
> 
> cleanEx()
> nameEx("SimVector-class")
> ### * SimVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimVector-class
> ### Title: Vector object: Random parameters vector
> ### Aliases: SimVector-class run,SimVector-method
> ###   summaryShort,SimVector-method summary,SimVector-method
> ###   extract,SimVector-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SimVector")
Class "SimVector" [package "simsemClassic"]

Slots:
                    
Name:    free  value
Class: vector vector

Known Subclasses: "NullSimVector"
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- simVector(factor.mean, factor.mean.starting)
> run(AL)
[1] 5 2
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5" "2"
> summaryShort(AL)
[1] "NA:5" "NA:2"
> 
> n01 <- simNorm(0, 1)
> AL <- adjust(AL, "n01", 2)
> run(AL)
[1]  5.0000000 -0.6264538
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5"              "rnorm(1, 0, 1)"
> 
> AL <- extract(AL, 1)
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA
[1] "Parameter/Starting Values:"
[1] "5"
> 
> 
> 
> cleanEx()
> nameEx("SymMatrix-class")
> ### * SymMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SymMatrix-class
> ### Title: Symmetric matrix object: Random parameters symmetric matrix
> ### Aliases: SymMatrix-class run,SymMatrix-method summary,SymMatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("SymMatrix")
Class "SymMatrix" [package "simsemClassic"]

Slots:
                    
Name:    free  value
Class: matrix matrix

Extends: "SimMatrix"

Known Subclasses: "NullSymMatrix"
> 
> latent.cor <- matrix(NA, 3, 3)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> u46 <- simUnif(0.4, 0.6)
> RPH <- adjust(RPH, "u46", c(3,2))
> summary(RPH)
[1] "Random Symmetric Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2] [,3]
[1,]    1   NA   NA
[2,]   NA    1   NA
[3,]   NA   NA    1
[1] "Parameter/Starting Values:"
     [,1]  [,2]                 [,3]                
[1,] ""    "0.5"                "0.5"               
[2,] "0.5" ""                   "runif(1, 0.4, 0.6)"
[3,] "0.5" "runif(1, 0.4, 0.6)" ""                  
> summaryShort(RPH)
     [,1]     [,2]                    [,3]                   
[1,] "1"      "NA:0.5"                "NA:0.5"               
[2,] "NA:0.5" "1"                     "NA:runif(1, 0.4, 0.6)"
[3,] "NA:0.5" "NA:runif(1, 0.4, 0.6)" "1"                    
> run(RPH)
     [,1]      [,2]      [,3]
[1,]  1.0 0.5000000 0.5000000
[2,]  0.5 1.0000000 0.4531017
[3,]  0.5 0.4531017 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("VirtualDist-class")
> ### * VirtualDist-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VirtualDist-class
> ### Title: Distribution Objects
> ### Aliases: VirtualDist-class SimBeta-class SimBinom-class SimCauchy-class
> ###   SimChisq-class SimExp-class SimF-class SimGamma-class SimGeom-class
> ###   SimHyper-class SimLnorm-class SimLogis-class SimNbinom-class
> ###   SimNorm-class SimPois-class SimT-class SimUnif-class SimWeibull-class
> ###   run,SimBeta-method run,SimBinom-method run,SimCauchy-method
> ###   run,SimChisq-method run,SimExp-method run,SimF-method
> ###   run,SimGamma-method run,SimGeom-method run,SimHyper-method
> ###   run,SimLnorm-method run,SimLogis-method run,SimNbinom-method
> ###   run,SimNorm-method run,SimPois-method run,SimT-method
> ###   run,SimUnif-method run,SimWeibull-method summary,SimBeta-method
> ###   summary,SimBinom-method summary,SimCauchy-method
> ###   summary,SimChisq-method summary,SimExp-method summary,SimF-method
> ###   summary,SimGamma-method summary,SimGeom-method
> ###   summary,SimHyper-method summary,SimLnorm-method
> ###   summary,SimLogis-method summary,SimNbinom-method
> ###   summary,SimNorm-method summary,SimPois-method summary,SimT-method
> ###   summary,SimUnif-method summary,SimWeibull-method
> ###   summaryShort,SimBeta-method summaryShort,SimBinom-method
> ###   summaryShort,SimCauchy-method summaryShort,SimChisq-method
> ###   summaryShort,SimExp-method summaryShort,SimF-method
> ###   summaryShort,SimGamma-method summaryShort,SimGeom-method
> ###   summaryShort,SimHyper-method summaryShort,SimLnorm-method
> ###   summaryShort,SimLogis-method summaryShort,SimNbinom-method
> ###   summaryShort,SimNorm-method summaryShort,SimPois-method
> ###   summaryShort,SimT-method summaryShort,SimUnif-method
> ###   summaryShort,SimWeibull-method toFunction,SimBeta-method
> ###   toFunction,SimBinom-method toFunction,SimCauchy-method
> ###   toFunction,SimChisq-method toFunction,SimExp-method
> ###   toFunction,SimF-method toFunction,SimGamma-method
> ###   toFunction,SimGeom-method toFunction,SimHyper-method
> ###   toFunction,SimLnorm-method toFunction,SimLogis-method
> ###   toFunction,SimNbinom-method toFunction,SimNorm-method
> ###   toFunction,SimPois-method toFunction,SimT-method
> ###   toFunction,SimUnif-method toFunction,SimWeibull-method
> ###   plotDist,VirtualDist-method skew,VirtualDist-method
> ###   kurtosis,VirtualDist-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("VirtualDist")
Virtual Class "VirtualDist" [package "simsemClassic"]

No Slots, prototype of class "SimUnif"

Known Subclasses: "SimUnif", "SimNorm", "SimBeta", "SimBinom", "SimCauchy", "SimChisq", "SimExp", 
"SimF", "SimGamma", "SimGeom", "SimHyper", "SimLnorm", "SimLogis", "SimNbinom", 
"SimPois", "SimT", "SimWeibull"
> u1 <- simUnif(0, 1)
> chi3 <- simChisq(3)
> summary(chi3)
[1] "Random Chi-squared Distribution Object."
[1] "Degree of freedom is 3."
[1] "Non-centrality parameter is 0."
> skew(chi3)
[1] 1.631577
> kurtosis(chi3)
[1] 3.97977
> plotDist(chi3)
> plotDist(chi3, reverse=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("VirtualRSet-class")
> ### * VirtualRSet-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ParameterSet
> ### Title: Class '"VirtualRSet"', '"SimLabels"' and '"SimRSet"'
> ### Aliases: VirtualRSet-class SimRSet-class SimLabels-class
> ###   summary,VirtualRSet-method summary,SimRSet-method
> ###   summary,SimLabels-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("adjust")
> ### * adjust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adjust
> ### Title: Change an element in 'SimMatrix', 'SymMatrix', or 'SimVector'.
> ### Aliases: adjust adjust-methods adjust,ANY-method
> ###   adjust,SimMatrix-method adjust,SymMatrix-method
> ###   adjust,SimVector-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> LX <- simMatrix(loading, 0.7)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> u34 <- simUnif(0.3, 0.4)
> LX <- adjust(LX, "u34", c(2, 1))
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                 [,2] 
[1,] "0.7"                ""   
[2,] "runif(1, 0.3, 0.4)" ""   
[3,] "0.7"                ""   
[4,] ""                   "0.7"
[5,] ""                   "0.7"
[6,] ""                   "0.7"
> run(LX)
          [,1] [,2]
[1,] 0.7000000  0.0
[2,] 0.3265509  0.0
[3,] 0.7000000  0.0
[4,] 0.0000000  0.7
[5,] 0.0000000  0.7
[6,] 0.0000000  0.7
> 
> LX <- adjust(LX, 0, c(2,1))
> LX <- adjust(LX, 0.5, c(2,2), FALSE)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]    0   NA
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] ""    "0.5"
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.0  0.5
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> factor.mean <- rep(NA, 2)
> factor.mean.starting <- c(5, 2)
> AL <- simVector(factor.mean, factor.mean.starting)
> run(AL)
[1] 5 2
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5" "2"
> 
> n01 <- simNorm(0, 1)
> AL <- adjust(AL, "n01", 2)
> run(AL)
[1]  5.0000000 -0.3262334
> summary(AL)
[1] "Random Vector Object."
[1] "Free/Fixed Parameters:"
[1] NA NA
[1] "Parameter/Starting Values:"
[1] "5"              "rnorm(1, 0, 1)"
> 
> 
> 
> cleanEx()
> nameEx("anova")
> ### * anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova
> ### Title: Provide a comparison of nested models and nonnested models
> ###   across replications
> ### Aliases: anova,SimResult-method anova,SimModelOut-method
> ###   anova,SimModelMIOut-method
> 
> ### ** Examples
> 
> loading1 <- matrix(0, 6, 1)
> loading1[1:6, 1] <- NA
> loading2 <- loading1
> loading2[6,1] <- 0
> LX1 <- simMatrix(loading1, 0.7)
> LX2 <- simMatrix(loading2, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model1 <- simSetCFA(LY = LX1, RPS = RPH, RTE = RTD)
> CFA.Model2 <- simSetCFA(LY = LX2, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model1, 500)
> SimModel1 <- simModel(CFA.Model1)
> SimModel2 <- simModel(CFA.Model2)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> # Need to make sure that both simResult calls have the same seed!
> Output1 <- simResult(5, SimData, SimModel1, seed=123567)
> Output2 <- simResult(5, SimData, SimModel2, seed=123567)
> anova(Output1, Output2)
$summary
  df      chisq       CFI       TLI       RMSEA      AIC      BIC
1  9   6.845657 0.9996655 1.0036849 0.004462633 7430.953 7506.816
2 10 270.509542 0.7583201 0.6374801 0.227991831 7692.617 7764.265

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
263.6638858   1.0000000   1.0000000  -0.2413454  -0.3662047   0.2235292 
   AIC diff    BIC diff 
261.6638858 257.4492777 

$varyParam
NULL

> 
> Output1b <- simResult(NULL, SimData, SimModel1, seed=123567, n=seq(50, 500, 50))
> Output2b <- simResult(NULL, SimData, SimModel2, seed=123567, n=seq(50, 500, 50))
> anova(Output1b, Output2b)
$summary
  df      chisq       CFI       TLI      RMSEA      AIC      BIC
1  9   9.161416 0.9894247 0.9867162 0.02533748 4151.350 4212.954
2 10 146.767548 0.7738087 0.6607130 0.22183507 4286.956 4345.138

$diff
 Chisq diff     Df diff       Power    CFI diff    TLI diff  RMSEA diff 
137.6061325   1.0000000   1.0000000  -0.2156160  -0.3260032   0.1964976 
   AIC diff    BIC diff 
135.6061325 132.1836683 

$varyParam
     N power.1
1   50       1
2   74       1
3   97       1
4  121       1
5  145       1
6  168       1
7  192       1
8  216       1
9  239       1
10 263       1
11 287       1
12 311       1
13 334       1
14 358       1
15 382       1
16 405       1
17 429       1
18 453       1
19 476       1
20 500       1

> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("blankParameters")
> ### * blankParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blankParameters
> ### Title: Change all elements in the non-null objects to be all NAs.
> ### Aliases: blankParameters
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("centralMoment")
> ### * centralMoment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centralMoment
> ### Title: Calculate central moments of a variable
> ### Aliases: centralMoment
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # centralMoment(1:5, 2)
> 
> 
> 
> cleanEx()
> nameEx("checkInputValue")
> ### * checkInputValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkInputValue
> ### Title: Check the value argument in the matrix, symmetric matrix, or
> ###   vector objects
> ### Aliases: checkInputValue checkInputValueVector
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Extract only converged replications in the result objects
> ### Aliases: clean
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("cleanSimResult")
> ### * cleanSimResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cleanSimResult
> ### Title: Extract only converged replications in the result object
> ### Aliases: cleanSimResult
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("collapseExo")
> ### * collapseExo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapseExo
> ### Title: Collapse all exogenous variables and put all in endogenous side
> ###   only.
> ### Aliases: collapseExo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineLatentCorExoEndo")
> ### * combineLatentCorExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineLatentCorExoEndo
> ### Title: Combine exogenous factor correlation and endogenous factor
> ###   correlation into a single matrix
> ### Aliases: combineLatentCorExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineLoadingExoEndo")
> ### * combineLoadingExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineLoadingExoEndo
> ### Title: Combine factor loading from the exogenous and endogenous sides
> ###   into a single matrix
> ### Aliases: combineLoadingExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineMeasurementErrorExoEndo")
> ### * combineMeasurementErrorExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineMeasurementErrorExoEndo
> ### Title: Combine measurement error correlation from the exogenous and
> ###   endogenous sides into a single matrix
> ### Aliases: combineMeasurementErrorExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combineObject")
> ### * combineObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combineObject
> ### Title: Combine by summing or binding two objects together.
> ### Aliases: combineObject combineObject-methods
> ###   combineObject,ANY,ANY-method combineObject,SimMatrix,SimMatrix-method
> ###   combineObject,SimVector,SimVector-method
> ###   combineObject,vector,vector-method combineObject,matrix,matrix-method
> ###   combineObject,MatrixSet,MatrixSet-method
> ###   combineObject,SimParam,list-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("combinePathExoEndo")
> ### * combinePathExoEndo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combinePathExoEndo
> ### Title: Combine the regression coefficient matrices
> ### Aliases: combinePathExoEndo
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("constantVector")
> ### * constantVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constantVector
> ### Title: Create a constant vector object
> ### Aliases: constantVector
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # constantVector(0, 5)
> 
> 
> 
> cleanEx()
> nameEx("constrainMatrices")
> ### * constrainMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constrainMatrices
> ### Title: Impose an equality constraint in an object
> ### Aliases: constrainMatrices constrainMatrices-methods
> ###   constrainMatrices,ANY,ANY-method
> ###   constrainMatrices,MatrixSet,SimEqualCon-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("continuousPower")
> ### * continuousPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: continuousPower
> ### Title: Find power of model parameters when simulations have randomly
> ###   varying parameters
> ### Aliases: continuousPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D Cpow <- continuousPower(Output, contN = TRUE, contMCAR = TRUE)
> ##D Cpow
> ##D 
> ##D Cpow2 <- continuousPower(Output, contN = TRUE, contMCAR = TRUE, pred=list(N = 200, pmMCAR = 0.3))
> ##D Cpow2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("countFreeParameters")
> ### * countFreeParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countFreeParameters
> ### Title: Count how many free parameters in the target object
> ### Aliases: countFreeParameters countFreeParameters-methods
> ###   countFreeParameters,ANY-method countFreeParameters,SimMatrix-method
> ###   countFreeParameters,SymMatrix-method
> ###   countFreeParameters,SimVector-method
> ###   countFreeParameters,SimSet-method countFreeParameters,matrix-method
> ###   countFreeParameters,vector-method
> ###   countFreeParameters,VirtualRSet-method
> ###   countFreeParameters,SimEqualCon-method
> ###   countFreeParameters,SimREqualCon-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("countMACS")
> ### * countMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countMACS
> ### Title: Count the number of elements in the sufficient statistics
> ### Aliases: countMACS
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("cov2corMod")
> ### * cov2corMod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cov2corMod
> ### Title: Convert a covariance matrix to a correlation matrix
> ### Aliases: cov2corMod
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("createData")
> ### * createData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createData
> ### Title: Create data from model parameters
> ### Aliases: createData
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("createFreeParameters")
> ### * createFreeParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createFreeParameters
> ### Title: Create a free parameters object from a model specification
> ### Aliases: createFreeParameters
> 
> ### ** Examples
> 
> # No comment out because this function is not public
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # RPH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # RTD <- symMatrix(error.cor)
> # indicator.mean <- rep(NA, 6)
> # MX <- simVector(indicator.mean, 0)
> # CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD, MX = MX)
> # free <- createFreeParameters(CFA.Model)
> 
> 
> 
> cleanEx()
> nameEx("createImpliedMACS")
> ### * createImpliedMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createImpliedMACS
> ### Title: Create model implied mean vector and covariance matrix
> ### Aliases: createImpliedMACS createImpliedMACS-methods
> ###   createImpliedMACS,MatrixSet-method createImpliedMACS,SimRSet-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> param <- run(CFA.Model)
> createImpliedMACS(param)
$M
[1] 0 0 0 0 0 0

$CM
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]
[1,] 1.000 0.490 0.490 0.245 0.245 0.245
[2,] 0.490 1.000 0.490 0.245 0.245 0.245
[3,] 0.490 0.490 1.000 0.245 0.245 0.245
[4,] 0.245 0.245 0.245 1.000 0.490 0.490
[5,] 0.245 0.245 0.245 0.490 1.000 0.490
[6,] 0.245 0.245 0.245 0.490 0.490 1.000

> 
> 
> 
> cleanEx()
> nameEx("defaultStartingValues")
> ### * defaultStartingValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defaultStartingValues
> ### Title: Make ad hoc starting values
> ### Aliases: defaultStartingValues
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("divideObject")
> ### * divideObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: divideObject
> ### Title: Make a division on each element of the object
> ### Aliases: divideObject divideObject-methods divideObject,ANY-method
> ###   divideObject,vector,numeric-method divideObject,matrix,numeric-method
> ###   divideObject,MatrixSet,numeric-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("drawParameters")
> ### * drawParameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drawParameters
> ### Title: Create parameter sets (with or without model misspecification)
> ###   from the data object
> ### Aliases: drawParameters
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("drawParametersMisspec")
> ### * drawParametersMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drawParametersMisspec
> ### Title: Create parameter sets (with or without model misspecification)
> ###   from the parameter with or without misspecification set
> ### Aliases: drawParametersMisspec
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("expandMatrices")
> ### * expandMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expandMatrices
> ### Title: Expand the set of intercept and covariance matrices into the set
> ###   of intercept/mean and covariance/correlation/variance objects
> ### Aliases: expandMatrices
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extract")
> ### * extract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract
> ### Title: Extract a part of an object
> ### Aliases: extract extract-methods extract,vector-method
> ###   extract,matrix-method extract,VirtualRSet-method
> ###   extract,data.frame-method
> 
> ### ** Examples
> 
> extract(1:10, c(4, 5))
[1] 4 5
> extract(diag(3), 1, 2:3)
     [,1] [,2]
[1,]    0    0
> 
> 
> 
> cleanEx()
> nameEx("extractLavaanFit")
> ### * extractLavaanFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractLavaanFit
> ### Title: Extract fit indices from the lavaan object
> ### Aliases: extractLavaanFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extractMatrixNames")
> ### * extractMatrixNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractMatrixNames
> ### Title: Extract a vector of parameter names based on specified rows and
> ###   columns
> ### Aliases: extractMatrixNames
> 
> ### ** Examples
> 
> # The function is not public
> 
> # vec <- c("LY1_1", "LY2_1", "LY3_1", "LY4_2", "LY5_2", "LY6_2", "LY7_3")
> # extractMatrixNames(vec, 5:6, 2)
> 
> 
> 
> cleanEx()
> nameEx("extractOpenMxFit")
> ### * extractOpenMxFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractOpenMxFit
> ### Title: Extract the fit indices reported by the 'OpenMx' result
> ### Aliases: extractOpenMxFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("extractVectorNames")
> ### * extractVectorNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractVectorNames
> ### Title: Extract a vector of parameter names based on specified elements
> ### Aliases: extractVectorNames
> 
> ### ** Examples
> 
> # The function is not public
> 
> #vec <- c("TY1", "TY2", "TY3", "TY4", "TY5", "TY6", "TY7")
> #extractVectorNames(vec, 5:6)
> 
> 
> 
> cleanEx()
> nameEx("fillParam")
> ### * fillParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fillParam
> ### Title: Fill in other objects based on the parameter values of current
> ###   objects
> ### Aliases: fillParam
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("find2Dhist")
> ### * find2Dhist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find2Dhist
> ### Title: Fit the 2D Kernel Density Estimate
> ### Aliases: find2Dhist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findFactorIntercept")
> ### * findFactorIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorIntercept
> ### Title: Find factor intercept from regression coefficient matrix and
> ###   factor total means
> ### Aliases: findFactorIntercept
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> factorMean <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorIntercept(path, factorMean)
[1]  5.0  2.0  3.0 -3.0 -3.2 -2.6  0.0  0.0  0.0
> 
> 
> 
> cleanEx()
> nameEx("findFactorMean")
> ### * findFactorMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorMean
> ### Title: Find factor total means from regression coefficient matrix and
> ###   factor intercept
> ### Aliases: findFactorMean
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> intcept <- c(5, 2, 3, 0, 0, 0, 0, 0, 0)
> findFactorMean(path, intcept)
[1] 5.00 2.00 3.00 3.00 3.20 2.60 1.80 3.12 2.84
> 
> 
> 
> cleanEx()
> nameEx("findFactorResidualVar")
> ### * findFactorResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorResidualVar
> ### Title: Find factor residual variances from regression coefficient
> ###   matrix, factor (residual) correlations, and total factor variances
> ### Aliases: findFactorResidualVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> totalVar <- rep(1, 9)
> findFactorResidualVar(path, facCor, totalVar)
[1] 1.00000 1.00000 1.00000 0.64000 0.28800 0.28800 0.64000 0.29568 0.21888
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalCov")
> ### * findFactorTotalCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalCov
> ### Title: Find factor total covariance from regression coefficient matrix,
> ###   factor residual covariance
> ### Aliases: findFactorTotalCov
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalCov(path, corPsi=facCor, errorVarPsi=residualVar)
       [,1]  [,2]  [,3]   [,4]   [,5]   [,6]    [,7]    [,8]    [,9]
 [1,] 1.000 0.400 0.400 0.6000 0.6400 0.4000 0.36000 0.62400 0.49600
 [2,] 0.400 1.000 0.400 0.2400 0.7600 0.6400 0.14400 0.55200 0.68800
 [3,] 0.400 0.400 1.000 0.2400 0.4000 0.7600 0.14400 0.33600 0.61600
 [4,] 0.600 0.240 0.240 1.0000 0.3840 0.2400 0.60000 0.63040 0.29760
 [5,] 0.640 0.760 0.400 0.3840 1.0000 0.5440 0.23040 0.75360 0.72640
 [6,] 0.400 0.640 0.760 0.2400 0.5440 1.0000 0.14400 0.42240 0.81760
 [7,] 0.360 0.144 0.144 0.6000 0.2304 0.1440 1.00000 0.37824 0.17856
 [8,] 0.624 0.552 0.336 0.6304 0.7536 0.4224 0.37824 1.00000 0.55488
 [9,] 0.496 0.688 0.616 0.2976 0.7264 0.8176 0.17856 0.55488 1.00000
> 
> 
> 
> cleanEx()
> nameEx("findFactorTotalVar")
> ### * findFactorTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findFactorTotalVar
> ### Title: Find factor total variances from regression coefficient matrix,
> ###   factor (residual) correlations, and factor residual variances
> ### Aliases: findFactorTotalVar
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- 0.6
> path[5, 2] <- path[8, 5] <- 0.6
> path[6, 3] <- path[9, 6] <- 0.6
> path[5, 1] <- path[8, 4] <- 0.4
> path[6, 2] <- path[9, 5] <- 0.4
> facCor <- diag(9)
> facCor[1, 2] <- facCor[2, 1] <- 0.4
> facCor[1, 3] <- facCor[3, 1] <- 0.4
> facCor[2, 3] <- facCor[3, 2] <- 0.4
> residualVar <- c(1, 1, 1, 0.64, 0.288, 0.288, 0.64, 0.29568, 0.21888)
> findFactorTotalVar(path, facCor, residualVar)
[1] 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findIndIntercept")
> ### * findIndIntercept
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndIntercept
> ### Title: Find indicator intercepts from factor loading matrix, total
> ###   factor mean, and indicator mean.
> ### Aliases: findIndIntercept
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> indMean <- rep(1, 6)
> findIndIntercept(loading, facMean, indMean)
[1] 0.70 0.65 0.60 0.88 0.86 0.84
> 
> 
> 
> cleanEx()
> nameEx("findIndMean")
> ### * findIndMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndMean
> ### Title: Find indicator total means from factor loading matrix, total
> ###   factor mean, and indicator intercept.
> ### Aliases: findIndMean
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facMean <- c(0.5, 0.2)
> intcept <- rep(0, 6)
> findIndMean(loading, facMean, intcept)
[1] 0.30 0.35 0.40 0.12 0.14 0.16
> 
> 
> 
> cleanEx()
> nameEx("findIndResidualVar")
> ### * findIndResidualVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndResidualVar
> ### Title: Find indicator residual variances from factor loading matrix,
> ###   total factor covariance, and total indicator variances.
> ### Aliases: findIndResidualVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> totalVar <- rep(1, 6)
> findIndResidualVar(loading, facCov, totalVar)
[1] 0.64 0.51 0.36 0.64 0.51 0.36
> 
> 
> 
> cleanEx()
> nameEx("findIndTotalVar")
> ### * findIndTotalVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findIndTotalVar
> ### Title: Find indicator total variances from factor loading matrix, total
> ###   factor covariance, and indicator residual variances.
> ### Aliases: findIndTotalVar
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- c(0.6, 0.7, 0.8)
> loading[4:6, 2] <- c(0.6, 0.7, 0.8)
> facCov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
> resVar <- c(0.64, 0.51, 0.36, 0.64, 0.51, 0.36)
> findIndTotalVar(loading, facCov, resVar)
[1] 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("findPossibleFactorCor")
> ### * findPossibleFactorCor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPossibleFactorCor
> ### Title: Find the appropriate position for freely estimated correlation
> ###   (or covariance) given a regression coefficient matrix
> ### Aliases: findPossibleFactorCor
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findPossibleFactorCor(path)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    1   NA   NA    0    0    0    0    0    0
 [2,]   NA    1   NA    0    0    0    0    0    0
 [3,]   NA   NA    1    0    0    0    0    0    0
 [4,]    0    0    0    1   NA   NA    0    0    0
 [5,]    0    0    0   NA    1   NA    0    0    0
 [6,]    0    0    0   NA   NA    1    0    0    0
 [7,]    0    0    0    0    0    0    1   NA   NA
 [8,]    0    0    0    0    0    0   NA    1   NA
 [9,]    0    0    0    0    0    0   NA   NA    1
> 
> 
> 
> cleanEx()
> nameEx("findPower")
> ### * findPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPower
> ### Title: Find a value of independent variables that provides a given
> ###   value of power.
> ### Aliases: findPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.4)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D pow <- getPower(Output)
> ##D findPower(pow, "N", 0.80)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("findRecursiveSet")
> ### * findRecursiveSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRecursiveSet
> ### Title: Group variables regarding the position in mediation chain
> ### Aliases: findRecursiveSet
> 
> ### ** Examples
> 
> path <- matrix(0, 9, 9)
> path[4, 1] <- path[7, 4] <- NA
> path[5, 2] <- path[8, 5] <- NA
> path[6, 3] <- path[9, 6] <- NA
> path[5, 1] <- path[8, 4] <- NA
> path[6, 2] <- path[9, 5] <- NA
> findRecursiveSet(path)
[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

> 
> 
> 
> cleanEx()
> nameEx("findRowZero")
> ### * findRowZero
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRowZero
> ### Title: Find rows in a matrix that all elements are zero in non-fixed
> ###   subset rows and columns.
> ### Aliases: findRowZero
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findTargetPower")
> ### * findTargetPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findTargetPower
> ### Title: Find a value of varying parameters that provides a given value
> ###   of power.
> ### Aliases: findTargetPower
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("findphist")
> ### * findphist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findphist
> ### Title: Find the density (likelihood) of a pair value in 2D Kernel
> ###   Density Estimate
> ### Aliases: findphist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("fitMeasuresChi")
> ### * fitMeasuresChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitMeasuresChi
> ### Title: Find fit indices from the discrepancy values of the target model
> ###   and null models.
> ### Aliases: fitMeasuresChi
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("freeVector")
> ### * freeVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeVector
> ### Title: Create a free parameters vector with a starting values in a
> ###   vector object
> ### Aliases: freeVector
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # freeVector(0, 5)
> 
> 
> 
> cleanEx()
> nameEx("getCondQtile")
> ### * getCondQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCondQtile
> ### Title: Get a quantile of a variable given values of predictors
> ### Aliases: getCondQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("getCutoff")
> ### * getCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoff
> ### Title: Find fit indices cutoff given a priori alpha level
> ### Aliases: getCutoff getCutoff-methods getCutoff,data.frame-method
> ###   getCutoff,matrix-method getCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- simMatrix(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- symMatrix(error.cor)
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 200)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D getCutoff(Output, 0.05)
> ##D 
> ##D # Finding the cutoff when the sample size is varied.
> ##D Output2 <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10))
> ##D getCutoff(Output2, 0.05, nVal = 75)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNested")
> ### * getCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNested
> ### Title: Find fit indices cutoff for nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D 
> ##D getCutoffNested(Output.NULL.NULL, Output.NULL.ALT)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getCutoffNonNested")
> ### * getCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCutoffNonNested
> ### Title: Find fit indices cutoff for non-nested model comparison given a
> ###   priori alpha level
> ### Aliases: getCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D getCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D getCutoffNonNested(Output.A.A, Output.A.B)
> ##D getCutoffNonNested(Output.B.B, Output.B.A)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getKeywords")
> ### * getKeywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getKeywords
> ### Title: List of all keywords used in the 'simsem' package
> ### Aliases: getKeywords
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # getKeywords()
> 
> 
> 
> cleanEx()
> nameEx("getPopulation")
> ### * getPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPopulation
> ### Title: Extract the data generation population model underlying an
> ###   object
> ### Aliases: getPopulation getPopulation-methods getPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("getPower")
> ### * getPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPower
> ### Title: Find power of model parameters
> ### Aliases: getPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D getPower(Output)
> ##D 
> ##D getPower(Output, nVal=c(100, 200), pmMCARval=c(0, 0.1, 0.2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFit")
> ### * getPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFit
> ### Title: Find power in rejecting alternative models based on fit indices
> ###   criteria
> ### Aliases: getPowerFit getPowerFit-methods
> ###   getPowerFit,data.frame,vector-method getPowerFit,matrix,vector-method
> ###   getPowerFit,SimResult,vector-method
> ###   getPowerFit,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimModel <- simModel(CFA.Model.NULL)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- simResult(5, SimData.NULL, SimModel)
> ##D Cut.NULL <- getCutoff(Output.NULL, 0.95)
> ##D 
> ##D u79 <- simUnif(0.7, 0.9)
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D Output.ALT <- simResult(5, SimData.ALT, SimModel)
> ##D getPowerFit(Output.ALT, cutoff=Cut.NULL)
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D getPowerFit(Output.ALT, cutoff=Rule.of.thumb, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- simResult(NULL, SimData.NULL, SimModel, n=seq(50, 500, 50))
> ##D Output.ALT2 <- simResult(NULL, SimData.ALT, SimModel, n=seq(50, 500, 50))
> ##D getPowerFit(Output.ALT2, nullObject=Output.NULL2, nVal=250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNested")
> ### * getPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNested
> ### Title: Find power in rejecting nested models based on the differences
> ###   in fit indices
> ### Aliases: getPowerFitNested getPowerFitNested-methods
> ###   getPowerFitNested,SimResult,SimResult,vector-method
> ###   getPowerFitNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "rnorm(1,0,0.1)")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D # loading.alt.mis <- matrix(NA, 6, 2)
> ##D # loading.alt.mis[is.na(loading.alt)] <- 0
> ##D # LX.alt.mis <- simMatrix(loading.alt.mis, "runif(1,-.2,.2)")
> ##D # CFA.Model.alt.mis <- simMisspecCFA(LY = LX.alt.mis, RTE=RTD.Mis)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.ALT.NULL <- simResult(10, SimData.ALT, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D Output.ALT.ALT <- simResult(10, SimData.ALT, SimModel.ALT)
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10))
> ##D 
> ##D Output.NULL.NULL2 <- simResult(NULL, SimData.NULL, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.ALT.NULL2 <- simResult(NULL, SimData.ALT, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.NULL.ALT2 <- simResult(NULL, SimData.NULL, SimModel.ALT, n=seq(50, 500, 50))
> ##D Output.ALT.ALT2 <- simResult(NULL, SimData.ALT, SimModel.ALT, n=seq(50, 500, 50))
> ##D 
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, nVal = 250)
> ##D getPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, cutoff=c(Chi=3.84, CFI=-0.10), nVal = 250)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPowerFitNonNested")
> ### * getPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPowerFitNonNested
> ### Title: Find power in rejecting non-nested models based on the
> ###   differences in fit indices
> ### Aliases: getPowerFitNonNested getPowerFitNonNested-methods
> ###   getPowerFitNonNested,SimResult,SimResult,vector-method
> ###   getPowerFitNonNested,SimResult,SimResult,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D getPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("imposeMissing")
> ### * imposeMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imposeMissing
> ### Title: Impose MAR, MCAR, planned missingness, or attrition on a data
> ###   set
> ### Aliases: imposeMissing
> 
> ### ** Examples
> 
>   data <- matrix(rep(rnorm(10,1,1),19),ncol=19)
>   datac <- cbind(data,rnorm(10,0,1),rnorm(10,5,5))
>  
>   # Imposing Missing with the following arguments produces no missing values
>   imposeMissing(data)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,cov=c(1,2))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMCAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,pmMAR=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(data,nforms=0)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
> 
>   #Some more usage examples
>   imposeMissing(data,cov=c(1,2),pmMCAR=.1)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316        NA 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247        NA 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291        NA 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814        NA 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433        NA 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247        NA 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   
>  
>   imposeMissing(data,nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,]        NA        NA        NA        NA        NA
 [8,]        NA        NA        NA        NA        NA
 [9,]        NA        NA        NA        NA        NA
[10,]        NA        NA        NA        NA        NA
>   imposeMissing(data,nforms=3,itemGroups=list(c(1,2,3,4,5),c(6,7,8,9,10),c(11,12,13,14,15),c(16,17,18,19)))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078 1.3295078        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,]        NA 2.5952808 2.5952808 2.5952808 2.5952808
 [5,]        NA 1.3295078 1.3295078 1.3295078 1.3295078
 [6,]        NA 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291        NA        NA        NA        NA
 [8,] 1.7383247        NA        NA        NA        NA
 [9,] 1.5757814        NA        NA        NA        NA
[10,] 0.6946116        NA        NA        NA        NA
>   imposeMissing(datac,cov=c(20,21),nforms=3)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA        NA        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA        NA        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,]        NA        NA 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,]        NA        NA 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,]        NA        NA 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808        NA        NA        NA        NA        NA
 [5,] 1.3295078 1.3295078        NA        NA        NA        NA        NA
 [6,] 0.1795316 0.1795316        NA        NA        NA        NA        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462  1.51178117  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078  1.12493092  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,]        NA        NA        NA        NA        NA -0.01619026  4.221022
 [8,]        NA        NA        NA        NA        NA  0.94383621 -2.353762
 [9,]        NA        NA        NA        NA        NA  0.82122120  2.609250
[10,]        NA        NA        NA        NA        NA  0.59390132  7.089708
>   imposeMissing(data,twoMethod=c(19,.8))
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433        NA
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714        NA
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808        NA
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316        NA
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291        NA
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247        NA
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
>   imposeMissing(datac,cov=21,prAttr=.1,timePoints=5)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462 0.3735462
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3735462        NA        NA        NA        NA        NA        NA
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808
 [5,] 1.3295078 1.3295078 1.3295078 1.3295078 1.3295078        NA        NA
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116
          [,15]     [,16]     [,17]     [,18]     [,19]       [,20]     [,21]
 [1,]        NA        NA        NA        NA        NA          NA  9.594887
 [2,] 1.1836433 1.1836433 1.1836433 1.1836433 1.1836433  0.38984324  8.910682
 [3,] 0.1643714 0.1643714 0.1643714 0.1643714 0.1643714 -0.62124058  5.372825
 [4,] 2.5952808 2.5952808 2.5952808 2.5952808 2.5952808 -2.21469989 -4.946758
 [5,]        NA        NA        NA        NA        NA          NA  8.099129
 [6,] 0.1795316 0.1795316 0.1795316 0.1795316 0.1795316 -0.04493361  4.719356
 [7,] 1.4874291 1.4874291 1.4874291 1.4874291 1.4874291 -0.01619026  4.221022
 [8,] 1.7383247 1.7383247 1.7383247 1.7383247 1.7383247  0.94383621 -2.353762
 [9,] 1.5757814 1.5757814 1.5757814 1.5757814 1.5757814  0.82122120  2.609250
[10,] 0.6946116 0.6946116 0.6946116 0.6946116 0.6946116  0.59390132  7.089708
> 
> 
> 
> 
> cleanEx()
> nameEx("interpolate")
> ### * interpolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolate
> ### Title: Find the value of one vector relative to a value of another
> ###   vector by interpolation
> ### Aliases: interpolate
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("isCorMatrix")
> ### * isCorMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isCorMatrix
> ### Title: Check whether a 'matrix' is a possible correlation matrix
> ### Aliases: isCorMatrix
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # isCorMatrix(diag(5))
> 
> 
> 
> cleanEx()
> nameEx("isDefault")
> ### * isDefault
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isDefault
> ### Title: Check whether a vector object is default
> ### Aliases: isDefault
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isMeanConstraint")
> ### * isMeanConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isMeanConstraint
> ### Title: Check whether all rownames in a constraint matrix containing
> ###   symbols of means vectors
> ### Aliases: isMeanConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isNullObject")
> ### * isNullObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isNullObject
> ### Title: Check whether the object is the 'NULL' type of that class
> ### Aliases: isNullObject isNullObject-methods isNullObject,ANY,ANY-method
> ###   isNullObject,vector-method isNullObject,matrix-method
> ###   isNullObject,SimMatrix-method isNullObject,SymMatrix-method
> ###   isNullObject,SimVector-method isNullObject,SimSet-method
> ###   isNullObject,SimEqualCon-method isNullObject,SimREqualCon-method
> ###   isNullObject,SimMisspec-method isNullObject,VirtualRSet-method
> ###   isNullObject,data.frame-method isNullObject,SimMissing-method
> ###   isNullObject,SimDataDist-method isNullObject,SimFunction-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isRandom")
> ### * isRandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isRandom
> ### Title: Check whether the object contains any random parameters
> ### Aliases: isRandom isRandom-methods isRandom,ANY-method
> ###   isRandom,SimMatrix-method isRandom,SimVector-method
> ###   isRandom,SimSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("isVarianceConstraint")
> ### * isVarianceConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isVarianceConstraint
> ### Title: Check whether all rownames in a constraint matrix containing
> ###   symbols of variance vectors
> ### Aliases: isVarianceConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("kStat")
> ### * kStat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kStat
> ### Title: Calculate the _k_-statistic of a variable
> ### Aliases: kStat
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # kStat(1:5, 4)
> 
> 
> 
> cleanEx()
> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Finding excessive kurtosis
> ### Aliases: kurtosis kurtosis-methods kurtosis,vector-method
> 
> ### ** Examples
> 
> kurtosis(1:5)
Excess Kur (g2)              se               z               p 
     -1.2000000       2.1908902      -0.5477226       0.5838824 
> 
> 
> 
> cleanEx()
> nameEx("likRatioFit")
> ### * likRatioFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: likRatioFit
> ### Title: Find the likelihood ratio (or Bayes factor) based on the
> ###   bivariate distribution of fit indices
> ### Aliases: likRatioFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2:3, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D param.A <- simParamSEM(LY=loading, BE=path.A)
> ##D 
> ##D model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[1:2, 3] <- NA
> ##D path.B[1, 2] <- NA
> ##D param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.mis <- matrix(NA, 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D LY.mis <- simMatrix(loading.mis, "u2")
> ##D misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D likRatioFit(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadingFromAlpha")
> ### * loadingFromAlpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadingFromAlpha
> ### Title: Find standardized factor loading from coefficient alpha
> ### Aliases: loadingFromAlpha
> 
> ### ** Examples
> 
>     loadingFromAlpha(0.8, 4)
[1] 0.7071068
> 
> 
> 
> cleanEx()
> nameEx("makeLabels")
> ### * makeLabels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeLabels
> ### Title: Make parameter names for each element in matrices or vectors or
> ###   the name for the whole object
> ### Aliases: makeLabels makeLabels-methods makeLabels,ANY-method
> ###   makeLabels,vector-method makeLabels,matrix-method
> ###   makeLabels,SimParam-method makeLabels,VirtualDist-method
> ###   makeLabels,SimSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("matchKeywords")
> ### * matchKeywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchKeywords
> ### Title: Search for the keywords and check whether the specified text
> ###   match one in the name vector
> ### Aliases: matchKeywords
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # matchKeywords("ly", c("LY", "LX"))
> 
> 
> 
> cleanEx()
> nameEx("miPool")
> ### * miPool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPool
> ### Title: Function to pool imputed results
> ### Aliases: miPool
> 
> ### ** Examples
> 
> # No Example
> 
> 
> 
> cleanEx()
> nameEx("miPoolChi")
> ### * miPoolChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPoolChi
> ### Title: Function to pool chi-square statistics from the result from
> ###   multiple imputation
> ### Aliases: miPoolChi
> 
> ### ** Examples
> 
> miPoolChi(c(89.864, 81.116, 71.500, 49.022, 61.986, 64.422, 55.256, 57.890, 79.416, 63.944), 2)
           F          df1          df2          p.F 
1.981628e+01 2.000000e+00 4.616817e+01 6.122891e-07 
> 
> 
> 
> cleanEx()
> nameEx("miPoolVector")
> ### * miPoolVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPoolVector
> ### Title: Function to pool imputed results that saved in a matrix format
> ### Aliases: miPoolVector
> 
> ### ** Examples
> 
> param <- matrix(c(0.7, 0.1, 0.5,
+ 					0.75, 0.12, 0.54,
+ 					0.66, 0.11, 0.56,
+ 					0.74, 0.09, 0.55), nrow=4, byrow=TRUE)
> SE <- matrix(c(0.1, 0.01, 0.05,
+ 				0.11, 0.023, 0.055,
+ 				0.10, 0.005, 0.04,
+ 				0.14, 0.012, 0.039), nrow=4, byrow=TRUE)
> nimps <- 4
> miPoolVector(param, SE, nimps)
$coef
[1] 0.7125 0.1050 0.5375

$se
[1] 0.12263598 0.02019488 0.05500985

$FMI.1
[1] 0.1406012 0.5108296 0.2857104

$FMI.2
[1] 0.1517078 0.5783172 0.3216485

> 
> 
> 
> cleanEx()
> nameEx("multipleAllEqual")
> ### * multipleAllEqual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multipleAllEqual
> ### Title: Test whether all objects are equal
> ### Aliases: multipleAllEqual
> 
> ### ** Examples
> 
> multipleAllEqual(1:5, 1:5, seq(2, 10, 2)/2)
[1] TRUE
> multipleAllEqual(1:5, 1:6, seq(2, 10, 2)/2)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("overlapHist")
> ### * overlapHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlapHist
> ### Title: Plot overlapping histograms
> ### Aliases: overlapHist
> 
> ### ** Examples
> 
> # This function is not a public function.
> 
> # a <- rnorm(10000, 0, 1)
> # b <- rnorm(10000, 1, 1.5)
> # overlapHist(a, b, main="Example")
> 
> 
> 
> cleanEx()
> nameEx("pValue")
> ### * pValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValue
> ### Title: Find p-values (1 - percentile)
> ### Aliases: pValue pValue-methods pValue,ANY-method
> ###   pValue,numeric,vector-method pValue,numeric,data.frame-method
> ###   pValue,SimModelOut,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Compare number with a vector
> ##D pValue(0.5, rnorm(1000, 0, 1))
> ##D 
> ##D # Compare numbers with a data frame
> ##D pValue(c(0.5, 0.2), data.frame(rnorm(1000, 0, 1), runif(1000, 0, 1)))
> ##D 
> ##D # Compare an analysis result with a result of simulation study
> ##D library(lavaan)
> ##D loading <- matrix(0, 9, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D model <- simParamCFA(LY=loading)
> ##D SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.trivial <- matrix(NA, 9, 3)
> ##D loading.trivial[is.na(loading)] <- 0
> ##D LY.trivial <- simMatrix(loading.trivial, "u2")
> ##D mis <- simMisspecCFA(LY = LY.trivial)
> ##D out <- run(SimModel, HolzingerSwineford1939)
> ##D Output2 <- runFit(out, HolzingerSwineford1939, 20, mis)
> ##D pValue(out, Output2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueCondCutoff")
> ### * pValueCondCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueCondCutoff
> ### Title: Find a p value when the target is conditional (valid) on a
> ###   specific value of a predictor
> ### Aliases: pValueCondCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("pValueNested")
> ### * pValueNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNested
> ### Title: Find p-values (1 - percentile) for a nested model comparison
> ### Aliases: pValueNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D 
> ##D LY <- matrix(1, 4, 2)
> ##D LY[,2] <- 0:3
> ##D PS <- matrix(NA, 2, 2)
> ##D TY <- rep(0, 4)
> ##D AL <- rep(NA, 2)
> ##D TE <- diag(NA, 4)
> ##D linearModel <- simParamCFA(LY=LY, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D LY2 <- matrix(1, 4, 2)
> ##D LY2[,2] <- c(0, NA, NA, 3)
> ##D unconstrainModel <- simParamCFA(LY=LY2, PS=PS, TY=TY, AL=AL, TE=TE)
> ##D 
> ##D nested <- simModel(linearModel, indLab=paste("t", 1:4, sep=""))
> ##D parent <- simModel(unconstrainModel, indLab=paste("t", 1:4, sep=""))
> ##D 
> ##D outNested <- run(nested, Demo.growth)
> ##D outParent <- run(parent, Demo.growth)
> ##D 
> ##D loadingMis <- matrix(0, 4, 2)
> ##D loadingMis[2:3, 2] <- NA
> ##D LYmis <- simMatrix(loadingMis, "runif(1, -0.1, 0.1)")
> ##D linearMis <- simMisspecCFA(LY=LYmis)
> ##D 
> ##D simNestedNested <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis)
> ##D simNestedParent <- runFit(model=nested, data=Demo.growth, nRep=10, misspec=linearMis, analyzeModel=parent)
> ##D 
> ##D pValueNested(outNested, outParent, simNestedNested, simNestedParent)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueNonNested")
> ### * pValueNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueNonNested
> ### Title: Find p-values (1 - percentile) for a non-nested model comparison
> ### Aliases: pValueNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path.A <- matrix(0, 3, 3)
> ##D path.A[2:3, 1] <- NA
> ##D path.A[3, 2] <- NA
> ##D param.A <- simParamSEM(LY=loading, BE=path.A)
> ##D 
> ##D model.A <- simModel(param.A, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.A <- run(model.A, PoliticalDemocracy)
> ##D 
> ##D path.B <- matrix(0, 3, 3)
> ##D path.B[1:2, 3] <- NA
> ##D path.B[1, 2] <- NA
> ##D param.B <- simParamSEM(LY=loading, BE=path.B)
> ##D 
> ##D model.B <- simModel(param.B, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out.B <- run(model.B, PoliticalDemocracy)
> ##D 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.mis <- matrix(NA, 11, 3)
> ##D loading.mis[is.na(loading)] <- 0
> ##D LY.mis <- simMatrix(loading.mis, "u2")
> ##D misspec <- simMisspecSEM(LY=LY.mis)
> ##D 
> ##D output.A.A <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec)
> ##D output.A.B <- runFit(model.A, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.B)
> ##D output.B.A <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec, analyzeModel=model.A)
> ##D output.B.B <- runFit(model.B, PoliticalDemocracy, 5, misspec=misspec)
> ##D 
> ##D # The output may contain some warnings here. When the number of replications increases (e.g., 1000), the warnings should disappear.
> ##D pValueNonNested(out.A, out.B, output.A.A, output.A.B, output.B.A, output.B.B)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pValueVariedCutoff")
> ### * pValueVariedCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pValueVariedCutoff
> ### Title: Find a p value when the cutoff is specified as a vector given
> ###   the values of predictors
> ### Aliases: pValueVariedCutoff
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plot3DQtile")
> ### * plot3DQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot3DQtile
> ### Title: Build a persepctive plot or contour plot of a quantile of
> ###   predicted values
> ### Aliases: plot3DQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotCutoff")
> ### * plotCutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoff
> ### Title: Plot sampling distributions of fit indices with fit indices
> ###   cutoffs
> ### Aliases: plotCutoff plotCutoff-methods plotCutoff,data.frame-method
> ###   plotCutoff,SimResult-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 2)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loadingValues <- matrix(0, 6, 2)
> ##D loadingValues[1:3, 1] <- 0.7
> ##D loadingValues[4:6, 2] <- 0.7
> ##D LX <- simMatrix(loading, loadingValues)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, 0.5)
> ##D error.cor <- matrix(0, 6, 6)
> ##D diag(error.cor) <- 1
> ##D RTD <- symMatrix(error.cor)
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 200)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D plotCutoff(Output, 0.05, usedFit=c("RMSEA", "SRMR", "CFI", "TLI"))
> ##D 
> ##D # Varying N
> ##D Output2 <- simResult(NULL, SimData, SimModel, n=seq(450, 500, 10))
> ##D plotCutoff(Output2, 0.05)
> ##D 
> ##D # Varying N and pmMCAR
> ##D Output3 <- simResult(NULL, SimData, SimModel, n=seq(450, 500, 10), pmMCAR=c(0, 0.05, 0.1, 0.15))
> ##D plotCutoff(Output3, 0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNested")
> ### * plotCutoffNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between nested models with fit indices cutoffs
> ### Aliases: plotCutoffNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, "u79")
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D 
> ##D plotCutoffNested(Output.NULL.NULL, Output.NULL.ALT, alpha=0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCutoffNonNested")
> ### * plotCutoffNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCutoffNonNested
> ### Title: Plot sampling distributions of the differences in fit indices
> ###   between non-nested models with fit indices cutoffs
> ### Aliases: plotCutoffNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, Output.B.A, Output.B.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B)
> ##D plotCutoffNonNested(Output.A.A, Output.A.B, onetailed=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotDist")
> ### * plotDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotDist
> ### Title: Plot a distribution of a distribution object or data
> ###   distribution object
> ### Aliases: plotDist plotDist-methods
> 
> ### ** Examples
> 
> gamma11 <- simGamma(1, 1)
> plotDist(gamma11)
> 
> chi <- simChisq(5)
> dataDist <- simDataDist(chi, chi)
> plotDist(dataDist)
> 
> 
> 
> cleanEx()

detaching 'package:copula'

> nameEx("plotIndividualScatter")
> ### * plotIndividualScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotIndividualScatter
> ### Title: Plot an overlaying scatter plot visualizing the power of
> ###   rejecting misspecified models
> ### Aliases: plotIndividualScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotLogisticFit")
> ### * plotLogisticFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotLogisticFit
> ### Title: Plot multiple logistic curves for predicting whether rejecting a
> ###   misspecified model
> ### Aliases: plotLogisticFit
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotMisfit")
> ### * plotMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMisfit
> ### Title: Plot the population misfit in parameter result object
> ### Aliases: plotMisfit
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(20, Path.Model, Path.Mis.Model)
> plotMisfit(ParamObject)
> 
> plotMisfit(ParamObject, misParam=1:2)
> 
> 
> 
> cleanEx()
> nameEx("plotOverHist")
> ### * plotOverHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotOverHist
> ### Title: Plot multiple overlapping histograms
> ### Aliases: plotOverHist
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPower")
> ### * plotPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPower
> ### Title: Make a power plot of a parameter given varying parameters
> ### Aliases: plotPower
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.4)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We will use only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(100, 200, 20), pmMCAR=c(0, 0.1, 0.2))
> ##D plotPower(Output, "LY1_1", contMCAR=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFit")
> ### * plotPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFit
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimModel <- simModel(CFA.Model.NULL)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output.NULL <- simResult(5, SimData.NULL, SimModel)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.5)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D Output.ALT <- simResult(5, SimData.ALT, SimModel)
> ##D plotPowerFit(Output.ALT, nullObject=Output.NULL, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D Rule.of.thumb <- c(RMSEA=0.05, CFI=0.95, TLI=0.95, SRMR=0.06)
> ##D plotPowerFit(Output.ALT, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D 
> ##D Output.NULL2 <- simResult(NULL, SimData.NULL, SimModel, n=seq(50, 250, 25))
> ##D Output.ALT2 <- simResult(NULL, SimData.ALT, SimModel, n=seq(50, 250, 25))
> ##D 
> ##D plotPowerFit(Output.ALT2, nullObject=Output.NULL2, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ##D plotPowerFit(Output.ALT2, cutoff=Rule.of.thumb, alpha=0.05, usedFit=c("RMSEA", "CFI", "TLI", "SRMR"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitDf")
> ### * plotPowerFitDf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitDf
> ### Title: Plot sampling distributions of fit indices that visualize power
> ###   of rejecting datasets underlying misspecified models
> ### Aliases: plotPowerFitDf
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNested")
> ### * plotPowerFitNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNested
> ### Title: Plot power of rejecting a nested model in a nested model
> ###   comparison by each fit index
> ### Aliases: plotPowerFitNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.null <- matrix(0, 6, 1)
> ##D loading.null[1:6, 1] <- NA
> ##D LX.NULL <- simMatrix(loading.null, 0.7)
> ##D RPH.NULL <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model.NULL <- simSetCFA(LY = LX.NULL, RPS = RPH.NULL, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 6, 6)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "rnorm(1,0,0.1)")
> ##D CFA.Model.NULL.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.alt <- matrix(0, 6, 2)
> ##D loading.alt[1:3, 1] <- NA
> ##D loading.alt[4:6, 2] <- NA
> ##D LX.ALT <- simMatrix(loading.alt, 0.7)
> ##D latent.cor.alt <- matrix(NA, 2, 2)
> ##D diag(latent.cor.alt) <- 1
> ##D RPH.ALT <- symMatrix(latent.cor.alt, 0.7)
> ##D CFA.Model.ALT <- simSetCFA(LY = LX.ALT, RPS = RPH.ALT, RTE = RTD)
> ##D 
> ##D # loading.alt.mis <- matrix(NA, 6, 2)
> ##D # loading.alt.mis[is.na(loading.alt)] <- 0
> ##D # LX.alt.mis <- simMatrix(loading.alt.mis, "runif(1,-.2,.2)")
> ##D # CFA.Model.alt.mis <- simMisspecCFA(LY = LX.alt.mis, RTE=RTD.Mis)
> ##D 
> ##D SimData.NULL <- simData(CFA.Model.NULL, 500)
> ##D SimData.ALT <- simData(CFA.Model.ALT, 500)
> ##D 
> ##D SimModel.NULL <- simModel(CFA.Model.NULL)
> ##D SimModel.ALT <- simModel(CFA.Model.ALT)
> ##D 
> ##D Output.NULL.NULL <- simResult(10, SimData.NULL, SimModel.NULL)
> ##D Output.ALT.NULL <- simResult(10, SimData.ALT, SimModel.NULL)
> ##D Output.NULL.ALT <- simResult(10, SimData.NULL, SimModel.ALT)
> ##D Output.ALT.ALT <- simResult(10, SimData.ALT, SimModel.ALT)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT)
> ##D plotPowerFitNested(Output.ALT.NULL, Output.ALT.ALT, nullNested=Output.NULL.NULL, nullParent=Output.NULL.ALT, usedFit="CFI")
> ##D 
> ##D Output.NULL.NULL2 <- simResult(NULL, SimData.NULL, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.ALT.NULL2 <- simResult(NULL, SimData.ALT, SimModel.NULL, n=seq(50, 500, 50))
> ##D Output.NULL.ALT2 <- simResult(NULL, SimData.NULL, SimModel.ALT, n=seq(50, 500, 50))
> ##D Output.ALT.ALT2 <- simResult(NULL, SimData.ALT, SimModel.ALT, n=seq(50, 500, 50))
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, nullNested=Output.NULL.NULL2, nullParent=Output.NULL.ALT2, logistic=FALSE)
> ##D 
> ##D plotPowerFitNested(Output.ALT.NULL2, Output.ALT.ALT2, cutoff=c(CFI=-0.1), logistic=FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerFitNonNested")
> ### * plotPowerFitNonNested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerFitNonNested
> ### Title: Plot power of rejecting a non-nested model based on a difference
> ###   in fit index
> ### Aliases: plotPowerFitNonNested
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n1 <- simNorm(0, 0.1)
> ##D u79 <- simUnif(0.7, 0.9)
> ##D 
> ##D loading.A <- matrix(0, 8, 2)
> ##D loading.A[1:3, 1] <- NA
> ##D loading.A[4:8, 2] <- NA
> ##D LX.A <- simMatrix(loading.A, 0.7)
> ##D latent.cor <- matrix(NA, 2, 2)
> ##D diag(latent.cor) <- 1
> ##D RPH <- symMatrix(latent.cor, "u79")
> ##D RTD <- symMatrix(diag(8))
> ##D CFA.Model.A <- simSetCFA(LY = LX.A, RPS = RPH, RTE = RTD)
> ##D 
> ##D error.cor.mis <- matrix(NA, 8, 8)
> ##D diag(error.cor.mis) <- 1
> ##D RTD.Mis <- symMatrix(error.cor.mis, "n1")
> ##D CFA.Model.A.Mis <- simMisspecCFA(RTE = RTD.Mis)
> ##D 
> ##D loading.B <- matrix(0, 8, 2)
> ##D loading.B[1:4, 1] <- NA
> ##D loading.B[5:8, 2] <- NA
> ##D LX.B <- simMatrix(loading.B, 0.7)
> ##D CFA.Model.B <- simSetCFA(LY = LX.B, RPS = RPH, RTE = RTD)
> ##D 
> ##D SimData.A <- simData(CFA.Model.A, 500)
> ##D SimData.B <- simData(CFA.Model.B, 500)
> ##D 
> ##D SimModel.A <- simModel(CFA.Model.A)
> ##D SimModel.B <- simModel(CFA.Model.B)
> ##D 
> ##D # The actual number of replications should be greater than 10.
> ##D Output.A.A <- simResult(10, SimData.A, SimModel.A)
> ##D Output.A.B <- simResult(10, SimData.A, SimModel.B)
> ##D Output.B.A <- simResult(10, SimData.B, SimModel.A)
> ##D Output.B.B <- simResult(10, SimData.B, SimModel.B)
> ##D 
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, dat1Mod1=Output.A.A, dat1Mod2=Output.A.B)
> ##D plotPowerFitNonNested(Output.B.A, Output.B.B, cutoff=c(AIC=0, BIC=0))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotPowerSig")
> ### * plotPowerSig
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPowerSig
> ### Title: Plot multiple logistic curves given a significance result matrix
> ### Aliases: plotPowerSig
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotQtile")
> ### * plotQtile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotQtile
> ### Title: Build a scatterplot with overlaying line of quantiles of
> ###   predicted values
> ### Aliases: plotQtile
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("plotScatter")
> ### * plotScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotScatter
> ### Title: Plot overlaying scatter plots visualizing the power of rejecting
> ###   misspecified models
> ### Aliases: plotScatter
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("popDiscrepancy")
> ### * popDiscrepancy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popDiscrepancy
> ### Title: Find the discrepancy value between two means and covariance
> ###   matrices
> ### Aliases: popDiscrepancy
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popDiscrepancy(m1, S1, m2, S2)
         [,1]
[1,] 0.116864
> 
> 
> 
> cleanEx()
> nameEx("popMisfit")
> ### * popMisfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfit
> ### Title: Calculate population misfit
> ### Aliases: popMisfit popMisfit-methods popMisfit,ANY,ANY-method
> ###   popMisfit,matrix,matrix-method popMisfit,list,list-method
> ###   popMisfit,SimRSet,SimRSet-method popMisfit,MatrixSet,MatrixSet-method
> ###   popMisfit,SimSet,SimMisspec-method
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea") #, misfitBound=c(0.05, 0.08))
> 
> popMisfit(Path.Model, Path.Mis.Model, fit.measures="rmsea")
     rmsea 
0.07897849 
> 
> 
> 
> cleanEx()
> nameEx("popMisfitMACS")
> ### * popMisfitMACS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popMisfitMACS
> ### Title: Find population misfit by sufficient statistics
> ### Aliases: popMisfitMACS
> 
> ### ** Examples
> 
> m1 <- rep(0, 3)
> m2 <- c(0.1, -0.1, 0.05)
> S1 <- matrix(c(1, 0.6, 0.5, 0.6, 1, 0.4, 0.5, 0.4, 1), 3, 3)
> S2 <- matrix(c(1, 0.55, 0.55, 0.55, 1, 0.55, 0.55, 0.55, 1), 3, 3)
> popMisfitMACS(m1, S1, m2, S2)
        f0       srmr 
0.11686397 0.06770032 
> 
> 
> 
> cleanEx()
> nameEx("predProb")
> ### * predProb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predProb
> ### Title: Function to get predicted probabilities from logistic regression
> ### Aliases: predProb
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("printIfNotNull")
> ### * printIfNotNull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printIfNotNull
> ### Title: Provide basic summary of each object if that object is not NULL.
> ### Aliases: printIfNotNull
> 
> ### ** Examples
> 
> # This function is not public
> 
> # AL <- simVector(rep(NA, 5), "0")
> # printIfNotNull(AL, "Factor mean")
> 
> 
> 
> cleanEx()
> nameEx("reassignNames")
> ### * reassignNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reassignNames
> ### Title: Reassign the name of equality constraint
> ### Aliases: reassignNames
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("reduceConstraint")
> ### * reduceConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduceConstraint
> ### Title: Reduce the model constraint to data generation parameterization
> ###   to analysis model parameterization.
> ### Aliases: reduceConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("reduceMatrices")
> ### * reduceMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduceMatrices
> ### Title: Reduce the model constraint to data generation parameterization
> ###   to analysis model parameterization.
> ### Aliases: reduceMatrices
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("revText")
> ### * revText
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: revText
> ### Title: Reverse the proportion value by subtracting it from 1
> ### Aliases: revText
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # revText(.96)
> # revText("> .60")
> 
> 
> 
> cleanEx()
> nameEx("run")
> ### * run
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run
> ### Title: Run a particular object in 'simsem' package.
> ### Aliases: run run-methods run,ANY-method run,NullSimMatrix-method
> ###   run,NullSymMatrix-method run,NullSimVector-method
> ### Keywords: run
> 
> ### ** Examples
> 
> n02 <- simNorm(0, 0.2)
> run(n02)
[1] -0.1252908
> 
> 
> 
> cleanEx()
> nameEx("runFit")
> ### * runFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runFit
> ### Title: Build a Monte Carlo simulation that the data-generation
> ###   parameters are from the result of analyzing real data
> ### Aliases: runFit runFit-methods runFit,ANY-method runFit,SimModel-method
> ###   runFit,SimModelOut-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D loading <- matrix(0, 9, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:6, 2] <- NA
> ##D loading[7:9, 3] <- NA
> ##D model <- simParamCFA(LY=loading)
> ##D SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> ##D u2 <- simUnif(-0.2, 0.2)
> ##D loading.trivial <- matrix(NA, 9, 3)
> ##D loading.trivial[is.na(loading)] <- 0
> ##D LY.trivial <- simMatrix(loading.trivial, "u2")
> ##D mis <- simMisspecCFA(LY = LY.trivial)
> ##D Output <- runFit(SimModel, HolzingerSwineford1939, 5, mis)
> ##D summary(Output)
> ##D 
> ##D out <- run(SimModel, HolzingerSwineford1939)
> ##D Output2 <- runFit(out, HolzingerSwineford1939, 5, mis)
> ##D 
> ##D # Bollen-Stine Bootstrap
> ##D Output3 <- runFit(out, HolzingerSwineford1939, 5, modelBoot=TRUE)
> ##D 
> ##D # Bollen-Stine Bootstrap with trivial misspecification
> ##D Output4 <- runFit(out, HolzingerSwineford1939, 5, mis, modelBoot=TRUE)
> ##D 
> ##D # Example with multiple imputation
> ##D library(lavaan)
> ##D loading <- matrix(0, 11, 3)
> ##D loading[1:3, 1] <- NA
> ##D loading[4:7, 2] <- NA
> ##D loading[8:11, 3] <- NA
> ##D path <- matrix(0, 3, 3)
> ##D path[2:3, 1] <- NA
> ##D path[3, 2] <- NA
> ##D errorCov <- diag(NA, 11)
> ##D facCov <- diag(3)
> ##D param <- simParamSEM(LY=loading, BE=path, TE=errorCov, PS=facCov)
> ##D 
> ##D miss <- simMissing(pmMCAR=0.03, numImps=5)
> ##D usedData <- run(miss, PoliticalDemocracy)
> ##D 
> ##D model <- simModel(param, indLab=c(paste("x", 1:3, sep=""), paste("y", 1:8, sep="")))
> ##D out <- run(model, usedData, miss)
> ##D output <- runFit(model, usedData, 5, missModel=miss)
> ##D pValue(out, output)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("runFitParam")
> ### * runFitParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runFitParam
> ### Title: Build a parameter result object that the data-generation
> ###   parameters are from the result of analyzing real data
> ### Aliases: runFitParam runFitParam-methods runFitParam,ANY-method
> ###   runFitParam,SimModel-method runFitParam,SimModelOut-method
> 
> ### ** Examples
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> model <- simParamCFA(LY=loading)
> SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> u2 <- simUnif(-0.2, 0.2)
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> mis <- simMisspecCFA(LY = LY.trivial)
> Output <- runFitParam(SimModel, data=HolzingerSwineford1939, nRep=5, misspec=mis)
> summary(Output)
PARAMETER RESULT OBJECT
Model Type
[1] "CFA"
========= Parameter Values ============
       mean sd
LY1_1 0.772  0
LY2_1 0.424  0
LY3_1 0.581  0
LY4_2 0.852  0
LY5_2 0.855  0
LY6_2 0.838  0
LY7_3 0.570  0
LY8_3 0.723  0
LY9_3 0.665  0
PS2_1 0.459  0
PS3_1 0.471  0
PS3_2 0.283  0
TE1_1 0.404  0
TE2_2 0.821  0
TE3_3 0.662  0
TE4_4 0.275  0
TE5_5 0.269  0
TE6_6 0.298  0
TE7_7 0.676  0
TE8_8 0.477  0
TE9_9 0.558  0
TY1   3.463  0
TY2   4.756  0
TY3   1.412  0
TY4   1.782  0
TY5   2.514  0
TY6   1.160  0
TY7   3.279  0
TY8   4.744  0
TY9   4.669  0
========= Misspecification Values ============
        mean    sd
LY4_1 -0.052 0.104
LY5_1 -0.015 0.132
LY6_1 -0.009 0.114
LY7_1  0.076 0.077
LY8_1  0.005 0.145
LY9_1  0.001 0.093
LY1_2  0.049 0.144
LY2_2 -0.035 0.147
LY3_2 -0.073 0.088
LY7_2  0.045 0.127
LY8_2 -0.046 0.137
LY9_2 -0.053 0.161
LY1_3  0.022 0.030
LY2_3 -0.038 0.135
LY3_3 -0.051 0.157
LY4_3 -0.090 0.162
LY5_3 -0.013 0.111
LY6_3  0.052 0.087
========= Fit Indices Distributions ============
              f0 rmsea  srmr
5%         0.564 0.125 0.070
10%        0.592 0.128 0.075
25%        0.675 0.137 0.089
50%        1.109 0.176 0.094
75%        1.114 0.176 0.120
90%        1.158 0.179 0.126
95%        1.173 0.180 0.128
fitAverage 0.924 0.158 0.099
fitSE      0.297 0.027 0.026
========= Correlation between Fit Indices and Parameter Misspecification ============
       LY4_1  LY5_1  LY6_1  LY7_1  LY8_1  LY9_1  LY1_2  LY2_2  LY3_2  LY7_2
LY4_1  1.000 -0.005  0.549 -0.204 -0.059 -0.061  0.568 -0.025  0.043 -0.347
LY5_1 -0.005  1.000 -0.750  0.962  0.952  0.876 -0.495 -0.451  0.864 -0.655
LY6_1  0.549 -0.750  1.000 -0.764 -0.856 -0.855  0.700  0.644 -0.618  0.113
LY7_1 -0.204  0.962 -0.764  1.000  0.873  0.786 -0.621 -0.293  0.793 -0.620
LY8_1 -0.059  0.952 -0.856  0.873  1.000  0.967 -0.505 -0.679  0.827 -0.464
LY9_1 -0.061  0.876 -0.855  0.786  0.967  1.000 -0.604 -0.819  0.662 -0.253
LY1_2  0.568 -0.495  0.700 -0.621 -0.505 -0.604  1.000  0.420 -0.072 -0.195
LY2_2 -0.025 -0.451  0.644 -0.293 -0.679 -0.819  0.420  1.000 -0.255 -0.235
LY3_2  0.043  0.864 -0.618  0.793  0.827  0.662 -0.072 -0.255  1.000 -0.812
LY7_2 -0.347 -0.655  0.113 -0.620 -0.464 -0.253 -0.195 -0.235 -0.812  1.000
LY8_2 -0.813  0.144 -0.729  0.236  0.317  0.437 -0.758 -0.526 -0.072  0.564
LY9_2 -0.415  0.058 -0.328  0.168  0.106  0.299 -0.860 -0.373 -0.419  0.585
LY1_3 -0.378 -0.861  0.460 -0.720 -0.824 -0.702 -0.004  0.367 -0.927  0.815
LY2_3 -0.959  0.238 -0.688  0.435  0.265  0.275 -0.763 -0.093  0.081  0.235
LY3_3 -0.128 -0.157 -0.067 -0.121 -0.070  0.168 -0.623 -0.421 -0.611  0.716
LY4_3  0.590 -0.459  0.677 -0.510 -0.493 -0.335  0.124  0.053 -0.701  0.375
LY5_3  0.207  0.711 -0.171  0.766  0.466  0.341 -0.287  0.201  0.563 -0.805
LY6_3  0.444  0.206 -0.029  0.106  0.248  0.435 -0.403 -0.576 -0.212  0.229
f0    -0.474 -0.628  0.291 -0.435 -0.649 -0.519 -0.325  0.336 -0.851  0.729
rmsea -0.484 -0.613  0.285 -0.414 -0.642 -0.518 -0.335  0.353 -0.837  0.707
srmr  -0.807 -0.563 -0.080 -0.411 -0.443 -0.384 -0.156  0.151 -0.501  0.709
       LY8_2  LY9_2  LY1_3  LY2_3  LY3_3  LY4_3  LY5_3  LY6_3     f0  rmsea
LY4_1 -0.813 -0.415 -0.378 -0.959 -0.128  0.590  0.207  0.444 -0.474 -0.484
LY5_1  0.144  0.058 -0.861  0.238 -0.157 -0.459  0.711  0.206 -0.628 -0.613
LY6_1 -0.729 -0.328  0.460 -0.688 -0.067  0.677 -0.171 -0.029  0.291  0.285
LY7_1  0.236  0.168 -0.720  0.435 -0.121 -0.510  0.766  0.106 -0.435 -0.414
LY8_1  0.317  0.106 -0.824  0.265 -0.070 -0.493  0.466  0.248 -0.649 -0.642
LY9_1  0.437  0.299 -0.702  0.275  0.168 -0.335  0.341  0.435 -0.519 -0.518
LY1_2 -0.758 -0.860 -0.004 -0.763 -0.623  0.124 -0.287 -0.403 -0.325 -0.335
LY2_2 -0.526 -0.373  0.367 -0.093 -0.421  0.053  0.201 -0.576  0.336  0.353
LY3_2 -0.072 -0.419 -0.927  0.081 -0.611 -0.701  0.563 -0.212 -0.851 -0.837
LY7_2  0.564  0.585  0.815  0.235  0.716  0.375 -0.805  0.229  0.729  0.707
LY8_2  1.000  0.692  0.259  0.845  0.511 -0.358 -0.339  0.064  0.371  0.367
LY9_2  0.692  1.000  0.395  0.549  0.924  0.319 -0.024  0.604  0.643  0.641
LY1_3  0.259  0.395  1.000  0.216  0.474  0.392 -0.607 -0.096  0.927  0.918
LY2_3  0.845  0.549  0.216  1.000  0.225 -0.564  0.011 -0.257  0.407  0.421
LY3_3  0.511  0.924  0.474  0.225  1.000  0.605 -0.210  0.763  0.630  0.618
LY4_3 -0.358  0.319  0.392 -0.564  0.605  1.000 -0.087  0.698  0.398  0.384
LY5_3 -0.339 -0.024 -0.607  0.011 -0.210 -0.087  1.000  0.149 -0.327 -0.300
LY6_3  0.064  0.604 -0.096 -0.257  0.763  0.698  0.149  1.000  0.060  0.048
f0     0.371  0.643  0.927  0.407  0.630  0.398 -0.327  0.060  1.000  0.999
rmsea  0.367  0.641  0.918  0.421  0.618  0.384 -0.300  0.048  0.999  1.000
srmr   0.638  0.284  0.767  0.628  0.195 -0.257 -0.683 -0.466  0.677  0.672
        srmr
LY4_1 -0.807
LY5_1 -0.563
LY6_1 -0.080
LY7_1 -0.411
LY8_1 -0.443
LY9_1 -0.384
LY1_2 -0.156
LY2_2  0.151
LY3_2 -0.501
LY7_2  0.709
LY8_2  0.638
LY9_2  0.284
LY1_3  0.767
LY2_3  0.628
LY3_3  0.195
LY4_3 -0.257
LY5_3 -0.683
LY6_3 -0.466
f0     0.677
rmsea  0.672
srmr   1.000
> 
> out <- run(SimModel, HolzingerSwineford1939)
> Output2 <- runFitParam(out, nRep=5, misspec=mis)
> 
> 
> 
> cleanEx()
> nameEx("runLavaan")
> ### * runLavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runLavaan
> ### Title: Run data by the model object by the 'lavaan' package
> ### Aliases: runLavaan
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("runMI")
> ### * runMI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMI
> ### Title: Multiply impute and analyze data using lavaan
> ### Aliases: runMI
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function(data.mat,data.model,imps) {
+   #Impute missing data
+   imputed.l<-imputeMissing(data.mat,imps)
+   
+   #Run models on each imputed data set
+   #Does this give results from each dataset in the list?
+   
+   imputed.results<-result.object(imputed.l[[1]],sim.data.model,10)
+ 
+   imputed.results <- lapply(imputed.l,result.object,data.model,1)
+   comb.results<-MIpool(imputed.results,imps)
+   
+   return(comb.results)
+ 
+   }
function (data.mat, data.model, imps) 
{
    imputed.l <- imputeMissing(data.mat, imps)
    imputed.results <- result.object(imputed.l[[1]], sim.data.model, 
        10)
    imputed.results <- lapply(imputed.l, result.object, data.model, 
        1)
    comb.results <- MIpool(imputed.results, imps)
    return(comb.results)
}
> 
> 
> 
> cleanEx()
> nameEx("runMisspec")
> ### * runMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMisspec
> ### Title: Draw actual parameters and model misspecification
> ### Aliases: runMisspec
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("runRep")
> ### * runRep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runRep
> ### Title: Run one replication within a big simulation study
> ### Aliases: runRep
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("setOpenMxObject")
> ### * setOpenMxObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setOpenMxObject
> ### Title: Rearrange starting values for 'OpenMx'
> ### Aliases: setOpenMxObject setOpenMxObject-methods
> ###   setOpenMxObject,ANY,ANY-method setOpenMxObject,vector,vector-method
> ###   setOpenMxObject,matrix,matrix-method
> ###   setOpenMxObject,SimParam,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> # parameter <- c(NA, NA, 0, 0)
> # startingValues <- c(2, 5, 0, 0)
> # setOpenMxObject(parameter, startingValues)
> 
> 
> 
> cleanEx()
> nameEx("setPopulation")
> ### * setPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPopulation
> ### Title: Set the data generation population model underlying an object
> ### Aliases: setPopulation setPopulation-methods setPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("simBeta")
> ### * simBeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBeta
> ### Title: Create random beta distribution object
> ### Aliases: simBeta
> 
> ### ** Examples
> 
>     b11 <- simBeta(1, 1)
>     run(b11)
[1] 0.7344913
> 
> 
> 
> cleanEx()
> nameEx("simBinom")
> ### * simBinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBinom
> ### Title: Create random binomial distribution object
> ### Aliases: simBinom
> 
> ### ** Examples
> 
>     b55 <- simBinom(5, 0.5)
>     run(b55)
[1] 2
> 	summary(b55)
[1] "Random Binomial Distribution Object."
[1] "Number of trials is 5."
[1] "Probability of success is 0.5."
> 
> 
> 
> cleanEx()
> nameEx("simCauchy")
> ### * simCauchy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simCauchy
> ### Title: Create random Cauchy distribution object
> ### Aliases: simCauchy
> 
> ### ** Examples
> 
>     c02 <- simCauchy(0, 2)
>     run(c02)
[1] 2.20504
> 	summary(c02)
[1] "Random Cauchy Distribution Object."
[1] "Location parameter is 0."
[1] "Scale parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simChisq")
> ### * simChisq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simChisq
> ### Title: Create random chi-squared distribution object
> ### Aliases: simChisq
> 
> ### ** Examples
> 
>     chi5 <- simChisq(5)
>     run(chi5)
[1] 2.424343
> 	summary(chi5)
[1] "Random Chi-squared Distribution Object."
[1] "Degree of freedom is 5."
[1] "Non-centrality parameter is 0."
> 
> 
> 
> cleanEx()
> nameEx("simData")
> ### * simData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simData
> ### Title: Create a Data object
> ### Aliases: simData simData-methods simData,ANY-method
> ###   simData,SimSet-method simData,SimModelOut-method
> ###   simData,SimRSet-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 200)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "No"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
              y1            y2           y3            y4           y5
1    0.861413643  0.3543112677 -0.510988043  0.3505152466  1.386601202
2    0.212495373 -1.0926970622 -1.798353732 -0.7370809787  1.764391805
3   -0.512218594 -0.2962942528  0.326671545  1.4051457532  0.584956511
4   -1.150292877 -0.7016111752 -0.915235141 -1.5033545683 -1.211857492
5    0.576623579  0.9058263804  0.975511971 -1.3930148512 -0.908102473
6   -0.804869378 -1.3239206663  0.371314019  2.2907373701  1.619471995
7   -0.845528202 -0.1864033874 -0.863310794  0.5094926904  0.385290484
8   -0.915651588 -1.4870664302  0.172987556  0.3020181685 -1.056237051
9    0.459505027 -1.3162218944 -0.286923688 -1.0458305036 -1.051621032
10  -0.433667640  0.4739885111 -0.121130124 -0.2871526148  1.537906381
11  -1.168408625 -1.0536928154 -0.604108618 -1.0227121698 -1.369734006
12  -0.073384881 -0.6655942673 -0.622648093  0.0154539591 -0.524537499
13   1.256067332 -0.4533345578  0.997921014  0.7417301182 -0.339771423
14   1.663732281  1.3392013866  3.338905460  0.8606534876  2.106966483
15  -1.502964257 -0.8905192865 -1.226621342 -1.6975326476 -0.237637385
16  -0.356730164 -0.6800339975 -0.949388273  1.5720083415 -0.404740609
17   0.744976502 -0.3484906632  0.058100886  0.3081838186 -0.646471503
18  -0.210453086 -0.8553978741  0.873850291 -0.7995296260 -0.338126142
19  -1.678797199 -1.1583323826  0.302204885 -0.6004899076  0.549350151
20   0.617439978  0.1780023263 -1.932863126 -0.2766737469 -0.421192279
21   1.008121920 -0.4295057581 -0.064596895 -1.3185759969 -1.341314911
22  -0.941313493  0.1549561688 -0.794941162  0.5948796282 -0.894857145
23   0.199016415  0.6901389729 -0.178284376 -1.1567597245 -0.474457058
24   0.467580315  2.4057303807  1.607243516  0.3069045522  1.164321143
25   0.442101379  0.1153223859 -0.227727800 -1.2374451428 -1.037652935
26   0.156538181 -1.8601654610 -0.647213163  1.5260772163  0.646169745
27  -0.699051939  0.0984364516  1.367531077 -0.7312632727  0.511708171
28   1.266130997  2.5815876268  1.314362317  1.0795820927 -0.964811148
29  -0.142050518 -0.3874779716  1.224978493  0.1998662568  1.053372438
30  -0.798188083  0.0664339917 -0.471316840 -0.8594646697 -0.138670245
31  -1.650491810 -0.2063365105  0.462150039 -0.9091104616 -1.073881672
32   1.677218808  1.2425562504  1.235553042 -0.3978106464 -2.298056018
33  -0.862210232  0.1975061728  0.757625743  0.1760198577 -1.199031582
34  -0.238260960 -0.3932780724 -0.039515838  0.1212401260  0.584552677
35   1.299293864  1.2225769922  0.338711120  1.6671356868  0.962456572
36   0.208314791  0.7310457922  0.032284181  0.9173558580 -0.337579983
37   0.529891243 -0.1056890277 -0.394905894  0.9056440440 -0.806555013
38   0.565362304  1.0539869197  0.121720691 -0.6855628749 -0.577018500
39  -1.617219804 -0.3618988651 -1.739597663 -0.2119829811  0.607531880
40  -0.134050594 -0.8092316245 -0.589536760 -1.1002154182  0.017674171
41  -0.464489196  0.3534529661 -0.523534007  2.2188703938 -0.541859375
42   0.732974203 -0.9176727078 -0.717182051  0.1252231262  1.865338724
43  -0.581281485 -0.6947862975 -0.435835223  0.3303357476 -2.256196708
44   0.523085818 -0.7137612466  0.268115921 -0.4793002597 -0.720880471
45   0.053186944  0.7666578068 -1.019172425  0.7394875192  1.503618039
46  -0.366941481  2.7023886307  1.825664410  0.3271022463 -0.343360535
47  -0.793656736  0.8789680069 -0.076561592 -0.6528994813 -0.960046253
48  -0.647806089 -0.1852071785 -0.368529036  0.3476022781 -0.709467959
49   0.289323996  0.0969885950  0.067422165 -0.5014595106  1.185361369
50  -2.423578620 -0.2618983608 -0.487167133  0.0986046906 -0.297789962
51   0.230910313 -0.5380852158 -0.682376200 -0.0938058985 -0.458002557
52  -0.126212758  0.5802509622  0.224636735  1.1913491129  0.286621479
53  -0.636734647 -0.5771221108  0.620650177 -1.4088487809  0.115500499
54  -0.034551834  2.2274822868  0.424622954  0.4216359700  2.364066086
55  -2.128565023 -0.4969576695 -1.216897042 -0.9262828800 -0.368585893
56  -1.821462828 -2.1254090590 -1.616057065  0.3243084176 -0.186708733
57   1.638696258  1.7033320487  0.683027914 -1.1733271835 -0.254792722
58  -0.781791010  0.6407058235  1.465508543  0.4529950007  1.400566656
59  -1.139573414  0.5269050377 -1.049135949  0.0719667467  0.281911000
60   0.596973274 -0.0951136558  0.351842462 -0.5170752198 -0.007225724
61  -2.312893818 -2.9661367230 -0.867159679 -0.9353763518 -1.951277923
62   1.466317944  0.3632991872 -1.218511171 -0.3962684505 -0.571391046
63   0.391932969 -0.2373896486 -1.157911090 -0.5145244482  0.039864176
64  -0.062173228 -1.0069700752 -0.159072499  0.7924837368  0.485267330
65  -0.280493500 -0.9524256152  0.382894319  2.3470910105  0.966679198
66  -0.087118965 -1.0784984129  0.415578699  0.7195395033 -1.023750646
67   0.994865244  1.4625466822  1.762015203  1.6682305587  1.073537719
68  -0.077990541 -1.7162963273  0.461733903 -2.2833537805 -0.833449210
69   0.910807698 -0.7577905774 -0.009910945 -0.1607698518 -0.494929331
70  -0.401619629 -1.2642046138 -1.434262951 -2.9961539849 -1.890895791
71  -0.676115731  0.6472295525 -0.576864572  0.6324906522 -1.282458779
72  -0.646039945  0.4150205104  1.124777509  0.2500128726  0.306470824
73  -0.086724476 -0.1264904637  0.144860645 -0.7353772976 -0.440255857
74  -0.321322556 -0.6432249805 -0.770661546  2.3813826777  2.177600330
75   1.559987013  1.1716912287 -0.414991474  0.3633004344  1.402332128
76  -1.479759163 -0.7888484634  0.135954678  1.1334913324  0.146822231
77   1.553410612  0.4565705830  2.012837932 -0.0732962339 -1.011262192
78  -0.202133010 -1.2168913918  0.404167480  1.1048785559 -0.393825731
79   1.245759763  0.5129040778 -0.109953259 -0.6854282063 -0.766896874
80  -0.038705027 -0.0935975506  0.065010008  1.1846841146  1.056629444
81  -0.007163393  0.5876715539  0.023019390 -0.3083042698  1.153676127
82  -0.392131590  0.6035874049  0.618254833  0.6967597178 -0.423434093
83  -1.697410887 -1.0567165694 -1.432989020 -0.3396415067 -0.111255743
84   1.133148345  1.5820770483  1.317677530  0.6801429221  0.625320826
85   1.235542887 -0.6926307889 -0.948074197  0.2023674408 -1.242437759
86   1.658601301 -0.5930097193 -0.369469708  0.1284662890 -1.736799914
87  -0.507961316  0.1454775326 -0.869788524 -1.0904027132 -0.286581571
88  -0.834490893  0.0726494937  0.084041111  0.7243732400 -0.389207011
89  -1.596874299  0.3715367629 -0.114058752 -1.1239917731  0.463072150
90  -0.337441597 -0.6850029632 -0.890187891  0.8553857279  0.191720270
91  -0.093257675  1.7700469878 -0.048837706 -0.3078389588  0.256313925
92   0.348219067 -1.3320427239 -1.968040729 -0.7398181099 -0.387844525
93  -1.408202789 -0.6581578224 -0.609049717  0.7491165886 -1.422652458
94   0.243456204  0.0609808144  0.231574720 -0.9658062389 -0.717367580
95   0.344207872 -2.9715300379 -3.005316227 -0.2605189793 -0.667054703
96  -1.083527230 -1.1427547878  0.915500584 -0.2517897792 -0.586874440
97   0.689333259  1.1300197998 -0.289375139  1.9779819140  2.058390969
98  -0.694885437  0.9389971327 -0.392493480  0.8593468102  0.247853775
99   1.049522830  0.1372647986  1.353635350 -0.1336462379  1.856730364
100 -0.051443087  0.8382671240  0.586435751  0.1328556755  0.539907711
101  0.055296336 -0.0735650600  0.048932495  0.6571415239  1.758738984
102  0.275633778  0.0161200553  1.054455532 -1.3213624709 -0.845182468
103 -0.975169905  0.8220543481 -0.702565582  1.5412129655  1.559836156
104  0.075034469 -0.1837268561  0.314041657 -0.6159755251  0.320964874
105  0.265025534 -0.4475086556 -0.757033658  1.9327578722  0.895287184
106 -0.948231836 -2.2711263641 -2.413641572 -0.2077186584  0.193790281
107 -1.320329676 -0.5467938886  0.307398553  0.5674788384 -0.885383843
108 -1.016185453 -1.3085167627 -0.287213340 -0.0028369956 -0.613489038
109  0.884324639 -0.0614902520 -0.198025062 -1.1504808282 -1.192912269
110 -1.928402384 -0.7621703652 -1.145541330 -2.1696139874 -0.449385886
111 -1.522096725  0.7494659035  0.629410411  0.1711208841  0.794050312
112 -0.280312946  0.8439254433  0.232609504 -0.4650530796  0.657014210
113 -1.320592806 -0.4779742477 -0.471233339 -1.5475051331 -0.284260689
114  0.764124426  0.9981591158  0.447018626  0.7434283246  0.174367172
115 -0.079552412 -0.2186871242  0.765833247  0.9409381738 -1.052346451
116 -0.087807435 -0.0503333026 -0.530234403  1.6648612990  1.306633545
117  0.189430941  0.1450294597  0.972682380  0.1341778017  0.017466506
118  0.461023638 -0.0036956528  0.271303019 -0.4181157867 -0.387373421
119  0.043661420  0.3173607807  0.410210679 -0.9667612896 -0.961558043
120  0.588059098 -1.0347115424  0.129002452  0.5449175857 -1.017994357
121 -0.685361555 -0.0019779816 -0.078948730  0.9421558000  0.485151304
122 -1.415885283 -1.6302366130 -1.709992921  0.9263058055 -1.562509872
123 -0.742722748 -0.2685087596  0.330917844 -0.1680438355  0.151745349
124  1.093801209  0.5099948460  1.313744840 -1.0195579946 -0.157810644
125 -0.180009695  0.5142502151 -0.790775903  0.8114185930  0.251602994
126 -1.669412770 -0.9195818253  0.527463942 -0.5190944970  0.084444863
127  0.126369072  0.0200590289  0.484972549  0.3139405988  0.493543167
128  0.635831061 -1.6271235774  0.834254966 -0.2129370993 -0.149147976
129  1.249448316  0.4315617209  0.875371860  0.1656623917 -0.573288998
130 -0.007746821 -0.3437021005  0.077627444  0.8417913419  0.281578685
131 -0.586701177  1.3031763921 -0.390876797  0.2058719884 -0.428544538
132  1.792660805  0.4079346672  1.132072135 -0.4149794825 -1.001958360
133 -0.143963577 -0.6705942794  0.244120719 -0.0095649052 -0.498030201
134  0.136438365 -0.4361149960  1.499273032  1.4410926331  2.861639075
135  0.903515450 -0.3506271367 -0.714718219 -0.3205368119 -0.803438047
136  0.251011805  1.7337952166  0.114465134  2.2037557054  0.307936515
137 -0.051840980 -0.8927031770  0.258356266  0.2839990507  0.405402021
138  1.100735181 -0.3847904543  0.344136042  0.0476781136  1.077579062
139  0.950295564  1.0641056202 -0.216974137 -0.5061212558  0.616243761
140  0.100537975 -0.0693315369  0.807477104 -0.6965633938  0.216479792
141  0.706877091  1.3869676352  0.758719297  2.6509231851  1.830583942
142 -0.099959750 -0.1533855522 -0.667767406 -0.4400385711 -1.552975336
143  1.307249651  0.3244222521  1.391851947  0.9752667828  0.517247900
144  0.454531311  1.0693398311 -0.192826866 -0.1582274132  0.177651728
145  2.551145934  1.6755838986  1.120364209 -0.1648480186  0.392260715
146  1.108437431  1.0067593784  1.325274451  0.8055728278 -0.606075529
147 -2.229603639 -1.9008069391 -1.333382514 -0.9953967793 -1.911848018
148  0.388742285 -0.0251517535 -0.137300524  1.0393895821 -1.392651604
149 -0.784491412  1.5008060109  0.781757206  0.1495867100  1.543357529
150  0.472376971 -0.0798688070  0.338948737  1.2963185922  1.547797785
151 -0.684441690 -1.9181976724 -0.320012330  1.5759598907 -0.493536226
152 -0.427148995 -0.3209142900 -0.140013606  0.7016030986  0.403074919
153 -0.610523430  0.7955126621 -0.062357105  1.1084393217  0.242279826
154  0.482668857  0.2875517789  1.368744294  0.3595594992  0.236454009
155  1.185521287 -0.3129343557 -0.027118921  2.3154163159  1.817552511
156  0.018124368  0.0693662860  1.267501599  2.1118438865  0.823073004
157 -1.497720959  0.7249910875  0.358397352 -1.8826612577 -1.821974512
158  0.962429386  0.2413504429  0.262659099  0.0005625601  0.056554058
159  1.513071107  1.8888977205  2.014179991 -0.4845696254  0.283413611
160 -1.466387525 -1.5847250359 -0.454363517 -1.7015236827 -0.131313259
161  0.186231494  0.8101148807  1.688366884 -1.6692860533 -1.108751920
162 -0.451176882  0.0001983117 -0.863090593  0.3962804794  0.859051704
163 -0.013628772 -0.8703504409 -0.383574892 -1.1940451270  0.489933352
164 -0.742973115 -0.0719105423 -0.386361859 -0.0124488191 -2.064433978
165  0.139901185 -1.0775591075  2.418701910 -0.0113008231  0.754813589
166 -1.123436675 -2.8277272787 -1.337482973 -2.3106332089 -0.784240631
167 -0.281768469  0.4803782893 -0.610950122  0.5868137757 -0.272022831
168  0.606278418  0.3086636257  1.183606970 -0.0764571540  2.351776865
169 -0.006947822  0.0306222677  1.050146952  0.0840765876 -0.746606455
170  1.006440687 -0.0453805734  0.483144634 -0.3045167299 -0.577395846
171 -1.955171798 -1.2216157685 -0.949599259 -1.3950557869 -2.023160730
172  0.297426638 -0.6064208538 -0.284307313  1.1733940017 -0.439296661
173  0.537317917 -0.0238539731 -0.310913579 -1.4702312749 -0.112398936
174 -0.189397989  0.8997237300 -0.460552139 -0.9893346880  0.561436997
175  1.251281395  0.6557115463  0.362721833 -1.3005740247  1.523165191
176  0.602525243  0.2357786330 -0.756870428  0.1042498150  0.767889073
177 -0.252885365 -0.8666863633 -0.646008630 -0.8530163721 -0.774600177
178 -0.148853140 -1.4460892020 -2.393644047 -1.4234434606 -1.643747242
179 -1.760681293 -0.3008314993  0.212185032  0.1336744680 -2.027112438
180 -2.295133234 -1.3281880136 -1.224299082 -0.5221418727 -0.110363884
181 -0.321728301  2.0038236896 -0.239355095  1.5478740236  1.230585545
182 -1.070355644 -1.2054093135 -1.228622064 -0.6857971917 -0.246966425
183  1.196591093 -0.4016559163  0.022869323 -0.2972950401 -0.297888051
184  1.890499221  0.2234592133  0.622432297  1.1506829875  0.544776917
185 -0.591806657 -0.5795047775 -1.458278905 -0.1570001209 -0.023177628
186  0.644888125  0.9163934684 -1.163667676  0.6294529751  0.338700960
187 -0.099706259  0.1407974003 -0.086782391 -2.4354019958 -1.455459174
188  0.631699417  0.0874962263  0.355537076  0.7305852581  0.665530233
189  1.376524960  2.1618794847 -0.066972856 -0.7906073885 -0.777282987
190  0.548723117  0.9012003883  1.527522616  0.9018640409 -0.199422941
191 -0.654997031  0.1029714709 -0.899908937  0.5357004769  1.147610689
192 -0.629486991 -0.7832298020 -0.239868302 -0.8441800729  0.277020853
193  0.807699156 -0.8547544499  0.031918390  1.1391427904  0.558090724
194 -1.302904699  0.3290573517 -1.120877400 -0.5607532007 -0.887596082
195 -0.370024368  0.6055568293  2.352970396  1.0258238460  0.467148675
196  1.573983254  0.7064076057  1.097620903  0.7011084384  0.463478813
197 -2.170945778 -1.5492250059 -1.364968555 -0.5213547266  0.257713824
198  0.408546342  0.5148022056  1.065166026  1.1903906634  0.933966472
199  0.576157997 -1.2103133253  0.780041864  0.2840384971  0.129711042
200 -0.582737113 -0.3002170722  0.469598637 -0.0953607960  0.913413383
              y6
1    0.086568899
2    0.910044122
3    1.864408996
4   -0.956341195
5   -1.486766711
6    1.158748615
7   -0.966846957
8    0.004006442
9    0.917188340
10   0.062629652
11  -0.883024411
12   0.297269479
13   0.304768681
14  -0.370737200
15   1.014955623
16   1.000240667
17  -0.050953726
18  -2.479748825
19  -0.728455913
20  -0.561750682
21  -1.563201178
22  -1.275494320
23   0.619394995
24   2.077417037
25  -0.556268663
26   0.405133970
27   0.081443764
28   0.659233006
29  -0.018833374
30   0.514357257
31  -2.106078750
32  -1.044601204
33  -0.634586394
34   0.182423904
35   0.067758235
36   0.123533611
37   1.463003289
38  -0.239094497
39  -1.116630906
40  -0.464883655
41  -0.378409199
42  -0.066091457
43   0.824758998
44  -1.124000980
45   0.736100170
46  -1.289341114
47   0.132711459
48  -1.538457926
49  -0.684197503
50  -0.184398244
51  -0.065430495
52   0.313546369
53   0.509766038
54  -0.845047510
55  -0.646520134
56  -2.567737442
57  -1.114798409
58   1.036233402
59  -0.991511526
60   0.215691024
61  -0.660294240
62   0.514929610
63  -1.305820180
64  -0.162554419
65   0.536170082
66   0.292267635
67   0.323775037
68  -1.465751283
69  -0.105950832
70  -0.781713214
71  -0.663479053
72   1.415163942
73  -1.220957377
74   0.946325583
75   0.977454408
76  -0.323963039
77  -1.149096039
78   0.299342801
79  -0.496433570
80   0.205336965
81   0.846297194
82  -0.557443593
83  -0.116848139
84   0.810881811
85  -0.951986197
86  -0.431604985
87  -1.681507069
88   1.570346904
89   0.506887724
90  -0.212507562
91   0.613231588
92  -0.795532788
93  -1.334539962
94  -1.678961278
95   0.155613858
96  -0.104654269
97  -0.413913313
98   1.354930408
99   0.679136213
100 -0.135336919
101  0.057309735
102  0.650352237
103  1.431191236
104 -0.548156526
105  0.753432436
106 -1.485997403
107 -1.015063864
108 -0.445300981
109  0.167978161
110 -0.334295418
111  1.743936988
112  0.875055263
113 -1.679249815
114 -0.500830432
115  0.480821334
116 -0.717712642
117 -0.167267964
118  1.203383837
119 -0.837500752
120  1.506448056
121  1.381069607
122 -0.028302946
123  1.562673358
124 -1.015466441
125 -0.202107635
126 -0.380203083
127 -1.141972064
128  0.671017425
129  0.602485852
130  0.459234551
131 -0.345738653
132  0.461099741
133 -1.067132743
134  0.626042831
135  0.048510503
136  1.590281112
137  1.211552717
138 -0.053154176
139  0.724361854
140 -0.128959582
141  0.392450451
142 -1.834666246
143  2.203935428
144  0.520380536
145 -1.070555869
146 -0.609597589
147 -0.052948319
148  0.056761777
149  2.000605081
150  3.046053743
151  0.023233624
152 -0.141692023
153 -0.189599575
154  1.016008243
155  1.025082701
156  0.049660737
157  0.082764820
158  0.983931018
159  0.372674694
160 -2.206306961
161 -1.622417483
162  1.021937493
163 -2.300464019
164 -0.299550815
165  0.274762196
166 -0.520501184
167  1.126860692
168  1.375515919
169  0.171517856
170 -1.399935009
171 -1.770598764
172 -0.567823397
173 -0.464407190
174  0.489520065
175 -1.144249411
176 -0.813415056
177  0.214214765
178 -1.320092754
179 -0.403879756
180  0.604902443
181  0.748528856
182  0.466062307
183 -1.110257097
184  1.490098447
185  0.706874858
186 -0.725020422
187 -1.974649704
188  0.621125552
189 -0.167169053
190  0.057971480
191  0.483430365
192  0.597189712
193  1.271302835
194  0.191615504
195  0.794452109
196 -0.312842525
197 -0.467857952
198 -0.012822742
199 -2.222401943
200  1.133359139
> 
> # With Misspecification Model
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> SimData <- simData(CFA.Model, 200, misspec=CFA.Model.Mis)
> summary(SimData)
DATA OBJECT
Model Type
[1] "CFA"
Sample Size
[1] 200
========= Parameters Set ============
SET OF MODEL MATRICES
Model Type
[1] "CFA"
-- Endogeneous Variable --

LY: Loading of Indicator.Y on Factor.ETA 
     [,1]     [,2]    
[1,] "NA:0.7" "0"     
[2,] "NA:0.7" "0"     
[3,] "NA:0.7" "0"     
[4,] "0"      "NA:0.7"
[5,] "0"      "NA:0.7"
[6,] "0"      "NA:0.7"

RTE: Correlation of Measurement.Error.EPSILON 
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "1"  "0"  "0"  "0"  "0"  "0" 
[2,] "0"  "1"  "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "1"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "1"  "0"  "0" 
[5,] "0"  "0"  "0"  "0"  "1"  "0" 
[6,] "0"  "0"  "0"  "0"  "0"  "1" 

VY: Variance of Indicator.Y 
[1] "NA:1" "NA:1" "NA:1" "NA:1" "NA:1" "NA:1"

TY: Measurement Intercept of Indicator.Y 
[1] "NA:0" "NA:0" "NA:0" "NA:0" "NA:0" "NA:0"

VPS: Variance of Regression.Residual.PSI 
[1] "1" "1"

RPS: Correlation of Regression.Residual.PSI 
     [,1]     [,2]    
[1,] "1"      "NA:0.5"
[2,] "NA:0.5" "1"     

VE: Variance of Factor.ETA 
[1] "1" "1"

AL: Regression Intercept of Factor.ETA 
[1] "0" "0"

ME: mean of Factor.ETA 
[1] "0" "0"
-------------------------- 
Number of free parameters =  19 
=====================================
Adding Misspecification?
[1] "Yes"
Adding Constraint?
[1] "No"
Maximum Random Sampling Parameters
[1] 100
> run(SimData)
              y1           y2            y3          y4           y5
1    0.830152040 -1.628111044 -1.2360549901 -1.01522033 -0.281468889
2   -0.591296990 -0.777759682 -1.1934181258 -0.54926491 -1.659965125
3   -0.543946937  0.154307703 -0.5180037172  0.84956250 -0.129569588
4   -1.263814862 -0.829416094 -1.2343071287  0.05480701  0.011996585
5   -1.015234409 -1.235452034 -0.3117536971  0.07908759  1.818552089
6   -1.131966513 -0.096161400  0.8888311434  0.43950595  0.613005621
7   -1.182581426 -1.549075460 -1.2079069129 -1.44547382 -1.415166706
8   -1.219328143 -0.571551665 -1.1812970907  0.48547062  0.163297748
9   -1.520075760 -0.169239165 -1.0217870655  0.07575464  1.423500331
10  -0.402394435 -0.546603151 -2.0418944737 -0.86478498  1.311731912
11  -0.382770700  0.771248446 -0.5844574892 -0.51497172 -0.991256312
12   1.279288749 -0.122363208  1.4714758365  0.04609300  0.190423056
13  -0.743117334  0.008765421  0.6238074392 -0.90163381 -0.058703218
14  -1.913188302 -0.235872331 -1.7248546597 -2.05035223 -3.004436389
15  -0.151021126  0.170707803 -0.2195928548  0.60577030  0.401409019
16  -0.102586995  0.624237298  0.9689622826  0.25735506 -0.214290586
17  -1.475270383  0.407412052 -1.3433885500  0.28915096 -0.949553740
18  -0.839862107 -2.474560925 -0.9674249656  2.03567918  0.224804218
19  -0.323046164  0.649124898 -0.5425143634  0.01383570  0.679934395
20  -0.168246221  1.737284776 -0.2381877549  0.94152942  1.698015210
21   0.112700562 -0.854666279 -1.1013975782 -1.13796973  0.028347212
22  -0.542398572 -1.414962940 -1.6720767180 -0.54570867  2.279081175
23  -0.654264340 -0.365567283  0.2527759686  0.04462608 -1.317055835
24  -0.415705983 -0.595682480 -0.4906947369  0.86950526  0.453132933
25  -0.193445934  1.511769734 -0.1574364064  1.92059623  2.084208937
26   0.555191054 -1.099920882 -0.1402102956 -1.32294508  0.322223646
27   0.328537415 -0.464153276  0.2127456318 -2.72927031 -2.819197730
28   0.823646386  0.893535680  1.5517478969  0.06703200  1.115252527
29   0.248920206 -0.352984783  1.1796514393  0.65950837  0.365557061
30   1.646071383  0.381928732  2.2112859902 -0.04317989  0.319936227
31   1.229978769  1.345251486  0.0719801798 -1.19026189  0.626279508
32  -1.732936257 -1.413039854 -0.8468575964 -1.18376443 -0.101274662
33   2.316504401  1.742240443  0.3293019998 -1.47838245 -0.711274632
34   0.741681907 -1.305062040  0.3465093888  0.93584788  0.865637041
35   1.399178913  0.588493185  0.7544473849  0.60863213  1.136257935
36   0.350667197  0.535929428 -0.0063189344 -0.50785752  0.576915179
37  -0.516715917 -0.870021939 -0.7711609734 -1.92477485 -1.337359798
38  -1.290056150 -1.512622573 -1.6533440577 -1.74610916 -2.007369774
39  -1.066304899 -0.308920138 -1.3710078089 -1.21851328 -1.196423045
40   0.292466685  0.439627298  0.8106551551  2.15562334 -0.264061188
41   0.635290531  0.146152086  0.8984807333  0.94128007 -0.097981880
42  -1.206410759 -0.288909129  0.0971023678  0.35979469 -1.435201458
43  -1.523800190  0.032001719 -0.2818528730  0.92678917 -0.143259992
44  -1.089362400  0.915345528 -0.9740433020  0.11645730  0.087535110
45  -0.358648950  0.113944550  0.5816786388  0.87995134  2.352262436
46   0.551207196  0.383413448  0.2587749687  0.06058353  0.961545021
47   0.413351798  0.395699162  0.1344777425  1.35930668  0.344017144
48  -0.271036225  0.821758449  0.6369557425 -0.12039720  1.203002223
49   0.275157164  0.768793637  1.5069195085  1.09710181  0.117706792
50   0.180721264  1.372136469  0.6688013413 -0.08046168 -0.700348855
51  -1.727977075  0.505211122 -1.1612662075 -0.03035715  1.064590373
52  -0.493950114  0.677691322  0.0155873547 -1.50945916 -1.297685776
53  -0.225711705  0.320526320 -0.4129917683  0.87117257  0.813102564
54   0.931354042  0.049145135  0.9087977606  0.88952781  0.400324483
55  -0.231166428 -0.963665419 -0.4288822849 -1.71712403 -0.959453795
56   1.195984042  0.159636374 -1.0873502101 -0.70033762 -1.756381202
57   0.529182141 -1.042678216  0.6671599608 -0.66136392 -0.953335647
58  -0.013822998  0.274598616 -0.5391677153 -1.11012642 -2.973116164
59   1.632429828  1.021242061  0.4866542264  0.84728297 -0.420307218
60  -2.217745484 -1.180266891 -1.8060648509 -1.17280657 -1.384785048
61   0.032015554 -0.496794942 -1.0950097134 -0.85199094 -0.615368009
62  -1.215486759  0.311000688 -1.9124364714  1.51700289 -0.613095149
63   0.059325766 -0.931340912 -0.2338464845  0.42281072 -0.202196092
64   0.727633772 -0.435637017  0.7568359648 -0.30801383  0.044250634
65   0.889415735 -0.447399220 -0.0595348892 -1.10158038  1.074903639
66   1.072684440  1.310683984  1.5539756505  1.05412667  0.823892078
67  -0.930929787 -1.252596650  1.2871597485 -0.36738924 -1.310979862
68  -0.702900948 -1.893433905 -1.8348720108 -2.93637253 -0.840753018
69  -1.783049104 -1.884044795 -0.5160485917 -0.39037677 -1.750403983
70  -0.354546917 -0.444762234 -0.6604639070  0.15663615  0.407971047
71  -0.035297881 -0.585428371 -0.0652065570  0.27833487 -0.217958705
72  -1.243608433  1.137567862 -0.9523400295  0.29175661 -0.283009502
73  -1.148289364 -0.471435884 -0.6890345753 -1.56871114 -0.698219121
74  -0.816865589 -1.214724853  0.2405468907 -2.26980936 -0.520842655
75  -0.529720212 -0.594982693 -0.3374460679  0.02907956 -0.446346412
76  -1.638879694 -0.001153242 -0.8168333800 -0.01194032 -1.389789325
77   0.828586689  0.543395225 -0.7031543217  0.12211792 -0.895087812
78  -0.293909484 -0.001969205 -0.0223942221 -0.13477665 -1.371366733
79  -1.550999259 -2.341196811 -0.2111255729 -0.06239594  0.269558791
80  -3.056440465 -2.693444093 -3.1635343745 -1.94201882 -2.277799676
81  -0.438780724  0.378443590  0.1202945599 -0.35220166 -0.059114488
82   0.417455157  2.236699846 -0.4294425624 -0.02255013  0.677602653
83  -1.787680240  0.097558805 -1.2673461850  0.19139621 -0.916586325
84   0.920095594  0.069829554  1.4805565739  1.08792186 -0.221882326
85  -0.271878755  0.293851966  0.1935564377 -1.26729602 -1.341650320
86  -0.719514878 -1.709361750  0.3062106907  0.65598260 -0.165029297
87  -0.317537941 -0.327615002 -0.5157616464 -1.53049821 -1.354260276
88   0.449990714  1.949600166 -1.5408430499  0.39597742  1.294489793
89   2.559224204 -0.420195550  1.0678331502  0.67745703  1.157610947
90  -1.630500779 -0.362090176 -1.5912440971 -1.08669103 -0.916211767
91  -1.141958167  0.602172012  0.6592000095  0.78799500 -0.465144562
92   0.303768241  0.588399064 -0.3613947395  1.52541932  1.750073478
93  -0.140729531  0.236962735  0.0579503746  0.96300012  1.300750067
94  -0.291283352  1.425027967  0.4054025668  1.09511635 -0.552079556
95  -1.892747732  0.485352923 -0.2553005410 -0.43751576 -0.593572554
96   1.309322083 -0.004680688  2.0889324641 -0.74405743  0.065877055
97  -0.864768817  0.080056014 -1.2361023742 -1.31278356 -0.254910355
98   0.754254552 -0.066098753  0.4872209543 -0.41689469 -0.020588268
99  -0.033235363 -1.119768409  0.2672625905  0.70831118  0.457791831
100 -0.695960284  0.404316537  0.5080892060 -0.21783559 -0.594191286
101 -0.272148619  0.929134960  0.4838310127  0.99602495 -0.271119924
102  0.299366736  1.586146023 -0.9783179419  0.63837620 -0.462130580
103 -1.653229500 -2.105002983 -0.0391243743 -0.72135049  0.508637167
104  0.774938934  1.304660075  0.8483367305  1.62010298  0.041386112
105 -2.219126665 -0.894540347 -1.5085378917 -0.10286206  0.209513778
106  1.445714475  1.457678997  0.6318239495 -0.78395808 -1.407789255
107 -0.313576243 -1.226179522 -0.5586202126 -0.08950910 -0.606994568
108 -0.075052939 -1.574053521 -1.6078261094  1.04666099  2.000130750
109  2.341771285  0.829878734  0.8597378756 -0.11853919  0.558513780
110  0.532694628  0.437940045 -0.4461004996 -0.59552774 -0.259185210
111  0.590244341  1.547309121 -0.1088605474  0.23015465 -0.285703696
112 -0.876288416 -1.595675618  0.0274665304  0.34817947 -0.778181145
113  0.343126983  0.428415528  1.1370244188 -0.02309587  1.499305623
114  0.628062219  1.313565260  2.2624968821  1.31522782  0.682520840
115  0.296040567 -0.810132509 -0.8425514310  2.47102876  1.626437926
116  0.500290396 -0.622118617  0.8036921172 -0.10030316  0.928681567
117 -1.102450370  0.186640817  1.0689715002  1.15939383 -0.123635480
118  1.051481128  1.969568587  1.9554877018 -2.12099485 -1.023560268
119 -0.543112308 -0.533209273  0.5203406877  1.32691026  1.035586108
120 -0.193309683 -0.218285446 -0.7104717400  2.10652035  1.414934296
121  0.396976988  0.117680473 -0.4413627127 -0.24498900 -0.946063192
122  1.285840701 -1.571130646  2.2793778867  0.44857358  1.027086338
123 -2.135605649  0.578819181 -1.9113482364 -1.51214024  0.117574135
124  0.156575427 -0.287256260  0.0009287892 -0.18227005 -0.483618898
125 -0.385010116 -1.433083561  0.1416155377  0.25418798  0.039185040
126  0.609991178  0.202423294  2.1040786077  1.86060311  2.047016366
127 -0.219053750 -0.544022098  1.4528891757 -0.12377881 -0.001795024
128  1.267427379  0.638255805 -0.4675028598  0.45456435  1.160476976
129  0.847465967 -0.689833943  0.0531758845 -1.28203981 -1.048257962
130  0.698488309 -0.434587349  0.0504696184 -1.22743295 -1.786701831
131 -1.440714485 -0.714152397 -0.0924613156 -0.87730194 -1.046504187
132  0.403731900  1.499911864  0.0659544572  1.51980061  1.064965658
133  1.127530869 -0.080344626  0.9998409909  0.28606514  0.908619144
134 -1.109493567  0.139443630  0.3735277832 -0.25933351  0.447330029
135 -0.017318102  0.805065380  0.6693148778  0.69370052  1.134073282
136  0.655096504  1.114941436  1.8615109583  1.03050231  1.222358779
137 -0.750794120 -0.173181878 -0.5913437748 -0.87277052  0.407745768
138 -1.488236162  0.991597479 -1.0776189551  1.34414400 -0.265067571
139 -0.383634863 -0.078144344 -1.1055239854 -0.22074606 -0.062133291
140  0.223320255  0.359739411  0.5708412148  2.05935980  1.483964251
141 -0.052131946 -0.751900724  0.5809724159  0.42874404  0.757492902
142 -0.249689013  0.828078754 -0.6769206279  0.72137070  1.331653692
143  0.104255278  0.804827245  0.6426202558  0.20659526  0.327572975
144  0.264028018  1.553662805 -0.5261040365 -1.29695311 -1.375773649
145  0.735015537 -0.247590081  1.5376608794 -0.30160511  0.355620277
146  0.589187263  0.431836030  0.5266374068  1.20827090  0.352386663
147  1.167149502  0.279335167  1.2938737051  0.71339741  0.846858827
148  0.075230809  1.659928449  1.5295472561  1.50612027  0.979583042
149  1.042154241  0.327535380 -0.7849091717  0.40823134  1.874765632
150 -0.176021704 -1.495451179 -0.6741931139 -0.93705211 -1.585368617
151  1.128568873  1.008808542  1.9092181094 -0.95974600 -0.671067795
152  0.487193286 -0.576275600 -0.8670269037  3.34177755  1.118972491
153  0.786759684  0.182263131  0.9576568129  0.59777156  1.404406172
154 -0.698591460  1.061019587 -1.2801057625  0.62493183  0.730631162
155 -0.004421482  0.275757305  0.9279685606 -1.14516795  1.092403786
156 -0.170643111  1.604148559 -1.6711513179 -0.19783560 -0.279107020
157  1.616694754  1.022032186  1.0204250161 -0.24566371 -1.099230494
158 -1.656296185 -0.134088383 -0.2004448377 -1.25087284 -0.066184695
159 -0.146905968 -0.947698599 -1.1151293064 -0.39387930  0.705249399
160 -0.449279870 -0.665364678  0.3709715488 -0.72713349 -1.664298203
161 -0.132807952  0.608024723 -0.0212095603 -0.11501097 -0.327327189
162 -1.299712163 -1.413752934 -1.4538833322 -1.27789184 -0.497884368
163  0.337578433 -0.148223812 -0.7731978417  0.99319497  0.275173207
164 -0.671229037  0.255788246 -0.8399878628 -1.30445565 -0.562866200
165 -0.459081066  0.430438465 -0.0568736457  0.34226330 -0.032682735
166  0.763273260  1.753010877  0.9839935895  0.37700791 -0.642293789
167  0.092060552  1.521647816 -0.6809810013  2.26649013  0.832934384
168  1.262247876  1.355464149  1.6106128452  0.62821789 -1.214268075
169  0.513199503  0.917168781  1.5523645433  0.71978742 -0.186989036
170 -0.943232294  0.561313327 -1.4041030859  0.79341787 -0.773632400
171 -0.449290990 -0.581959826 -0.6123861297  0.06110972  1.138203760
172  0.452366498  1.391211816  2.0559947603 -0.45844699 -0.725282863
173  0.288106744  0.104581875  0.3736483150 -0.36175215  1.550386594
174 -0.883560545 -1.500987928 -1.1263757535 -0.84385193 -1.674313009
175  0.126719949  0.204953283  0.1732461055 -0.72160444  0.052674119
176  1.132007788  2.404151995  0.0598930421  0.16169375  0.740970503
177  0.548897016  1.757580916  0.0122130399 -0.86344532  0.313584429
178 -0.813831082  1.596754259 -0.7425759346 -0.45876662 -0.479321351
179 -0.852850465 -2.046764336 -0.6982841113  0.59087318 -0.555396350
180  1.236892906  0.677748074  0.3714881158 -1.02477172 -0.547924161
181  1.077164318 -0.757494411  0.6688637201 -0.77285009  0.816916349
182 -0.628410948  1.230474942 -0.7019337289  0.56359256  1.857805963
183  0.013625533 -0.801225794  0.8479133886 -1.04663208 -0.161126029
184  2.313565518 -0.159236125  1.1193147515 -1.45260131 -1.118935743
185 -0.184912129  0.104469711 -1.2654058288 -0.27111912 -0.541933195
186 -0.771873220 -1.439899544 -1.3705220143 -0.37674010 -0.685732273
187 -0.383419778 -0.129994997  0.1841306854  0.62807975  0.392016290
188  0.718088789  0.339014102  0.6950113100 -1.02257479 -0.260522880
189 -0.505039158 -0.806334265  2.1224982413  0.26533520  0.552289330
190  0.065944933  0.622853101  0.7612610308  0.22669260  0.231906496
191  0.818583899 -1.003941584  0.2398740894  0.69591570  2.112598059
192 -1.294898013  0.665003098 -0.2148895330 -0.64455310  0.072603831
193  0.211455564 -0.060506826  1.5583288029  1.97217843  1.438638557
194 -0.336169872  1.432439881  2.0556155858  2.34441694  0.519898830
195  0.026959164  0.013925513  0.6201676120  0.78888876  0.504285556
196 -1.354469376 -0.955619606 -0.8353597069 -0.18220203 -0.856616376
197  1.245956109  0.696222885  1.1335756124 -0.35328219 -1.657109638
198  0.442377340  0.032014608 -0.3322654080  0.65267912  0.258453296
199  0.608960852 -0.639974548  0.5137777638 -0.77995173 -1.048114930
200  0.434901369  0.142146259 -0.4781802779 -0.08506325  0.980502029
              y6
1   -0.397148992
2   -0.333476816
3    1.278147701
4   -0.039830650
5   -0.822954911
6    1.146416379
7   -0.346991812
8    1.461521598
9    1.137133432
10   0.279794240
11   0.223231200
12   0.073642707
13   1.189351263
14  -1.475475451
15  -0.545846785
16  -0.308354389
17   0.057176862
18   0.110297822
19   1.614724688
20   0.333937805
21  -0.455045803
22   1.112606995
23   0.090818346
24   1.197084375
25   1.341475585
26   1.372111156
27  -3.801164826
28   1.444185933
29   1.771778311
30   0.992721365
31  -0.405456644
32  -0.508686492
33  -1.113847782
34  -0.626485520
35   0.769828157
36  -1.143433500
37   1.255052705
38  -0.904507543
39  -0.136776205
40   0.090646088
41  -0.432143135
42  -0.028042830
43   0.840112437
44  -0.217196453
45   1.453196290
46  -0.475677773
47   1.073652238
48   1.365043914
49  -0.823734263
50   0.369147867
51   1.127155635
52   0.164913587
53   0.594676584
54   0.310585125
55  -2.132296639
56  -1.481462641
57  -1.249159547
58  -2.172366996
59   0.604854176
60  -0.642785426
61  -1.818846624
62   0.587461219
63  -1.632140593
64  -0.963315482
65   0.103733568
66   0.615230234
67  -0.499994692
68  -0.458115164
69  -2.211052325
70   0.118251883
71   1.005982498
72   0.272101789
73  -0.100573281
74  -1.418283799
75   0.173090033
76  -0.680980835
77   0.399834058
78  -0.108131590
79  -1.181836681
80  -1.739148689
81   0.541039307
82  -0.044628453
83   1.734376044
84  -1.584897064
85  -0.055381056
86   0.064280380
87  -1.146622390
88   1.373833892
89  -0.042818199
90  -0.798626940
91  -1.395066235
92  -0.169381063
93   1.749310472
94   0.206153018
95   0.189004085
96  -0.455479416
97  -1.799590463
98  -1.599102549
99  -1.165658029
100  0.631894773
101 -0.631274624
102 -0.236886019
103 -0.958399645
104  0.899172760
105 -0.149344571
106  0.417137151
107 -0.216751817
108  0.190826579
109  1.179366951
110 -0.921769871
111  0.758296109
112 -1.758526745
113 -0.107085169
114  1.017442735
115  0.511870350
116  0.716382646
117  1.951197874
118 -0.533362250
119  0.380121198
120 -0.893575008
121 -0.071432272
122  1.118168599
123  1.612562344
124  0.823661465
125  1.362200365
126  1.212513111
127  0.560078320
128 -0.705733797
129 -1.114954959
130 -2.635089643
131 -0.874476385
132 -0.040209724
133 -0.001868220
134  0.609269855
135  0.904281688
136  0.569935353
137 -1.272341538
138  0.122624941
139 -0.631726504
140  0.037270323
141  0.277293648
142  2.621892860
143  1.249282182
144  0.699824597
145  1.198799313
146  0.904967302
147  0.988076662
148  0.015080968
149  0.595103462
150 -1.917452959
151  0.442642791
152  0.838409138
153  1.662579634
154  0.107985322
155  0.380009305
156 -0.167993592
157 -0.843800209
158 -0.335332561
159 -1.078247800
160 -1.053804067
161 -0.920364319
162  1.275150575
163 -0.369063078
164 -0.598867215
165  0.375696239
166 -0.265550767
167  0.868651002
168 -0.499466551
169 -0.399539171
170 -0.550307822
171  0.482030135
172 -0.007052378
173  1.554144003
174 -0.098270182
175  1.125496631
176  0.729951674
177  0.124985074
178  0.572609593
179  0.022804683
180 -0.134695799
181 -1.429547584
182  1.695826208
183 -2.037654545
184 -0.747441387
185 -0.742970086
186 -1.644028414
187 -1.469479417
188  0.780127706
189  1.251053153
190  0.417019189
191  0.662899686
192 -0.158758106
193  0.629694263
194  0.929469787
195  0.660415664
196 -0.306628458
197 -1.238811817
198  0.937593155
199 -1.210782421
200  0.405733523
> 
> 
> 
> cleanEx()
> nameEx("simDataDist")
> ### * simDataDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simDataDist
> ### Title: Create a data distribution object.
> ### Aliases: simDataDist
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> #summary(Output)
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("simEqualCon")
> ### * simEqualCon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simEqualCon
> ### Title: Equality Constraint Object
> ### Aliases: simEqualCon
> 
> ### ** Examples
> 
> # Example 1: Single-group, one constraint
> constraint <- matrix(0, 3, 2)
> constraint[1,] <- c(1, 1)
> constraint[2,] <- c(2, 1)
> constraint[3,] <- c(3, 1)
> rownames(constraint) <- rep("LY", 3)
> equal.loading <- simEqualCon(constraint, modelType="SEM.exo")
> 
> # Example 2: Multiple-group, one constraint
> group.con <- matrix(0, 2, 3)
> group.con[1,] <- c(1, 2, 1)
> group.con[2,] <- c(2, 2, 1)
> rownames(group.con) <- rep("BE", 2)
> equal.path <- simEqualCon(group.con, modelType="Path")
> 
> # Example 3: Single-group, multiple constraints
> constraint1 <- matrix(1, 3, 2)
> constraint1[,1] <- 1:3
> rownames(constraint1) <- rep("LY", 3)
> constraint2 <- matrix(2, 3, 2)
> constraint2[,1] <- 4:6
> rownames(constraint2) <- rep("LY", 3)
> constraint3 <- matrix(3, 2, 2)
> constraint3[,1] <- 7:8
> rownames(constraint3) <- rep("LY", 2)
> equal.loading2 <- simEqualCon(constraint1, constraint2, constraint3, modelType="SEM")
> summary(equal.loading2)
CONSTRAINT OBJECT
Model Type
[1] "SEM"
-------------Constraint----------------
1.
   Group Row Column
LY    NA   1      1
LY    NA   2      1
LY    NA   3      1
---------------------------------------
2.
   Group Row Column
LY    NA   4      2
LY    NA   5      2
LY    NA   6      2
---------------------------------------
3.
   Group Row Column
LY    NA   7      3
LY    NA   8      3
---------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("simExp")
> ### * simExp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simExp
> ### Title: Create random exponential distribution object
> ### Aliases: simExp
> 
> ### ** Examples
> 
>     exp2 <- simExp(2)
>     run(exp2)
[1] 0.3775909
> 	summary(exp2)
[1] "Random Exponential Distribution Object."
[1] "Rate parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simF")
> ### * simF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simF
> ### Title: Create random F distribution object
> ### Aliases: simF
> 
> ### ** Examples
> 
>     f27 <- simF(2, 7)
>     run(f27)
[1] 0.09450995
> 	summary(f27)
[1] "Random F Distribution Object."
[1] "Numerator degree of freedom is 2."
[1] "Denominator degree of freedom is 7."
[1] "Non-centrality parameter is 0."
> 
> 
> 
> cleanEx()
> nameEx("simFunction")
> ### * simFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simFunction
> ### Title: Create function object
> ### Aliases: simFunction
> 
> ### ** Examples
> 
> 
> n65 <- simNorm(0.6, 0.05)
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> 
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> loading.start <- matrix("", 9, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:9, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(9))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> datGen <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.trivial <- matrix(NA, 9, 3)
> loading.trivial[is.na(loading)] <- 0
> LY.trivial <- simMatrix(loading.trivial, "u2")
> 
> error.cor.trivial <- matrix(NA, 9, 9)
> diag(error.cor.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.trivial, "n1")
> 
> misGen <- simMisspecSEM(LY = LY.trivial, RTE = RTE.trivial)
> 
> Data.Mis <- simData(datGen, 300, misspec=misGen)
> 
> loading <- matrix(0, 12, 4)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 4] <- NA
> loading[10:12, 3] <- NA
> 
> path <- matrix(0, 4, 4)
> path[4, 1:3] <- NA
> 
> analysis <- simParamSEM(BE=path, LY=loading)
> 
> Model <- simModel(analysis)
> 
> # Find the products of indicators
> newFUN <- function(data, var1, var2, namesProd) {
+ 	prod <- data[,var1] * data[,var2]
+ 	colnames(prod) <- namesProd
+ 	return(data.frame(data, prod))
+ }
> 
> fun <- simFunction(newFUN, var1=paste("y", 1:3, sep=""), var2=paste("y", 4:6, sep=""), namesProd=paste("y", 10:12, sep=""))
> 
> # Real simulation will need more than just 10 replications
> Output <- simResult(10, Data.Mis, Model, objFunction=fun)
Error in solve.default(E) : 
  system is computationally singular: reciprocal condition number = 3.45248e-23
Warning in estimateVCOV(lavaanModel, samplestats = lavaanSampleStats, options = lavaanOptions,  :
  lavaan WARNING: could not compute standard errors!

> summary(Output)
RESULT OBJECT
Model Type
[1] "SEM"
========= Fit Indices Cutoffs ============
           Alpha
Fit Indices      0.1     0.05     0.01    0.001     Mean
      Chi   1.62e+02 1.80e+02 1.95e+02 1.98e+02 1.32e+02
      AIC   9.27e+03 9.32e+03 9.35e+03 9.36e+03 9.03e+03
      BIC   9.43e+03 9.47e+03 9.51e+03 9.52e+03 9.18e+03
      RMSEA 8.86e-02 9.54e-02 1.01e-01 1.02e-01 7.55e-02
      CFI   9.03e-01 8.89e-01 8.77e-01 8.75e-01 9.38e-01
      TLI   8.67e-01 8.47e-01 8.31e-01 8.28e-01 9.14e-01
      SRMR  5.69e-02 5.81e-02 5.91e-02 5.94e-02 4.66e-02
========= Parameter Estimates and Standard Errors ============
        Estimate Average Estimate SD Average SE Power (Not equal 0) Std Est
LY1_1              0.713       0.101      0.054               1.000   0.710
LY2_1              0.734       0.198      0.054               1.000   0.727
LY3_1              0.709       0.217      0.052               1.000   0.726
LY4_2              0.680       0.109      0.055               1.000   0.682
LY5_2              0.720       0.156      0.055               1.000   0.717
LY6_2              0.728       0.129      0.055               1.000   0.733
LY10_3             0.660       0.198      0.131               1.000   0.640
LY11_3             0.590       0.271      0.087               0.889   0.545
LY12_3             0.550       0.275      0.084               0.889   0.528
LY7_4              0.317       0.103      0.049               1.000   0.758
LY8_4              0.316       0.092      0.049               1.000   0.761
LY9_4              0.319       0.120      0.049               1.000   0.760
BE4_1              1.405       0.804      0.389               0.889   0.505
BE4_2              1.294       0.705      0.351               0.889   0.482
BE4_3             -0.023       0.177      0.148               0.000   0.000
PS2_1              0.601       0.109      0.052               1.000   0.601
PS3_1             -0.006       0.157      0.076               0.333  -0.006
PS3_2             -0.035       0.148      0.081               0.333  -0.035
TE1_1              0.488       0.116      0.050               1.000   0.489
TE2_2              0.435       0.219      0.052               0.889   0.445
TE3_3              0.408       0.290      0.049               1.000   0.431
TE4_4              0.522       0.148      0.053               1.000   0.524
TE5_5              0.466       0.216      0.053               1.000   0.466
TE6_6              0.441       0.207      0.053               0.889   0.448
TE7_7              0.424       0.186      0.044               1.000   0.414
TE8_8              0.422       0.131      0.043               1.000   0.413
TE9_9              0.405       0.151      0.043               1.000   0.411
TE10_10            0.596       0.254      0.207               0.778   0.565
TE11_11            0.706       0.205      0.103               1.000   0.661
TE12_12            0.668       0.156      0.095               1.000   0.677
TY1                0.014       0.056      0.058               0.000   0.013
TY2                0.019       0.037      0.058               0.000   0.019
TY3                0.005       0.060      0.056               0.111   0.005
TY4               -0.018       0.072      0.058               0.111  -0.018
TY5                0.008       0.080      0.058               0.111   0.008
TY6                0.032       0.084      0.057               0.222   0.032
TY7                0.039       0.062      0.059               0.111   0.039
TY8                0.030       0.053      0.059               0.000   0.030
TY9                0.033       0.057      0.058               0.111   0.033
TY10               0.266       0.106      0.059               0.889   0.262
TY11               0.330       0.188      0.061               0.889   0.305
TY12               0.255       0.154      0.058               0.889   0.244
        Std Est SD
LY1_1        0.086
LY2_1        0.174
LY3_1        0.220
LY4_2        0.109
LY5_2        0.147
LY6_2        0.128
LY10_3       0.169
LY11_3       0.217
LY12_3       0.222
LY7_4        0.116
LY8_4        0.093
LY9_4        0.113
BE4_1        0.213
BE4_2        0.209
BE4_3        0.060
PS2_1        0.109
PS3_1        0.157
PS3_2        0.148
TE1_1        0.123
TE2_2        0.244
TE3_3        0.328
TE4_4        0.145
TE5_5        0.213
TE6_6        0.211
TE7_7        0.182
TE8_8        0.138
TE9_9        0.169
TE10_10      0.215
TE11_11      0.229
TE12_12      0.217
TY1          0.058
TY2          0.037
TY3          0.063
TY4          0.074
TY5          0.082
TY6          0.085
TY7          0.062
TY8          0.052
TY9          0.056
TY10         0.112
TY11         0.163
TY12         0.129
========= Correlation between Fit Indices ============
         Chi    AIC    BIC  RMSEA    CFI    TLI   SRMR
Chi    1.000 -0.012 -0.012  0.995 -0.945 -0.945  0.793
AIC   -0.012  1.000  1.000 -0.078 -0.168 -0.168  0.291
BIC   -0.012  1.000  1.000 -0.078 -0.168 -0.168  0.291
RMSEA  0.995 -0.078 -0.078  1.000 -0.920 -0.920  0.768
CFI   -0.945 -0.168 -0.168 -0.920  1.000  1.000 -0.886
TLI   -0.945 -0.168 -0.168 -0.920  1.000  1.000 -0.886
SRMR   0.793  0.291  0.291  0.768 -0.886 -0.886  1.000
================== Replications =====================
Number of Replications
[1] 10
Number of Converged Replications
[1] 9
NOTE: The data generation model is not the same as the analysis model. See the summary of the population underlying data generation by the summaryPopulation function.
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("simGamma")
> ### * simGamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simGamma
> ### Title: Create random gamma distribution object
> ### Aliases: simGamma
> 
> ### ** Examples
> 
>     g11 <- simGamma(1, 1)
>     run(g11)
[1] 0.1551414
> 	summary(g11)
[1] "Random Gamma Distribution Object."
[1] "Shape parameter (alpha) is 1."
[1] "Rate parameter (beta) is 1."
> 
> 
> 
> cleanEx()
> nameEx("simGeom")
> ### * simGeom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simGeom
> ### Title: Create random geometric distribution object
> ### Aliases: simGeom
> 
> ### ** Examples
> 
>     geom5 <- simGeom(0.05)
>     run(geom5)
[1] 13
> 	summary(geom5)
[1] "Random Geometric Distribution Object."
[1] "Probability of successes is 0.05."
> 
> 
> 
> cleanEx()
> nameEx("simHyper")
> ### * simHyper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simHyper
> ### Title: Create random hypergeometric distribution object
> ### Aliases: simHyper
> 
> ### ** Examples
> 
>     hyp <- simHyper(20, 5, 10)
>     run(hyp)
[1] 9
> 	summary(hyp)
[1] "Random Hypergeometric Distribution Object."
[1] "The number of successes is 20."
[1] "The number of failures is 5."
[1] "The number of drawns is 10."
> 
> 
> 
> cleanEx()
> nameEx("simLnorm")
> ### * simLnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simLnorm
> ### Title: Create random log normal distribution object
> ### Aliases: simLnorm
> 
> ### ** Examples
> 
>     lognorm <- simLnorm(0, exp(1))
>     run(lognorm)
[1] 0.1821585
> 	summary(lognorm)
[1] "Random Log Normal Distribution Object."
[1] "Mean in log scale is 0."
[1] "Standard deviation in log scale is 2.72."
> 
> 
> 
> cleanEx()
> nameEx("simLogis")
> ### * simLogis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simLogis
> ### Title: Create random logistic distribution object
> ### Aliases: simLogis
> 
> ### ** Examples
> 
>     logis <- simLogis(0, 1)
>     run(logis)
[1] -1.017531
> 	summary(logis)
[1] "Random Logistic Distribution Object."
[1] "Location parameter is 0."
[1] "Scale parameter is 1."
> 
> 
> 
> cleanEx()
> nameEx("simMatrix")
> ### * simMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMatrix
> ### Title: Create simMatrix that save free parameters and starting values,
> ###   as well as fixed values
> ### Aliases: simMatrix
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> run(LX)
     [,1] [,2]
[1,]  0.7  0.0
[2,]  0.7  0.0
[3,]  0.7  0.0
[4,]  0.0  0.7
[5,]  0.0  0.7
[6,]  0.0  0.7
> 
> n65 <- simNorm(0.6, 0.05)
> LY <- simMatrix(loading, "n65")
> summary(LY)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]                  [,2]                 
[1,] "rnorm(1, 0.6, 0.05)" ""                   
[2,] "rnorm(1, 0.6, 0.05)" ""                   
[3,] "rnorm(1, 0.6, 0.05)" ""                   
[4,] ""                    "rnorm(1, 0.6, 0.05)"
[5,] ""                    "rnorm(1, 0.6, 0.05)"
[6,] ""                    "rnorm(1, 0.6, 0.05)"
> run(LY)
          [,1]      [,2]
[1,] 0.5686773 0.0000000
[2,] 0.6091822 0.0000000
[3,] 0.5582186 0.0000000
[4,] 0.0000000 0.6797640
[5,] 0.0000000 0.6164754
[6,] 0.0000000 0.5589766
> 
> start <- matrix(0, 6, 2)
> start[1:3, 1] <- 0.7
> start[4:6, 2] <- 0.7
> ST <- simMatrix(value=start)
> 
> 
> 
> cleanEx()
> nameEx("simMissing")
> ### * simMissing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMissing
> ### Title: Construct a SimMissing object to create data with missingness
> ###   and analyze missing data.
> ### Aliases: simMissing
> 
> ### ** Examples
> 
> 	#Example of imposing 10% MCAR missing in all variables with no imputations (FIML method)
> 	Missing <- simMissing(pmMCAR=0.1)
> 	summary(Missing)
MISSING OBJECT
The method of missing data handling: Maximum Likelihood 
Covariates (will not impose any missing values): none 
Proportion of MCAR: 0.1 
> 	
> 	loading <- matrix(0, 6, 1)
> 	loading[1:6, 1] <- NA
> 	LX <- simMatrix(loading, 0.7)
> 	RPH <- symMatrix(diag(1))
> 	RTD <- symMatrix(diag(6))
> 	CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> 	SimData <- simData(CFA.Model, 500)
> 	SimModel <- simModel(CFA.Model)
> 	
> 	#Create data
> 	dat <- run(SimData)
> 	
> 	#Impose missing
> 	dat <- run(Missing, dat)
> 	
> 	#Analyze data
> 	out <- run(SimModel, dat)
> 	summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
          7.672           9.000           0.567         854.320          15.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           1.000           1.003        6913.149        6989.012 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.000           0.000           0.045           0.014 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z     p      Std Est
LY1_1    0.731 0.046 15.931 0.000  0.704357570
LY2_1    0.733 0.045 16.206 0.000  0.714021025
LY3_1    0.660 0.044 14.878 0.000  0.674414954
LY4_1    0.705 0.047 15.126 0.000  0.679811806
LY5_1    0.703 0.047 15.019 0.000  0.682394149
LY6_1    0.634 0.043 14.723 0.000  0.663441287
TE1_1    0.543 0.046 11.904 0.000  0.503880413
TE2_2    0.516 0.044 11.796 0.000  0.490173975
TE3_3    0.523 0.042 12.334 0.000  0.545164470
TE4_4    0.579 0.047 12.266 0.000  0.537855909
TE5_5    0.568 0.047 12.110 0.000  0.534338225
TE6_6    0.511 0.041 12.592 0.000  0.559845659
TY1     -0.035 0.048 -0.734 0.463 -0.033887745
TY2     -0.004 0.047 -0.087 0.931 -0.003994820
TY3     -0.016 0.045 -0.350 0.726 -0.016197660
TY4      0.003 0.048  0.058 0.954  0.002677125
TY5     -0.028 0.048 -0.592 0.554 -0.027599516
TY6     -0.018 0.044 -0.406 0.685 -0.018717348
Converged
[1] TRUE
> 	
> 	#Example to create simMissing object for 3 forms design at 3 timepoints with 10 imputations
> 	Missing <- simMissing(nforms=3, timePoints=3, numImps=10)
> 
> 
> 
> 
> cleanEx()
> nameEx("simMisspecCFA")
> ### * simMisspecCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecCFA
> ### Title: Set of model misspecification for CFA model.
> ### Aliases: simMisspecCFA
> 
> ### ** Examples
> 
> n01 <- simNorm(0, 0.1)
> error.cor.Mis <- matrix(NA, 6, 6)
> diag(error.cor.Mis) <- 1
> RTD.Mis <- symMatrix(error.cor.Mis, "n01")
> CFA.Model.Mis <- simMisspecCFA(RTD=RTD.Mis)
> 
> 
> 
> cleanEx()
> nameEx("simMisspecPath")
> ### * simMisspecPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecPath
> ### Title: Set of model misspecification for Path analysis model.
> ### Aliases: simMisspecPath
> 
> ### ** Examples
> 
> u1 <- simUnif(-0.1, 0.1)
> mis.path.GA <- matrix(0, 2, 2)
> mis.path.GA[2, 1:2] <- NA
> mis.GA <- simMatrix(mis.path.GA, "u1")
> Path.Mis.Model <- simMisspecPath(GA = mis.GA, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simMisspecSEM")
> ### * simMisspecSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simMisspecSEM
> ### Title: Set of model misspecification for SEM model.
> ### Aliases: simMisspecSEM
> 
> ### ** Examples
> 
> u2 <- simUnif(-0.2, 0.2)
> n1 <- simNorm(0, 0.1)
> loading.X.trivial <- matrix(NA, 6, 2)
> loading.X.trivial[is.na(loading.X.trivial)] <- 0
> LX.trivial <- simMatrix(loading.X.trivial, "u2")
> error.cor.X.trivial <- matrix(NA, 6, 6)
> diag(error.cor.X.trivial) <- 0
> RTD.trivial <- symMatrix(error.cor.X.trivial, "n1")
> error.cor.Y.trivial <- matrix(NA, 2, 2)
> diag(error.cor.Y.trivial) <- 0
> RTE.trivial <- symMatrix(error.cor.Y.trivial, "n1")
> RTH.trivial <- simMatrix(matrix(NA, 6, 2), "n1")
> SEM.Mis.Model <- simMisspecSEM(LX = LX.trivial, RTE = RTE.trivial, RTD = RTD.trivial, RTH = RTH.trivial, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simModel")
> ### * simModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simModel
> ### Title: Create a model object
> ### Aliases: simModel simModel-methods simModel,ANY-method
> ###   simModel,SimSet-method simModel,SimParam-method
> ###   simModel,SimModelOut-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> SimModel <- simModel(CFA.Model)
> 
> library(lavaan)
> loading <- matrix(0, 9, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:9, 3] <- NA
> HS.Model <- simParamCFA(LX = loading)
> SimModel <- simModel(HS.Model, indLab=paste("x", 1:9, sep=""))
> out <- run(SimModel, HolzingerSwineford1939)
> summary(out)
MODEL ANALYSIS RESULT OBJECT
Fit Indices
            Chi              df          pvalue    baseline.Chi     baseline.df 
         85.306          24.000           0.000         918.852          36.000 
baseline.pvalue             CFI             TLI             AIC             BIC 
          0.000           0.931           0.896        7535.490        7646.703 
          RMSEA  RMSEA.ci.lower  RMSEA.ci.upper            SRMR 
          0.092           0.071           0.114           0.060 
========= Parameter Estimates and Standard Errors ============
      Estimate    SE      z p   Std Est
LY1_1    0.900 0.081 11.127 0 0.7718808
LY2_1    0.498 0.077  6.429 0 0.4235991
LY3_1    0.656 0.074  8.817 0 0.5811320
LY4_2    0.990 0.057 17.474 0 0.8515822
LY5_2    1.102 0.063 17.576 0 0.8550653
LY6_2    0.917 0.054 17.082 0 0.8380100
LY7_3    0.619 0.070  8.903 0 0.5695144
LY8_3    0.731 0.066 11.090 0 0.7230441
LY9_3    0.670 0.065 10.305 0 0.6650091
PS2_1    0.459 0.064  7.189 0 0.4585082
PS3_1    0.471 0.073  6.461 0 0.4705332
PS3_2    0.283 0.069  4.117 0 0.2829833
TE1_1    0.549 0.114  4.833 0 0.4042000
TE2_2    1.134 0.102 11.146 0 0.8205638
TE3_3    0.844 0.091  9.317 0 0.6622856
TE4_4    0.371 0.048  7.778 0 0.2748077
TE5_5    0.446 0.058  7.642 0 0.2688633
TE6_6    0.356 0.043  8.277 0 0.2977393
TE7_7    0.799 0.081  9.823 0 0.6756533
TE8_8    0.488 0.074  6.573 0 0.4772072
TE9_9    0.566 0.071  8.003 0 0.5577629
TY1      4.036 0.105 38.398 0 3.4630482
TY2      5.590 0.103 54.322 0 4.7555391
TY3      1.594 0.099 16.126 0 1.4119762
TY4      2.071 0.088 23.611 0 1.7821807
TY5      3.239 0.097 33.332 0 2.5140601
TY6      1.269 0.083 15.328 0 1.1601697
TY7      3.566 0.094 38.078 0 3.2788058
TY8      4.796 0.088 54.518 0 4.7442674
TY9      4.704 0.087 53.963 0 4.6692496
Converged
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("simNbinom")
> ### * simNbinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simNbinom
> ### Title: Create random negative binomial distribution object
> ### Aliases: simNbinom
> 
> ### ** Examples
> 
>     nbinom <- simNbinom(5, 0.25)
>     run(nbinom)
[1] 14
> 	summary(nbinom)
[1] "Random Negative Binomial Distribution Object."
[1] "The target number of successful trials is 5."
[1] "The probability of successes is 0.25."
> 
> 
> 
> cleanEx()
> nameEx("simNorm")
> ### * simNorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simNorm
> ### Title: Create random normal distribution object
> ### Aliases: simNorm
> 
> ### ** Examples
> 
>     n02 <- simNorm(0, 0.2)
>     run(n02)
[1] -0.1252908
> 	summary(n02)
[1] "Random Normal Distribution Object."
[1] "Mean is 0."
[1] "Standard deviation is 0.2."
> 
> 
> 
> cleanEx()
> nameEx("simParamCFA")
> ### * simParamCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamCFA
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to CFA model.
> ### Aliases: simParamCFA
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> CFA.Model <- simParamCFA(LX = loading)
> 
> 
> 
> cleanEx()
> nameEx("simParamPath")
> ### * simParamPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamPath
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to Path analysis model
> ### Aliases: simParamPath
> 
> ### ** Examples
>  
> path <- matrix(0, 4, 4)
> path[3, 1:2] <- NA
> path[4, 3] <- NA
> model <- simParamPath(BE=path)
> 
> exoPath <- matrix(NA, 3, 2)
> model2 <- simParamPath(GA=exoPath, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simParamSEM")
> ### * simParamSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParamSEM
> ### Title: Create a set of matrices of parameters for analyzing data that
> ###   belongs to SEM model
> ### Aliases: simParamSEM
> 
> ### ** Examples
> 
> loading <- matrix(0, 8, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:8, 3] <- NA
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> SEM.model <- simParamSEM(BE=path, LY=loading)
> 
> loading.X <- matrix(0, 6, 2)
> loading.X[1:3, 1] <- NA
> loading.X[4:6, 2] <- NA
> loading.Y <- matrix(NA, 2, 1)
> path.GA <- matrix(NA, 1, 2)
> BE <- as.matrix(0)
> SEM.Exo.model <- simParamSEM(GA=path.GA, BE=BE, LX=loading.X, LY=loading.Y, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simPois")
> ### * simPois
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simPois
> ### Title: Create random Poisson distribution object
> ### Aliases: simPois
> 
> ### ** Examples
> 
>     pois5 <- simPois(5)
>     run(pois5)
[1] 4
> 	summary(pois5)
[1] "Random Poisson Distribution Object."
[1] "Lambda parameter (mean and variance) is 5."
> 
> 
> 
> cleanEx()
> nameEx("simResult")
> ### * simResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simResult
> ### Title: Create simResult.
> ### Aliases: simResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(5, SimData, SimModel)
> ##D summary(Output)
> ##D 
> ##D # Specify Sample Size by n
> ##D loading <- matrix(0, 6, 1)
> ##D loading[1:6, 1] <- NA
> ##D LX <- simMatrix(loading, 0.7)
> ##D RPH <- symMatrix(diag(1))
> ##D RTD <- symMatrix(diag(6))
> ##D CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> ##D SimData <- simData(CFA.Model, 500)
> ##D SimModel <- simModel(CFA.Model)
> ##D # We make the examples running only 5 replications to save time.
> ##D # In reality, more replications are needed.
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10))
> ##D summary(Output)
> ##D 
> ##D # Specify both sample size and percent missing completely at random
> ##D Output <- simResult(NULL, SimData, SimModel, n=seq(50, 100, 10), pmMCAR=c(0, 0.1, 0.2))
> ##D summary(Output)
> ##D 
> ##D # Use distribution object on sample size and percent completely at random
> ##D n <- simUnif(100, 500)
> ##D pmMCAR <- simUnif(0, 0.1)
> ##D Output <- simResult(5, SimData, SimModel, n=n, pmMCAR=pmMCAR)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simResultParam")
> ### * simResultParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simResultParam
> ### Title: The constructor of the parameter result object
> ### Aliases: simResultParam
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea")
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> 
> # Specify the range of misfits to select the set of misspecified parameters
> Path.Mis.Model2 <- simMisspecPath(BE = mis.BE, misfitType="rmsea", misfitBound=c(0.05, 0.08))
> ParamObject2 <- simResultParam(5, Path.Model, Path.Mis.Model2)
> 
> # Find the maximum misspecification for each actual parameter
> Path.Mis.Model3 <- simMisspecPath(BE = mis.BE, misfitType="rmsea", optMisfit="max", numIter=10)
> ParamObject3 <- simResultParam(5, Path.Model, Path.Mis.Model3)
> 
> 
> 
> cleanEx()
> nameEx("simSetCFA")
> ### * simSetCFA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetCFA
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to CFA model.
> ### Aliases: simSetCFA
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> loadingValues[1:3, 1] <- 0.7
> loadingValues[4:6, 2] <- 0.7
> LX <- simMatrix(loading, loadingValues)
> summary(LX)
[1] "Random Full Matrix Object."
[1] "Free/Fixed Parameters:"
     [,1] [,2]
[1,]   NA    0
[2,]   NA    0
[3,]   NA    0
[4,]    0   NA
[5,]    0   NA
[6,]    0   NA
[1] "Parameter/Starting Values:"
     [,1]  [,2] 
[1,] "0.7" ""   
[2,] "0.7" ""   
[3,] "0.7" ""   
[4,] ""    "0.7"
[5,] ""    "0.7"
[6,] ""    "0.7"
> 
> latent.cor <- matrix(NA, 2, 2)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> error.cor <- matrix(0, 6, 6)
> diag(error.cor) <- 1
> RTD <- symMatrix(error.cor)
> 
> CFA.Model <- simSetCFA(LX = LX, RPH = RPH, RTD = RTD)
> 
> 
> 
> cleanEx()
> nameEx("simSetPath")
> ### * simSetPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetPath
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to Path analysis model
> ### Aliases: simSetPath
> 
> ### ** Examples
>  
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE)
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.GA <- matrix(0, 2, 2)
> path.GA[1, 1:2] <- NA
> GA <- simMatrix(path.GA, "u35")
> 
> path.BE <- matrix(0, 2, 2)
> path.BE[2, 1] <- NA
> BE <- simMatrix(path.BE, "u57")
> 
> exo.cor <- matrix(NA, 2, 2)
> diag(exo.cor) <- 1
> RPH <- symMatrix(exo.cor, "n31")
> 
> RPS <- symMatrix(diag(2))
> 
> Path.Exo.Model <- simSetPath(RPS = RPS, BE = BE, RPH = RPH, GA = GA, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simSetSEM")
> ### * simSetSEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simSetSEM
> ### Title: Create a set of matrices of parameter and parameter values to
> ###   generate and analyze data that belongs to SEM model
> ### Aliases: simSetSEM
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u68 <- simUnif(0.6, 0.8)
> n65 <- simNorm(0.6, 0.05)
> loading <- matrix(0, 8, 3)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loading[7:8, 3] <- NA
> loading.start <- matrix("", 8, 3)
> loading.start[1:3, 1] <- 0.7
> loading.start[4:6, 2] <- 0.7
> loading.start[7:8, 3] <- "u68"
> LY <- simMatrix(loading, loading.start)
> 
> RTE <- symMatrix(diag(8))
> 
> factor.cor <- diag(3)
> factor.cor[1, 2] <- factor.cor[2, 1] <- NA
> RPS <- symMatrix(factor.cor, 0.5)
> 
> path <- matrix(0, 3, 3)
> path[3, 1:2] <- NA
> path.start <- matrix(0, 3, 3)
> path.start[3, 1] <- "n65"
> path.start[3, 2] <- "u35"
> BE <- simMatrix(path, path.start)
> 
> SEM.model <- simSetSEM(BE=BE, LY=LY, RPS=RPS, RTE=RTE)
> 
> loading.X <- matrix(0, 6, 2)
> loading.X[1:3, 1] <- NA
> loading.X[4:6, 2] <- NA
> LX <- simMatrix(loading.X, 0.7)
> 
> loading.Y <- matrix(NA, 2, 1)
> LY <- simMatrix(loading.Y, "u68")
> 
> RTD <- symMatrix(diag(6))
> 
> RTE <- symMatrix(diag(2))
> 
> factor.K.cor <- matrix(NA, 2, 2)
> diag(factor.K.cor) <- 1
> RPH <- symMatrix(factor.K.cor, 0.5)
> 
> RPS <- symMatrix(as.matrix(1))
> 
> path.GA <- matrix(NA, 1, 2)
> path.GA.start <- matrix(c("n65", "u35"), ncol=2)
> GA <- simMatrix(path.GA, path.GA.start)
> 
> BE <- simMatrix(as.matrix(0))
> 
> SEM.Exo.model <- simSetSEM(GA=GA, BE=BE, LX=LX, LY=LY, RPH=RPH, RPS=RPS, RTD=RTD, RTE=RTE, exo=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("simT")
> ### * simT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simT
> ### Title: Create random t distribution object
> ### Aliases: simT
> 
> ### ** Examples
> 
>     nct82 <- simT(8, ncp=2)
>     run(nct82)
[1] 1.399685
> 	summary(nct82)
[1] "Random t Distribution Object."
[1] "Degree of freedom is 8."
[1] "Non-centrality parameter is 2."
> 
> 
> 
> cleanEx()
> nameEx("simUnif")
> ### * simUnif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simUnif
> ### Title: Create random uniform distribution object
> ### Aliases: simUnif
> 
> ### ** Examples
> 
> u1 <- simUnif(-0.1, 0.1)
> run(u1)
[1] -0.04689827
> summary(u1)
[1] "Random Uniform Distribution Object."
[1] "Minimum is -0.1."
[1] "Maximum is 0.1."
> 
> 
> 
> cleanEx()
> nameEx("simVector")
> ### * simVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simVector
> ### Title: Create simVector that save free parameters and starting values,
> ###   as well as fixed values
> ### Aliases: simVector
> 
> ### ** Examples
> 
> factor.mean <- rep(NA, 4)
> AL <- simVector(factor.mean, 0)
> 
> n02 <- simNorm(0, 0.2)
> factor.start <- rep("n02", 4)
> KA <- simVector(factor.mean, factor.start)
> 
> start <- c(2, 0, 0, 1)
> VE <- simVector(value=start)
> 
> 
> 
> cleanEx()
> nameEx("simWeibull")
> ### * simWeibull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simWeibull
> ### Title: Create random Weibull distribution object
> ### Aliases: simWeibull
> 
> ### ** Examples
> 
>     exWeibull <- simWeibull(2, 100)
>     run(exWeibull)
[1] 115.1568
> 	summary(exWeibull)
[1] "Random Weibull Distribution Object."
[1] "Shape parameter is 2."
[1] "Scale parameter is 100."
> 
> 
> 
> cleanEx()
> nameEx("skew")
> ### * skew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skew
> ### Title: Find skewness
> ### Aliases: skew skew-methods skew,vector-method
> 
> ### ** Examples
> 
> skew(1:5)
skew (g1)        se         z         p 
 0.000000  1.095445  0.000000  1.000000 
> 
> 
> 
> cleanEx()
> nameEx("sortList")
> ### * sortList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sortList
> ### Title: Sort two objects in a list
> ### Aliases: sortList
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("standardize")
> ### * standardize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: standardize
> ### Title: Standardize the parameter estimates within an object
> ### Aliases: standardize standardize-methods standardize,ANY-method
> ###   standardize,SimModelOut-method standardize,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # summary(LX)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # PH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # TD <- symMatrix(error.cor)
> # CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> # SimData <- simData(CFA.Model, 200)
> # SimModel <- simModel(CFA.Model)
> # standardize(run(SimModel, run(SimData)))
> 
> # loading <- matrix(0, 6, 2)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loadingValues <- matrix(0, 6, 2)
> # loadingValues[1:3, 1] <- 0.7
> # loadingValues[4:6, 2] <- 0.7
> # LX <- simMatrix(loading, loadingValues)
> # summary(LX)
> # latent.cor <- matrix(NA, 2, 2)
> # diag(latent.cor) <- 1
> # PH <- symMatrix(latent.cor, 0.5)
> # error.cor <- matrix(0, 6, 6)
> # diag(error.cor) <- 1
> # TD <- symMatrix(error.cor)
> # CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> # set <- reduceMatrices(run(CFA.Model))
> 
> 
> 
> cleanEx()
> nameEx("startingValues")
> ### * startingValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: startingValues
> ### Title: Find starting values by averaging random numbers
> ### Aliases: startingValues startingValues-methods
> ###   startingValues,ANY-method startingValues,SimMatrix-method
> ###   startingValues,SimVector-method startingValues,SimSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #startingValues(LX, 10)
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #latent.cor <- matrix(NA, 2, 2)
> #diag(latent.cor) <- 1
> #PH <- symMatrix(latent.cor, 0.5)
> #error.cor <- matrix(0, 6, 6)
> #diag(error.cor) <- 1
> #TD <- symMatrix(error.cor)
> #CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> #result <- startingValues(CFA.Model, 10)
> #summary(result)
> 
> 
> 
> cleanEx()
> nameEx("subtractObject")
> ### * subtractObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subtractObject
> ### Title: Make a subtraction of each element in an object
> ### Aliases: subtractObject subtractObject-methods
> ###   subtractObject,ANY,ANY-method subtractObject,SimRSet,SimRSet-method
> 
> ### ** Examples
> 
> # This function is not public
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #startingValues(LX, 10)
> 
> #u89 <- simUnif(0.8, 0.9)
> #loading <- matrix(0, 6, 2)
> #loading[1:3, 1] <- NA
> #loading[4:6, 2] <- NA
> #loadingValues <- matrix(0, 6, 2)
> #LX <- simMatrix(loading, "u89")
> #latent.cor <- matrix(NA, 2, 2)
> #diag(latent.cor) <- 1
> #PH <- symMatrix(latent.cor, 0.5)
> #error.cor <- matrix(0, 6, 6)
> #diag(error.cor) <- 1
> #TD <- symMatrix(error.cor)
> #CFA.Model <- simSetCFA(LX = LX, PH = PH, TD = TD)
> #result <- startingValues(CFA.Model, 10)
> #summary(result)
> 
> 
> 
> cleanEx()
> nameEx("summaryFit")
> ### * summaryFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryFit
> ### Title: Provide summary of model fit across replications
> ### Aliases: summaryFit summaryFit-methods summaryFit,ANY-method
> ###   summaryFit,SimResult-method summaryFit,SimResultParam-method
> 
> ### ** Examples
> 
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summaryFit(Output)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.712285e+01 1.731436e+01 1.746756e+01 1.750203e+01 1.161908e+01
      AIC   7.506931e+03 7.510452e+03 7.513269e+03 7.513903e+03 7.448091e+03
      BIC   7.582794e+03 7.586315e+03 7.589132e+03 7.589766e+03 7.523954e+03
      RMSEA 4.246827e-02 4.297230e-02 4.337552e-02 4.346625e-02 2.233445e-02
      CFI   9.919334e-01 9.915622e-01 9.912652e-01 9.911984e-01 9.962455e-01
      TLI   9.865557e-01 9.859370e-01 9.854420e-01 9.853307e-01 9.957462e-01
      SRMR  1.872347e-02 1.886138e-02 1.897171e-02 1.899654e-02 1.474084e-02
> summaryFit(Output, detail=TRUE)
           Alpha
Fit Indices          0.1         0.05         0.01        0.001         Mean
      Chi   1.712285e+01 1.731436e+01 1.746756e+01 1.750203e+01 1.161908e+01
      AIC   7.506931e+03 7.510452e+03 7.513269e+03 7.513903e+03 7.448091e+03
      BIC   7.582794e+03 7.586315e+03 7.589132e+03 7.589766e+03 7.523954e+03
      RMSEA 4.246827e-02 4.297230e-02 4.337552e-02 4.346625e-02 2.233445e-02
      CFI   9.919334e-01 9.915622e-01 9.912652e-01 9.911984e-01 9.962455e-01
      TLI   9.865557e-01 9.859370e-01 9.854420e-01 9.853307e-01 9.957462e-01
      SRMR  1.872347e-02 1.886138e-02 1.897171e-02 1.899654e-02 1.474084e-02
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryMisspec")
> ### * summaryMisspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryMisspec
> ### Title: Provide summary of model misspecification imposed across
> ###   replications
> ### Aliases: summaryMisspec summaryMisspec-methods
> ###   summaryMisspec,ANY-method summaryMisspec,SimResultParam-method
> 
> ### ** Examples
> 
> u35 <- simUnif(0.3, 0.5)
> u57 <- simUnif(0.5, 0.7)
> u1 <- simUnif(-0.1, 0.1)
> n31 <- simNorm(0.3, 0.1)
> 
> path.BE <- matrix(0, 4, 4)
> path.BE[3, 1:2] <- NA
> path.BE[4, 3] <- NA
> starting.BE <- matrix("", 4, 4)
> starting.BE[3, 1:2] <- "u35"
> starting.BE[4, 3] <- "u57"
> BE <- simMatrix(path.BE, starting.BE)
> 
> residual.error <- diag(4)
> residual.error[1,2] <- residual.error[2,1] <- NA
> RPS <- symMatrix(residual.error, "n31")
> 
> ME <- simVector(rep(NA, 4), 0)
> 
> Path.Model <- simSetPath(RPS = RPS, BE = BE, ME = ME)
> 
> mis.path.BE <- matrix(0, 4, 4)
> mis.path.BE[4, 1:2] <- NA
> mis.BE <- simMatrix(mis.path.BE, "u1")
> Path.Mis.Model <- simMisspecPath(BE = mis.BE, misfitType="rmsea")
> 
> # The number of replications in actual analysis should be much more than 5
> ParamObject <- simResultParam(5, Path.Model, Path.Mis.Model)
> 
> summaryMisspec(ParamObject)
            mean         sd
BE4_1 0.02332835 0.02344691
BE4_2 0.04287967 0.07869762
> 
> 
> 
> cleanEx()
> nameEx("summaryParam")
> ### * summaryParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryParam
> ### Title: Provide summary of parameter estimates and standard error across
> ###   replications
> ### Aliases: summaryParam summaryParam-methods summaryParam,ANY-method
> ###   summaryParam,SimResult-method summaryParam,SimModelOut-method
> ###   summaryParam,SimModelMIOut-method
> 
> ### ** Examples
> 
> showClass("SimResult")
Class "SimResult" [package "simsemClassic"]

Slots:
                                                                        
Name:   modelType       nRep       coef         se        fit  converged
Class:  character    numeric data.frame data.frame data.frame     vector
                                                                        
Name:  paramValue       FMI1       FMI2    stdCoef       seed          n
Class: data.frame data.frame data.frame data.frame    numeric     vector
                            
Name:      pmMCAR      pmMAR
Class:     vector     vector
> loading <- matrix(0, 6, 1)
> loading[1:6, 1] <- NA
> LX <- simMatrix(loading, 0.7)
> RPH <- symMatrix(diag(1))
> RTD <- symMatrix(diag(6))
> CFA.Model <- simSetCFA(LY = LX, RPS = RPH, RTE = RTD)
> SimData <- simData(CFA.Model, 500)
> SimModel <- simModel(CFA.Model)
> # We make the examples running only 5 replications to save time.
> # In reality, more replications are needed.
> Output <- simResult(5, SimData, SimModel)
> summaryParam(Output)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.     Std.Est
LY1_1      0.690756163  0.02810832 0.04149426                   1 0.697070143
LY2_1      0.684804704  0.02263611 0.04211500                   1 0.684851049
LY3_1      0.696133056  0.01555979 0.04135122                   1 0.703397090
LY4_1      0.665635686  0.05563836 0.04117407                   1 0.680861422
LY5_1      0.695344619  0.03075857 0.04160583                   1 0.699459966
LY6_1      0.726805518  0.04988726 0.04168946                   1 0.721071711
TE1_1      0.504025134  0.01390450 0.03830915                   1 0.513931403
TE2_2      0.530959147  0.03432316 0.03978899                   1 0.530765856
TE3_3      0.495700428  0.04352867 0.03793285                   1 0.504972176
TE4_4      0.509197735  0.03774777 0.03808873                   1 0.535233452
TE5_5      0.505610323  0.05558941 0.03852026                   1 0.510356863
TE6_6      0.484795772  0.02083424 0.03801104                   1 0.479444161
TY1        0.018166032  0.02869038 0.04430370                   0 0.018417690
TY2        0.004590901  0.04278074 0.04471879                   0 0.004545716
TY3        0.020747719  0.01949684 0.04427270                   0 0.021140080
TY4        0.013662145  0.03941881 0.04367343                   0 0.014854827
TY5        0.006917364  0.03267555 0.04446808                   0 0.007233836
TY6        0.013019025  0.02085171 0.04503689                   0 0.013257578
      Std.Est.SD Average.Param  Average.Bias Coverage
LY1_1 0.01422200          0.70 -0.0092438371      1.0
LY2_1 0.01632422          0.70 -0.0151952957      1.0
LY3_1 0.01804012          0.70 -0.0038669437      1.0
LY4_1 0.03863729          0.70 -0.0343643142      0.8
LY5_1 0.02232973          0.70 -0.0046553813      1.0
LY6_1 0.02764566          0.70  0.0268055178      0.8
TE1_1 0.01991785          0.51 -0.0059748662      1.0
TE2_2 0.02240767          0.51  0.0209591474      1.0
TE3_3 0.02529073          0.51 -0.0142995716      1.0
TE4_4 0.05128525          0.51 -0.0008022647      1.0
TE5_5 0.03111061          0.51 -0.0043896774      1.0
TE6_6 0.03996516          0.51 -0.0252042276      1.0
TY1   0.02909934          0.00  0.0181660316      1.0
TY2   0.04208763          0.00  0.0045909006      1.0
TY3   0.02002118          0.00  0.0207477190      1.0
TY4   0.04097595          0.00  0.0136621452      1.0
TY5   0.03314308          0.00  0.0069173639      1.0
TY6   0.02080364          0.00  0.0130190253      1.0
> summaryParam(Output, detail=TRUE)
      Estimate.Average Estimate.SD Average.SE Power..Not.equal.0.     Std.Est
LY1_1      0.690756163  0.02810832 0.04149426                   1 0.697070143
LY2_1      0.684804704  0.02263611 0.04211500                   1 0.684851049
LY3_1      0.696133056  0.01555979 0.04135122                   1 0.703397090
LY4_1      0.665635686  0.05563836 0.04117407                   1 0.680861422
LY5_1      0.695344619  0.03075857 0.04160583                   1 0.699459966
LY6_1      0.726805518  0.04988726 0.04168946                   1 0.721071711
TE1_1      0.504025134  0.01390450 0.03830915                   1 0.513931403
TE2_2      0.530959147  0.03432316 0.03978899                   1 0.530765856
TE3_3      0.495700428  0.04352867 0.03793285                   1 0.504972176
TE4_4      0.509197735  0.03774777 0.03808873                   1 0.535233452
TE5_5      0.505610323  0.05558941 0.03852026                   1 0.510356863
TE6_6      0.484795772  0.02083424 0.03801104                   1 0.479444161
TY1        0.018166032  0.02869038 0.04430370                   0 0.018417690
TY2        0.004590901  0.04278074 0.04471879                   0 0.004545716
TY3        0.020747719  0.01949684 0.04427270                   0 0.021140080
TY4        0.013662145  0.03941881 0.04367343                   0 0.014854827
TY5        0.006917364  0.03267555 0.04446808                   0 0.007233836
TY6        0.013019025  0.02085171 0.04503689                   0 0.013257578
      Std.Est.SD Average.Param  Average.Bias Coverage     Rel.Bias    Std.Bias
LY1_1 0.01422200          0.70 -0.0092438371      1.0 -0.013205482 -0.32886477
LY2_1 0.01632422          0.70 -0.0151952957      1.0 -0.021707565 -0.67128570
LY3_1 0.01804012          0.70 -0.0038669437      1.0 -0.005524205 -0.24852160
LY4_1 0.03863729          0.70 -0.0343643142      0.8 -0.049091877 -0.61763711
LY5_1 0.02232973          0.70 -0.0046553813      1.0 -0.006650545 -0.15135231
LY6_1 0.02764566          0.70  0.0268055178      0.8  0.038293597  0.53732188
TE1_1 0.01991785          0.51 -0.0059748662      1.0 -0.011715424 -0.42970742
TE2_2 0.02240767          0.51  0.0209591474      1.0  0.041096367  0.61064153
TE3_3 0.02529073          0.51 -0.0142995716      1.0 -0.028038376 -0.32850931
TE4_4 0.05128525          0.51 -0.0008022647      1.0 -0.001573068 -0.02125330
TE5_5 0.03111061          0.51 -0.0043896774      1.0 -0.008607211 -0.07896607
TE6_6 0.03996516          0.51 -0.0252042276      1.0 -0.049420054 -1.20975049
TY1   0.02909934          0.00  0.0181660316      1.0           NA  0.63317496
TY2   0.04208763          0.00  0.0045909006      1.0           NA  0.10731232
TY3   0.02002118          0.00  0.0207477190      1.0          Inf  1.06415821
TY4   0.04097595          0.00  0.0136621452      1.0           NA  0.34658949
TY5   0.03314308          0.00  0.0069173639      1.0           NA  0.21169845
TY6   0.02080364          0.00  0.0130190253      1.0           NA  0.62436249
       Rel.SE.Bias
LY1_1  0.476226876
LY2_1  0.860522830
LY3_1  1.657569278
LY4_1 -0.259969619
LY5_1  0.352657815
LY6_1 -0.164326579
TE1_1  1.755162558
TE2_2  0.159246111
TE3_3 -0.128554786
TE4_4  0.009032609
TE5_5 -0.307057676
TE6_6  0.824450828
TY1    0.544200391
TY2    0.045301880
TY3    1.270763189
TY4    0.107933728
TY5    0.360897456
TY6    1.159865848
> 
> 
> 
> cleanEx()

detaching 'package:parallel'

> nameEx("summaryPopulation")
> ### * summaryPopulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryPopulation
> ### Title: Summarize the data generation population model underlying an
> ###   object
> ### Aliases: summaryPopulation summaryPopulation-methods
> ###   summaryPopulation,ANY-method
> 
> ### ** Examples
> 
> # See each class for an example.
> 
> 
> 
> cleanEx()
> nameEx("summaryShort")
> ### * summaryShort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryShort
> ### Title: Provide short summary of an object.
> ### Aliases: summaryShort summaryShort-methods summaryShort,ANY-method
> ###   summaryShort,vector-method summaryShort,matrix-method
> 
> ### ** Examples
> 
> u89 <- simUnif(0.8, 0.9)
> loading <- matrix(0, 6, 2)
> loading[1:3, 1] <- NA
> loading[4:6, 2] <- NA
> loadingValues <- matrix(0, 6, 2)
> LX <- simMatrix(loading, "u89")
> summaryShort(LX)
     [,1]                    [,2]                   
[1,] "NA:runif(1, 0.8, 0.9)" "0"                    
[2,] "NA:runif(1, 0.8, 0.9)" "0"                    
[3,] "NA:runif(1, 0.8, 0.9)" "0"                    
[4,] "0"                     "NA:runif(1, 0.8, 0.9)"
[5,] "0"                     "NA:runif(1, 0.8, 0.9)"
[6,] "0"                     "NA:runif(1, 0.8, 0.9)"
> 
> 
> 
> cleanEx()
> nameEx("symMatrix")
> ### * symMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: symMatrix
> ### Title: Create symmetric simMatrix that save free parameters and
> ###   starting values, as well as fixed values
> ### Aliases: symMatrix
> 
> ### ** Examples
> 
> latent.cor <- matrix(NA, 3, 3)
> diag(latent.cor) <- 1
> RPH <- symMatrix(latent.cor, 0.5)
> 
> u46 <- simUnif(0.4, 0.6)
> factor.cor <- matrix(NA, 4, 4)
> diag(factor.cor) <- 1
> factor.cor.start <- matrix("u46", 4, 4)
> factor.cor.start[1, 2] <- factor.cor.start[2, 1] <- "0.5"
> RPS <- symMatrix(factor.cor, factor.cor.start)
> 
> start <- diag(4)
> start[1, 2] <- 0.5
> start[2, 1] <- 0.5
> ST <- symMatrix(value=start)
> 
> 
> 
> cleanEx()
> nameEx("tagHeaders")
> ### * tagHeaders
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tagHeaders
> ### Title: Tag names to each element
> ### Aliases: tagHeaders tagHeaders-methods tagHeaders,ANY-method
> ###   tagHeaders,VirtualRSet-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("toFunction")
> ### * toFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toFunction
> ### Title: Export the distribution object to a function command in text
> ###   that can be evaluated directly.
> ### Aliases: toFunction toFunction-methods toFunction,ANY-method
> 
> ### ** Examples
> 
> u2 <- simUnif(-0.2, 0.2)
> toFunction(u2)
[1] "runif(1, -0.2, 0.2)"
> 
> 
> 
> cleanEx()
> nameEx("toSimSet")
> ### * toSimSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toSimSet
> ### Title: Transform the analysis model object into the object for data
> ###   generation
> ### Aliases: toSimSet toSimSet-methods toSimSet,ANY-method
> ###   toSimSet,SimRSet-method toSimSet,SimModelOut-method
> 
> ### ** Examples
> 
> # This function is not public.
> 
> # library(lavaan)
> # hs <- HolzingerSwineford1939
> # loading <- matrix(0, 9, 3)
> # loading[1:3, 1] <- NA
> # loading[4:6, 2] <- NA
> # loading[7:9, 3] <- NA
> # model <- simParamCFA(LY=loading)
> # SimModel <- simModel(model, indLab=paste("x", 1:9, sep=""))
> # out <- run(SimModel, hs)
> # set <- toSimSet(out)
> 
> 
> 
> cleanEx()
> nameEx("twoTailedPValue")
> ### * twoTailedPValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twoTailedPValue
> ### Title: Find two-tailed _p_ value from one-tailed _p_ value
> ### Aliases: twoTailedPValue
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateCovariance")
> ### * validateCovariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateCovariance
> ### Title: Validate whether all elements provides a good covariance matrix
> ### Aliases: validateCovariance
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validateObject")
> ### * validateObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validateObject
> ### Title: Validate whether the drawn parameters are good.
> ### Aliases: validateObject
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("validatePath")
> ### * validatePath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validatePath
> ### Title: Validate whether the regression coefficient (or loading) matrix
> ###   is good
> ### Aliases: validatePath
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("vectorizeObject")
> ### * vectorizeObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vectorizeObject
> ### Title: Change an object to a vector with labels
> ### Aliases: vectorizeObject vectorizeObject-methods
> ###   vectorizeObject,ANY,ANY-method vectorizeObject,vector,vector-method
> ###   vectorizeObject,matrix,matrix-method
> ###   vectorizeObject,VirtualRSet,SimLabels-method
> ###   vectorizeObject,MatrixSet,SimGenLabels-method
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("weightedMean")
> ### * weightedMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weightedMean
> ### Title: Calculate the weighted mean of a variable
> ### Aliases: weightedMean
> 
> ### ** Examples
> 
> # This function is not public
> 
> # weightedMean(1:5, c(1,1,1,1,2))
> 
> 
> 
> cleanEx()
> nameEx("whichMonotonic")
> ### * whichMonotonic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: whichMonotonic
> ### Title: Extract a part of a vector that is monotonically increasing or
> ###   decreasing
> ### Aliases: whichMonotonic
> 
> ### ** Examples
> 
> # This is a private function.
> 
> # whichMonotonic(c(3, 4, 1, 2, 3, 5, 2, 1))
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanCode")
> ### * writeLavaanCode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanCode
> ### Title: Write a lavaan code given the matrices of free parameter
> ### Aliases: writeLavaanCode
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanConstraint")
> ### * writeLavaanConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanConstraint
> ### Title: Write a lavaan code for a given set of equality constraints
> ### Aliases: writeLavaanConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanIndividualConstraint")
> ### * writeLavaanIndividualConstraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanIndividualConstraint
> ### Title: Write a lavaan code for a given equality constraint for each
> ###   parameter
> ### Aliases: writeLavaanIndividualConstraint
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> cleanEx()
> nameEx("writeLavaanNullCode")
> ### * writeLavaanNullCode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLavaanNullCode
> ### Title: Write a lavaan code for a null model
> ### Aliases: writeLavaanNullCode
> 
> ### ** Examples
> 
> # No example
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  28.76 0.19 29.19 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
