testObject <- function(object) {
   exists(as.character(substitute(object)))
}
useTemp <- function(filename) {
paste0(tempdir(), "/", filename)
}
checkFigure <- function(filename) {
if (file.exists(filename)) {
file.remove(filename)
return(TRUE)
} else {
return(FALSE)
}
}
checkExample <- function(path, label, subFrom = NULL, subTo = NULL, result = NULL) {
png(useTemp("figure.png"))
txt <- readLines(path)
for(i in seq_along(subFrom)) {
txt <- gsub(subFrom[i], subTo[i], txt)
}
error <- try(time <- system.time(capture.output(eval(parse(text = txt)))), silent=TRUE)
dev.off()
figure <- checkFigure(useTemp("figure.png"))
if(is(error, "try-error")) {
result <- rbind(result, c(label, FALSE, FALSE, NA))
} else {
result <- rbind(result, c(label, figure, NA, time[3]))
}
return(result)
}
checkManuals <- function(path, label, result = NULL) {
#path <- paste0(currentDir, "/simsem/man/", "pValue.Rd")
png(useTemp("figure.png"))
txt <- readLines(path)
txt <- txt[(grep("examples\\{", txt) + 1):length(txt)]
test <- TRUE
while(test) {
if((txt[length(txt)] %in% c("}", "")) || length(grep("keyword", txt[length(txt)])) > 0) txt <- txt[-length(txt)] else test <- FALSE
}
txt[grep("dontrun\\{", txt)] <- ""
error <- try(time <- system.time(capture.output(eval(parse(text = txt)))), silent=TRUE)
dev.off()
figure <- checkFigure(useTemp("figure.png"))
if(is(error, "try-error")) {
result <- rbind(result, c(label, FALSE, FALSE, NA))
} else {
result <- rbind(result, c(label, figure, NA, time[3]))
}
return(result)
}
globalTest <- function() {
# Test
# 1. Successful run
# 2. Have desired characteristics
# 3. Time elapsed
condition <- NULL
success <- NULL
goodrun <- NULL
timeelapsed <- NULL
### Bind function
test.bind()
### Model function
# test.model()
# test.estmodel()
# test.model.lavaan()
# test.covData()
# CFA, SEM, path with fillParam/Not
# Equality constraints
# Inequality constraints
# Multiple groups with three models
# Covariate
# Data distribution Normal copula and Hu-bentler
### draw function
# test.draw()
# test.rawDraw()
# test.fillParam()
# test.createImpliedMACS()
# test.createImpliedConditionalMACS()
# test.popMisfitMACS()
# test.popDiscrepancy()
### createData function
# test.createData()
### generate function
# test.generate()
### sim function
# test.sim()
# outfun
# datafun
### Utilities function from result object
}
result <- NULL
currentDir <- getwd()
currentDir <- gsub("/simsem/R", "", currentDir)
result <- checkExample(paste0(currentDir, "/SupportingDocs/Examples/Version03/ex9/ex9.R"), "Example 9", subFrom = "sim\\(1000", subTo = "sim\\(3", result = result)
q()
