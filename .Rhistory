getwd()
dir <- paste0(getwd(),"/simsem/R/")
 sourceDir(dir)
g definition for function 'adjust'
>  sourceDir(dir)

sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
sourceDir(dir)
CFA.Model
as.data.frame(CFA.Model@pt)
Output
summary(Output)
install.packages("quantreg")
70
summary(Output)
summary(Output)
getSlotNames(Output)
names(Output)
getSlots(Output)
slotNames(Output)
Output@paramValue
CFA.Model@dgen$TE
CFA.Model@dgen
generate(CFA.Model,n=10,params=TRUE)
Output$param
Output@param
slotNames(Output)
Output@paramValue
}
}
source(paste0(dir,"/sim.R"))
summary(Output)
Output
analyze(generate(CFA.Model,n=200))
analyze(CFA.Model,generate(CFA.Model,n=200))
out <-  analyze(CFA.Model,generate(CFA.Model,n=200))
summary(out)
summary(out)
Output
RTE
summary(Output)
Output
library(debug)
install.packages("debug")
library(debug)
mtrace(reduceLavaanParam)
glist
dgen
free
i
dgen[[i]]$RTE@free
lower.tri(dgen[[i]]$RTE@free)
lower.tri(dgen[[i]]$RTE@free,diag=TRUE)
dgen[[i]]$RTE@free & lower.tri(dgen[[i]]$RTE@free,diag=TRUE)
dgen[[i]]$RTE@free
is.free(dgen[[i]]$RTE@free) & lower.tri(dgen[[i]]$RTE@free)
is.free(dgen[[i]]$RTE@free)
is.free(dgen[[i]]$RTE@free) & lower.tri(dgen[[i]]$RTE@free,diag=TRUE)
source(paste0(dir,"/sim.R"))
qqq()
dir
source(paste0(dir,"sim.R"))
Output
Output
mtrace(reduceParamSet)
sim(1,CFA.Model,n=200)
paramSet
dgen
seq_along(paramSet)
qqq()
source(paste0(dir,"sim.R"))
source(paste0(dir,"sim.R"))
Output
summary(Output)
Output
summary(Output)
Output
summary(Output)
summary(Output)
summaryFit(Output)
object <- Output
alpha = .05
cleanObj
usedFit
condition
m
cutoffs
m
t(m)
as.data.frame(t(m))
Data
condition
condValue
condValue
predictorVal
condition[3]
object <- Data
object
vec
values
values[[3]]
m
values[3]
values[[3]]
object <- Output
m
values[3]
nVal
nVal <- values[3]
condition
condValue
condValue
predictorVal[3] <- nVal
predictorVal
predictorVal
Data
revDirec = FALSE
df
df = 0
usedFit
object <- Data
object
predictor <- NULL
predictorVal <- NULL
temp
temp$TLI
temp
predictorVal
condValue
predictor <- condValue
nVal
predictorVal <- rep(NA,3)
predictorVal[3] <- nVal
predictorVal
predictor
predictorVal
xval <- predictorVal
x <- predictor
qtile <- 1-percentile
df
y <- object[,"TLI"]
y
x
x
p
name2
secondord2
express
dat
express
express
dat
library(simsem)
dir <- paste0(getwd(),"/simsem/R/")
dir
out
summary(out)
traceback()
library(debug)
mtrace(sim)
go()
generate
object
param
param@paramValue
sim
qqq()
sim
go()
param
paramData
qqq()
?rnorm
bind(c(NA,NA,0,0),1)
bind(c(NA,NA,0,0),1,.05)
bind 
error.cor <- matrix(0,6,6)
diag(error.cor) <- NA
RTE <- binds(error.cor,1,runif(1,-.05,.05))
RTE
RTE <- binds(error.cor,1,"runif(1,-.05,.05)")
RTE
asdf
asdf
asdf
getwd()
q()
n
summary(Output3)
summaryParam(Output4)
summary(Output4)
summary(Output4)
Output4@paramValue
drawParameters(SimData4)
simParamCFA
simParamCFA(CFA.Model4)
?simParamCFA
run(SimData4)
run(SimData4,dataOnly=FALSE)
library(debug)
debug(drawParameters)
mtrace(drawParameters)
run(SimData4,dataOnly=FALSE) 
qqq()
mtrace.off()
mtrace(drawParametersMisspec)
run(SimData4,dataOnly=FALSE) 
summary(Output4)
qqq()
qqq()
mtrace.off()
summary(Output4)
Output4@paramValue
summary(Output4)
Output4@paramValue
